package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteConnectionHandlerFunc turns a function with the right signature into a delete connection handler
type DeleteConnectionHandlerFunc func(DeleteConnectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConnectionHandlerFunc) Handle(params DeleteConnectionParams) middleware.Responder {
	return fn(params)
}

// DeleteConnectionHandler interface for that can handle valid delete connection params
type DeleteConnectionHandler interface {
	Handle(DeleteConnectionParams) middleware.Responder
}

// NewDeleteConnection creates a new http.Handler for the delete connection operation
func NewDeleteConnection(ctx *middleware.Context, handler DeleteConnectionHandler) *DeleteConnection {
	return &DeleteConnection{Context: ctx, Handler: handler}
}

/*DeleteConnection swagger:route DELETE /workspaces/{workspace_id}/connections/{connection_id} connection deleteConnection

Delete specified connection

*/
type DeleteConnection struct {
	Context *middleware.Context
	Handler DeleteConnectionHandler
}

func (o *DeleteConnection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteConnectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
