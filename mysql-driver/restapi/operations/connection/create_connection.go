package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// CreateConnectionHandlerFunc turns a function with the right signature into a create connection handler
type CreateConnectionHandlerFunc func(CreateConnectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateConnectionHandlerFunc) Handle(params CreateConnectionParams) middleware.Responder {
	return fn(params)
}

// CreateConnectionHandler interface for that can handle valid create connection params
type CreateConnectionHandler interface {
	Handle(CreateConnectionParams) middleware.Responder
}

// NewCreateConnection creates a new http.Handler for the create connection operation
func NewCreateConnection(ctx *middleware.Context, handler CreateConnectionHandler) *CreateConnection {
	return &CreateConnection{Context: ctx, Handler: handler}
}

/*CreateConnection swagger:route POST /workspaces/{workspace_id}/connections connection createConnection

Create new connection

*/
type CreateConnection struct {
	Context *middleware.Context
	Handler CreateConnectionHandler
}

func (o *CreateConnection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateConnectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
