package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

/*GetInfoOK Successful response

swagger:response getInfoOK
*/
type GetInfoOK struct {

	// In: body
	Payload *genmodel.Info `json:"body,omitempty"`
}

// NewGetInfoOK creates GetInfoOK with default headers values
func NewGetInfoOK() *GetInfoOK {
	return &GetInfoOK{}
}

// WithPayload adds the payload to the get info o k response
func (o *GetInfoOK) WithPayload(payload *genmodel.Info) *GetInfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get info o k response
func (o *GetInfoOK) SetPayload(payload *genmodel.Info) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetInfoInternalServerError Unexpected error

swagger:response getInfoInternalServerError
*/
type GetInfoInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewGetInfoInternalServerError creates GetInfoInternalServerError with default headers values
func NewGetInfoInternalServerError() *GetInfoInternalServerError {
	return &GetInfoInternalServerError{}
}

// WithPayload adds the payload to the get info internal server error response
func (o *GetInfoInternalServerError) WithPayload(payload string) *GetInfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get info internal server error response
func (o *GetInfoInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
