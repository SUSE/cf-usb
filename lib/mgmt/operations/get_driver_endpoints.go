package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDriverEndpointsHandlerFunc turns a function with the right signature into a get driver endpoints handler
type GetDriverEndpointsHandlerFunc func(interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDriverEndpointsHandlerFunc) Handle(principal interface{}) middleware.Responder {
	return fn(principal)
}

// GetDriverEndpointsHandler interface for that can handle valid get driver endpoints params
type GetDriverEndpointsHandler interface {
	Handle(interface{}) middleware.Responder
}

// NewGetDriverEndpoints creates a new http.Handler for the get driver endpoints operation
func NewGetDriverEndpoints(ctx *middleware.Context, handler GetDriverEndpointsHandler) *GetDriverEndpoints {
	return &GetDriverEndpoints{Context: ctx, Handler: handler}
}

/*GetDriverEndpoints swagger:route GET /driver_endpoints getDriverEndpoints

Lists all registered driver endpoints

*/
type GetDriverEndpoints struct {
	Context *middleware.Context
	Handler GetDriverEndpointsHandler
}

func (o *GetDriverEndpoints) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
