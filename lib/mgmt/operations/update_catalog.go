package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateCatalogHandlerFunc turns a function with the right signature into a update catalog handler
type UpdateCatalogHandlerFunc func(interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateCatalogHandlerFunc) Handle(principal interface{}) middleware.Responder {
	return fn(principal)
}

// UpdateCatalogHandler interface for that can handle valid update catalog params
type UpdateCatalogHandler interface {
	Handle(interface{}) middleware.Responder
}

// NewUpdateCatalog creates a new http.Handler for the update catalog operation
func NewUpdateCatalog(ctx *middleware.Context, handler UpdateCatalogHandler) *UpdateCatalog {
	return &UpdateCatalog{Context: ctx, Handler: handler}
}

/*UpdateCatalog swagger:route POST /update_catalog updateCatalog

Updates Cloud Foundry's service catalog.


*/
type UpdateCatalog struct {
	Context *middleware.Context
	Handler UpdateCatalogHandler
}

func (o *UpdateCatalog) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
