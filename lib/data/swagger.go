// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x4d\x8f\xdb\x36\x10\xbd\xe7\x57\x10\x6e\x4f\x46\xb1\x76\x82\x9e\x7a\x6b\x62\xa0\x30\x7a\x68\x81\x45\x4e\x69\x90\xa5\x25\xca\xcb\x40\x96\x54\x92\xda\xed\x62\xe1\xff\x5e\x7e\x59\x16\x2d\x52\xa2\x3e\x63\x2d\xec\xcb\xae\xc9\xe1\x90\x1c\x3e\xce\x9b\x67\xf0\xf5\x1d\xe0\x9f\x05\x7d\x86\xfb\x3d\x22\x8b\xdf\xc0\xe2\xc3\xdd\x7a\xf1\x8b\x6a\xc5\x49\x94\xf2\x26\x65\x23\x5b\x9e\x10\xa1\x38\x4d\x84\xdd\xfa\x6e\x7d\xf7\x5e\x5b\xca\x3e\x86\x59\x8c\x44\xcf\xe7\xfb\x8f\xe0\x00\x13\xb8\x47\x07\x94\x30\x00\x33\xbc\x90\x56\x47\xed\x36\x48\x13\x9a\x1f\x10\xe5\xb6\x5f\xce\xc3\x61\x96\xc5\x38\x80\x8c\xbb\x5f\x7d\xa7\x7c\x0e\xd9\xf5\x55\x8f\xc9\x48\x1a\xe6\x41\xcb\x31\x90\x3d\x52\x73\xfd\xab\xca\x96\x64\xf3\x1e\xb1\x4a\xa3\xec\x08\x11\x0d\x08\xce\x98\xde\xf3\x1f\x88\x51\x20\x5c\x90\x83\x9c\x14\xc0\x5d\x9a\x33\xc0\x1e\x11\xe0\x9b\xbe\xfb\x27\x29\xc5\xa3\xf0\x91\x66\x88\x48\xeb\x6d\x28\x7c\xf0\xb9\xb6\x62\x11\x16\x4b\x82\x68\xc6\x63\x83\xa8\x75\x31\xd2\xe4\xc3\x7a\xed\xec\xb4\xad\xf8\x3e\x0f\x78\xd4\x68\x94\xc7\xe0\xe4\xdd\x32\x73\x31\x9a\x06\x8f\xe8\x00\x6b\x67\x90\x76\x3f\x13\x14\x09\xf7\x3f\xad\x42\x14\xe1\x04\x8b\xe9\xa8\x0a\xae\x73\xe0\xd1\xda\x53\x6d\x35\x5b\xce\xdf\x8e\x25\xac\xad\x42\x82\x05\x16\x47\x39\x4a\xf8\x04\x71\x0c\x77\x31\x02\x0f\x6a\x9a\x07\xdf\x83\xdd\xe8\x55\xcd\xfa\x6c\xd9\x4b\x26\xaf\x31\x24\x04\xbe\xd4\x38\x94\xc6\x98\xa1\x83\x7b\x4b\x56\xbf\x94\x11\x9c\xec\xdd\x38\x11\x1f\x3b\x56\xdc\x3d\xbd\x50\xf4\x8d\x27\xa4\x08\xef\xfb\x82\x09\xc6\x31\x50\x0e\x81\x72\x98\x2b\x74\xd0\x76\xe8\xf9\xa4\x17\x33\x0d\x86\xfe\xfa\xf3\x9a\x21\x63\x4f\x33\xc6\xa9\x4d\x8c\x23\x73\x6f\x8b\x2c\xa5\x7e\x08\xf9\x44\x10\x64\x3c\xb5\x80\x04\x3d\x6b\x94\x78\xc1\x22\x90\xe3\xca\xc8\xb0\x0d\xca\x20\x81\x07\xc4\x54\x42\xfc\x62\xdd\x59\x0d\x24\x12\x3e\x56\xcc\x65\xc6\xb5\x06\x16\x58\x6e\x69\x97\x86\x75\x67\x7d\x19\x81\xdf\xc3\x10\x78\xcf\x40\xd0\xbf\x39\x26\x48\x84\x80\x91\x1c\x8d\xc6\x58\x9e\x50\xf2\x05\xcb\xd7\xae\x97\xf6\x7d\xdb\xc4\xaf\xf2\x7e\x29\xf1\x8f\x97\x16\x57\xaf\xc6\xf7\x6f\x38\x3c\x56\x33\x65\x03\x02\x1d\x1b\xb7\x22\x8f\x4f\xe0\x80\x86\x06\x9e\xa8\xeb\x5c\x16\x17\x91\xda\x6e\x40\x1a\x49\x52\xa7\x88\x3c\xe1\xc0\x45\x90\x7e\x80\x6b\xa4\x30\x33\xba\x17\x68\x68\xc9\x26\x45\xf1\x61\xb2\x49\x17\x32\xf9\xf8\xb2\xdd\x4c\x57\x93\x54\xa0\x39\x97\xdb\xdb\x90\xea\x73\xbf\xd3\xfb\x9c\x85\x3c\x63\x53\x09\x3a\xa3\x1c\x00\xcf\x98\x3d\xca\x66\x1c\x82\xe5\xf2\x12\xf3\xcb\xa5\xc7\xc1\xe6\xd2\xf9\x8d\x0e\x9c\x96\x57\x05\xa8\xd9\xd1\xc1\x05\xe4\x43\x14\x73\x14\x79\xa1\x7e\x23\x4d\x7b\xa6\x2d\x35\x5f\x13\xba\xbd\x22\xf8\xeb\x55\x11\xaa\x26\x9f\xbe\x0a\x43\xe4\x0e\xf4\x1f\xa6\x8c\x93\x0f\x78\xd0\x4e\xbd\xc5\xe9\xfd\x69\x11\xb3\x66\x82\x69\xa5\xc6\xa9\x6a\x98\xa1\xc8\x28\xf0\x01\xce\x1b\xf2\x16\x1c\xf7\xce\x6a\x69\x20\x72\xa9\x2f\xc7\xa4\x69\x67\x5a\xd1\xbe\xeb\xf7\x5d\x38\x98\x8a\x5b\x1a\xa1\xf4\x66\x59\xa5\x3e\x27\xae\x5e\xf5\x7f\xdb\xcd\xe0\xba\xa2\xf0\x7c\x13\x14\x72\xcd\xe7\x9c\x60\xd6\xa2\x45\x9c\xbc\x8a\xd0\x33\x97\xbc\x55\x61\x31\xd8\x5d\x1d\x5e\x52\x0c\x73\x84\x4a\x47\xcc\x36\xcb\xab\x80\x34\x5c\x41\x39\xf0\x96\xdd\xb5\xc1\x75\x6b\x86\x56\xb5\xac\x9a\xa2\x06\xbc\x33\x56\x08\x65\x36\x5c\x65\x31\x4c\x2c\x9a\xe1\xc6\x89\xa5\x4f\x7f\x4e\x94\x51\x7e\x00\x51\x4a\xe4\xf7\xee\x6c\xf8\xb7\x3c\xae\x59\xd3\xe1\xb4\xea\x4a\x44\x7e\x6e\xd2\x4a\xac\xb9\x33\x56\x0c\x71\x25\xe0\xd2\x19\x2d\xd3\x65\xfb\xd1\x8a\x83\xcc\xbe\xff\xc2\xae\xb3\xfe\x6b\x75\x44\x85\xa3\xa9\x2a\x85\x7a\xd0\x7b\x97\x09\xfd\x48\x65\xf5\x2a\xfe\xdc\x14\x97\x85\x5d\xaa\xe3\x1a\xb6\xac\x22\x39\xc2\x7e\x6b\x2e\xc8\x15\x53\x69\x49\x98\x2c\x97\x2a\x36\xcb\xe5\xf9\x3a\x9e\x6f\x63\x6b\x6e\x7d\xab\x6a\x73\x98\x8c\x30\xbc\xd4\x94\x79\xd4\x54\x99\x95\xf3\x3c\xfd\xd6\xd6\x57\x83\xba\xc8\xf0\x8a\xa9\x46\x8b\xd0\x26\xdf\x33\xe3\x95\xeb\x2f\x48\x06\x95\x9f\xfe\x89\xab\x25\xba\x0d\x91\xda\xab\xd4\xfb\xf1\x42\x55\xfe\x77\x7a\xbd\x5b\xc2\x9c\xb1\xb0\xea\x6b\x61\xd9\x7a\xa2\xa0\x74\xf7\x1d\x05\xec\x22\x08\xe5\xcb\x51\xbd\xdc\xc5\x6b\xe3\x5a\x96\xca\x88\x88\x3c\xc3\x8e\x20\x96\x9e\x2c\x3b\x22\xdc\x8e\x24\xed\xa5\xd6\xa9\x34\x19\x74\xfb\xd6\x77\x30\x2a\xa7\xf5\x8a\x08\x0e\x7b\x04\xc3\xb2\xa2\x1d\x4e\x42\xf1\x5c\xb6\xd9\xeb\x2e\x4d\x63\x64\x4b\x53\x36\xb7\x3a\x79\x0f\xb8\x50\xf3\xaa\x0c\xe8\x98\x41\xcb\xeb\xd1\x8a\xc7\x3a\x51\xed\x21\xa6\xbd\x1e\xd0\xfa\x09\x38\xce\xa8\x90\x93\x97\x9b\x6b\x2e\x71\xeb\x17\x5e\xf5\x7a\x42\x0f\x1d\x30\xbc\xf6\xdf\xc1\x2a\x2e\xfb\xc6\xb7\x2d\xaf\x76\xfb\xa9\x4f\xfa\x9b\x45\x9e\x18\xfe\x02\x0e\x9d\x79\x46\xbb\xd0\x11\x41\xbd\xd2\x99\x07\x0e\xcc\xb7\x46\xb3\x00\xc4\xd0\xc7\x37\x42\x86\x1f\x2b\x05\x39\x5f\xf0\x54\xbc\xfe\xa0\x2c\x5f\x5f\xbb\xbd\x3b\xfe\x1f\x00\x00\xff\xff\x17\x21\xb7\xfa\xe9\x35\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 13801, mode: os.FileMode(416), modTime: time.Unix(1444412769, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

