// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// swagger-spec/service_manager_api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5d\x73\xd3\x46\x17\xbe\x76\x7e\xc5\x8e\xde\xf7\x2a\x13\x2c\x43\xa1\x33\xe5\xaa\x26\xa1\x1d\x0f\x0c\x30\x4d\xb9\x4a\x33\xc9\x5a\x5a\xdb\x4b\x25\xad\xd8\x5d\x25\xa4\x19\xff\xf7\xee\x97\x3e\x2d\x4b\x2b\x39\x04\x89\x72\x83\x89\x74\xbe\xf6\x9c\x67\x9f\x73\x56\xd2\xfd\xd1\xc4\x61\xb7\x70\xbd\x46\xd4\x79\x09\x9c\x67\xd3\x99\x73\x22\x2e\xe1\x68\x45\xc4\xdf\xe2\xee\xc4\xf1\x11\xf3\x28\x8e\x39\x26\x91\x14\xf9\x18\xe1\x1b\x44\x19\x0c\x00\x43\xf4\x06\x7b\x08\x2c\x29\xf9\x1b\x51\x10\xc2\x08\xae\x51\x88\x22\x0e\xe6\x1f\x16\xd2\xcc\xc4\x91\x92\x46\x6f\x36\x9d\x4d\x9f\xea\xab\x1c\xf3\x00\x29\x5b\xe7\xaf\x8a\x6a\x30\xc6\x46\x00\xd1\x90\xbd\x5f\x9d\x6b\x07\x52\x72\xc3\x79\xcc\x5e\xba\xee\x1a\xf3\x4d\xb2\x9c\x7a\x24\x74\x37\xb1\x17\x90\xc4\x77\xbd\xd5\x93\x84\x2d\xb5\xa2\x47\x22\x0e\x3d\x6e\x42\x9f\x38\x28\x84\x38\x50\xfa\x42\xca\x47\x37\xbf\x6e\x62\x24\x95\x1d\x71\x77\xab\x34\x02\xe1\x20\x62\x28\xd3\x88\x60\xa8\x1c\xce\x63\xe8\x6d\x10\x30\x09\x11\x37\x12\x1a\xa4\x81\x88\x38\x6e\x6f\x6f\xa7\x50\x89\x4c\x09\x5d\xbb\xc6\x0a\x73\xdf\x2e\x4e\x5f\xbf\x3b\x7f\xfd\x44\xe8\x4d\x37\x3c\x0c\x94\xa3\x23\xe5\xcb\x61\xc8\x4b\x28\xe6\x77\x67\x68\x85\x23\x2c\xf3\xc9\xd2\x1c\xcf\x13\xbe\x21\x14\xff\x03\x4d\x96\x75\x2c\xfc\x2e\x56\xb1\x88\xbc\xbc\x41\x77\x26\x0e\xac\xb2\xb9\x41\xd0\x17\x25\x3b\x29\xc7\x5c\xb2\xa2\xef\x55\xab\x37\x9f\x83\x3f\x45\xb9\xa2\xba\xc0\x84\xc0\x45\x6d\x38\x17\x97\x42\xf2\x52\x8a\x8a\x04\xb3\x24\x44\x32\xf0\x0b\x29\x09\xe3\x58\xac\x5d\xc9\xb9\x9f\x18\x91\x66\x95\x5c\x4c\x89\x9f\x78\x16\x72\x90\x6f\xb2\x2c\xb8\x49\xec\x43\x8e\xae\x84\x1c\x0c\xc8\x3a\xcb\x43\x4c\x58\x56\xd2\xdd\x15\x29\x1d\x06\xf8\x26\x43\xa2\xd1\xff\xcb\xe4\x60\xe2\x90\x18\x51\xe5\x7b\xe1\x4b\x15\xed\xe6\xd4\x78\x31\x32\x14\xb1\x98\xc8\x1a\x66\x9e\x26\xce\xb3\xd9\x2c\xff\x6b\xc7\xf3\x79\xe2\x89\x15\xb2\x55\x12\x80\x54\xd9\xd1\xa2\xdb\x13\x63\xe0\x45\xa3\x81\x8f\x11\xfa\x12\x23\x8f\x23\x1f\x20\x4a\x89\x29\xa7\x14\x64\x02\x58\x21\x2c\xa8\xe6\x60\x60\x9c\xe2\x68\x6d\x1c\xc9\x12\xe6\x3f\xea\xdf\x6d\x06\x6d\xb7\xb0\x8b\x27\xce\x1a\xed\xcf\xe1\xef\x88\x33\x20\xa5\x69\xa8\xd2\x04\xe0\x92\x24\x5c\xa5\x54\x6c\xd1\xe9\xde\x44\x0a\x9b\x0b\xe9\xe3\x41\x53\xd8\x94\x84\xff\x53\xb4\x92\x7a\xff\x73\xfd\x7c\x13\xe9\x75\x56\x12\x32\x94\x0a\x30\x0e\x23\x2f\xcf\x48\x7b\x19\xe0\x8d\xa0\x2c\xb8\x0c\x10\xc8\x95\x1b\xb2\x5f\x11\x89\x21\x15\x64\x20\xf8\x53\xed\xbc\xcb\xde\x85\x79\xff\xc6\x2a\x15\x90\x52\x78\x97\x49\x0a\x72\xe2\x28\x64\x45\xc9\xfd\x25\xd3\x81\xa7\x59\x4c\xd3\x38\x88\xfa\x9d\xb4\xb3\xce\x29\x45\x82\x42\x00\x8c\xb2\x2a\xed\x29\x92\xa7\x04\x17\x15\xa1\x72\x99\xd2\x92\xa4\x3c\x5e\x31\xb9\xe3\x3c\xb5\x06\x38\x01\x4b\x04\xb4\x0b\x3f\x93\xd6\x1d\x62\x49\xfc\xac\x32\x02\x00\x9f\x13\x4c\x91\x8c\x88\xd3\x04\xa5\x97\x77\x92\x64\x57\x2d\x93\xab\x66\x74\x3d\x6d\x28\x5b\xb6\x80\x4a\xe8\x9d\xf6\x7c\x19\x40\x55\xdc\x3c\x9f\xfd\xd2\x10\xc0\x29\x89\x56\xa2\x1f\xf1\xa1\xf1\xb5\xd9\xcd\xee\x7d\xfa\xdf\x2b\xec\x6f\xbb\x50\x78\x9a\x57\xb1\x3e\xbc\x4e\x34\x10\x59\x33\x7f\xf7\x41\xa6\x08\xab\x02\x37\xd9\xc8\x5b\xf1\xba\x38\x6b\x43\x64\x5d\xd6\x5a\x80\x76\x00\x8d\xf5\x85\xd6\xf3\x06\x97\xef\x08\x07\xbf\x91\x24\xf2\x87\x80\x2d\xc3\x64\x49\xdb\xf8\x54\x24\xb2\x96\xb1\x69\x0c\x80\x39\x01\x7b\xe3\xd0\x3b\xa3\x89\x2b\x2b\xb1\xcc\x7d\x1f\xec\xd3\xfe\x06\xb4\xda\x32\x4d\xe9\x61\xea\xc0\x69\xea\xab\xc0\x7f\x3c\x84\x9c\x1e\x9c\x02\x81\xea\xbd\xfb\xe6\x4c\xdd\xb6\x18\x00\xb4\x9d\x31\xec\x9a\x66\xe0\x35\x15\x3d\xf3\xac\x17\x5b\x53\xfb\xd1\x30\x66\x6b\x37\x76\x63\x69\xc0\xa6\x25\x7f\x10\x82\xfa\x5c\xda\x4a\xad\xd2\xe6\xf8\x21\xd2\xd2\x89\xbf\x07\x50\x98\x67\x5e\x1d\xce\x73\xb2\xfe\xe8\x0b\x66\x5c\xb8\x00\xd7\x46\xff\xba\x69\x24\x33\x8f\xbd\x5e\xdd\xa5\xd5\x5a\xf8\x87\x62\xe2\x73\x82\x68\xde\xe1\x2a\xeb\x6e\x01\x42\x03\x84\x86\xd1\xb0\x4c\x4e\x87\xf9\x04\x20\x05\x8c\x7b\x6f\xfe\xd7\x6d\xa2\x97\xe8\xc9\x40\x03\x6e\x31\xdf\x68\x42\xf1\xc1\xf1\xb1\xb9\xbc\x38\x3b\x3e\x6e\x05\x93\x1d\x80\xf2\x10\xbb\x70\xca\x19\x20\x2b\x15\x15\x2b\xf9\x7a\x2c\x66\x79\x14\x10\x8d\x88\xac\x6c\x67\xfe\x43\xc1\xa5\x8f\x03\x63\xc1\xd7\xee\x91\xa0\x6a\xad\xfd\x28\x60\xce\x4a\x96\x61\xd8\x9e\x02\xca\xc8\x1b\xc8\x21\xe0\xeb\x6c\x87\xf1\x9c\x01\x72\x02\x8f\x03\x18\x75\x68\xf7\xd7\x4a\xfe\xba\x95\x90\x3f\x28\xb3\x8f\xdc\xd6\x57\x30\x60\x43\xec\xeb\x07\x3f\x4e\x96\x49\x1f\xe4\xa3\xe4\x0a\x8e\xdc\x7b\xf9\xd3\x63\x04\x90\x6a\x05\x8a\x3e\x3e\x96\x17\xac\x3a\xbf\x04\x9a\x1d\xce\x4c\x68\xbd\xa8\x39\xce\xbd\x8c\xab\xef\x17\x91\xf3\x9f\x69\xfa\x72\xd1\x95\x7e\x9f\xe2\x09\xac\x08\x2d\x36\xdb\x5e\xd3\xc0\xc0\x31\xb7\x3b\x0b\x94\x4c\x59\x0f\x02\x36\x01\xd8\x4e\x01\x05\x1c\x0e\x64\x04\xf8\x4e\x76\x46\xce\xc0\x3e\x16\xed\xaf\x43\x27\x57\xf2\x0d\x9d\x7c\x1e\x04\x67\xca\xe4\x8f\x2e\x5e\x8a\xbc\x77\x17\x97\x09\x1f\x64\x17\x37\xec\x6a\xf3\x42\x18\xc8\x45\x48\x12\x6d\x7c\x1f\x2c\x71\x63\x07\x1b\x3f\x97\xb4\x61\xa6\x77\xe8\x16\x94\x54\x0e\xa4\xa5\x42\x49\x0e\x7e\xeb\xfb\x30\xb4\x54\x04\xc9\x10\xb0\x51\xe1\x17\xf7\x5e\xfe\xf4\x98\xf0\xa4\x5a\x69\xc2\x33\x76\x9a\x46\xbc\x6e\x30\xea\xdb\x67\x6d\xf0\x34\xc8\xd9\xae\x09\x2a\x23\xea\x60\xdd\x66\x3b\xc5\x3f\xe5\xd9\xae\x0d\x49\x7a\x76\x1b\x38\x98\x76\x87\xb6\x8e\xd4\xa8\x93\xe4\x7f\x53\x7a\xfc\x81\xf9\x07\x7f\x07\xdb\x97\x3e\xb5\xed\x81\x83\xbe\xff\x2b\xd9\x3a\x34\x8d\x17\x0e\x47\x93\xec\x63\x65\x7f\xf7\xeb\xe9\xd2\x77\xae\xa9\x4d\xb2\xfc\x24\xc2\xd0\xee\x8b\x39\xbf\xd0\x19\xd5\x9f\x0a\x5f\xc1\x18\x5f\xa5\x1f\xa9\x9b\x5c\x27\x6c\x99\x5d\x92\x57\x2e\x0d\xff\x52\x09\x20\x8e\x0b\x35\xa8\x33\x92\xd7\xa7\x9e\xc5\x76\x7d\xb4\x68\x94\x87\x0c\x96\x7d\x12\xdf\x69\xb5\xbb\x87\x0f\x8d\xeb\x96\xf5\x61\xdf\x72\x3d\x45\xfb\x7b\x35\x52\x00\x85\x38\x7a\x8b\xa2\xb5\xd8\x38\x2f\xc1\x4f\x3f\x67\x57\xe1\x97\xc2\xd5\x92\xf5\x25\x8e\x7c\xf9\x45\x6c\x8d\xe9\x25\x21\x01\x4a\xcf\xa9\xdb\xe2\xd2\xba\x85\x51\x17\xc5\x8b\x59\xc9\x6a\x19\xe8\x36\x59\xe1\x70\xcd\x6a\x44\x4b\xe7\xa3\x9d\xd3\x51\xfd\xa6\xd8\x96\x0c\x0b\x96\x82\xa2\x99\xc1\x1a\xe3\x06\x08\x75\xd8\x51\x07\xfa\x8e\xc0\x29\xb3\x9e\x15\x68\xbe\x4e\xf6\xad\xa1\x98\x46\xfc\xf0\x30\xec\x0e\x80\x15\x45\xed\xa0\x2d\x17\x49\xb5\x8a\x03\x76\xf7\x38\x76\x74\xe9\xfb\xd4\x36\x14\xa7\xed\xb9\x00\x5f\x3b\xb2\xcc\xbe\xcc\xea\x98\xcf\x07\xa5\xc6\xe6\xed\x50\xe1\x0b\x2a\x0e\x75\x1f\xff\x78\x6b\x29\xdf\x27\x8b\xa5\x87\x60\x0f\x4a\x4a\x95\xd6\x64\x57\x22\xb5\x5b\xcb\x93\x41\x8d\x9a\xec\xfd\x47\xdb\x7f\x03\x00\x00\xff\xff\xee\xd6\xb1\x0e\xac\x36\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 13996, mode: os.FileMode(420), modTime: time.Unix(1461833636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSpecService_manager_apiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7b\x6f\xdb\xb6\x16\xff\xdb\xfa\x14\x84\xee\x05\xee\xbd\x40\x6e\x9c\xb6\xc3\xb0\x0e\xdb\x80\x22\xe9\xd6\x0e\x58\x5b\xb4\x1d\xf6\x47\x1b\x04\x8c\x44\xdb\x6c\x64\x49\x13\xe9\x78\x41\xe0\xef\x3e\x92\x22\x29\x3e\x44\x3d\xea\xb4\xb3\x13\x0b\x88\x63\x53\x87\x87\xe7\xfc\xce\x43\xd4\x39\xbc\x8d\x7e\xa8\x2f\xf0\xe2\xf9\xb3\xb3\x68\x12\x93\x35\x9c\xcf\x51\x15\x7f\x0f\xe2\xc7\xc7\x27\xf1\x11\x1b\xc2\xf9\xac\x60\xbf\x6f\xa3\xc9\x24\xbe\x46\x15\xc1\x45\xce\x6f\x5f\x3f\xe2\x77\x27\x31\xc5\x34\x43\x7c\xe0\x14\x52\x98\x15\x73\xf0\x0e\x55\xd7\x38\x41\xe0\x37\x98\x43\xc6\x0a\x3c\x7b\xf3\xb2\xa6\x4c\x11\x49\x2a\x5c\x52\xc9\xe0\xfd\x02\x81\x19\xae\x08\x05\x92\x2b\x28\x66\x80\xb2\xc1\x0e\x46\xc7\xe0\x63\xfe\x7e\x81\x09\xff\x0e\xd6\x38\xcb\xc0\x25\x02\xf0\x1a\xe2\x0c\x5e\x66\x08\x30\x1e\x5d\x0c\x92\x22\xa7\x10\xe7\xec\xdb\x7a\x81\x93\xc5\xc7\xbc\x5a\xe5\x04\x30\xd2\x7c\x0e\x08\x4e\x11\xb8\x29\x56\x15\x20\x72\x16\xcc\x53\xf1\x1d\x11\x40\x8a\x25\x52\xd2\xa9\xdb\x4b\xc1\x74\x89\x72\xca\x64\x4a\x60\x09\x2f\x71\x86\x29\x46\xe4\xf8\x63\x1e\x47\x93\x0d\x87\x8e\x2d\x48\x56\x4b\x44\x98\xba\x1f\x38\x02\xb0\x2c\x33\x9c\x40\x8e\xc0\xf4\x13\x29\x38\xdd\x39\xa7\x2b\xab\x22\x5d\x25\xfd\x74\x24\x59\x20\x83\xdd\x82\xd2\x52\xb3\x80\x74\x41\x94\x99\xa6\x30\x65\x98\x52\x4c\x90\x1c\x61\xf7\x0b\x42\xd5\x8f\x49\x5c\x94\xa8\x12\xec\x5f\xa6\xdc\x14\x9a\x5c\x22\x27\xec\xe5\x5b\xec\x99\x22\xd3\x20\x14\xb3\x19\xaa\x70\xae\x27\x94\xb0\x82\x4b\x44\x99\x3d\xb9\x8c\xe7\x72\xb4\x42\xa4\x64\x48\x20\xa2\x05\x98\xc4\x8f\x4f\x4e\x9a\x5f\x1d\x2b\x25\xd2\x96\xc5\x55\x5c\xd3\x6e\x8e\x22\x35\x65\x06\x57\x19\xed\xe0\x32\x47\xcc\xd6\x38\x01\xa8\xaa\x8a\x0a\x28\x29\xa4\xac\x13\x09\x27\x34\x18\x4c\xe2\x7f\x57\x68\xc6\xa7\xfe\x6b\xca\xd8\xe3\x1c\x73\x56\x64\xfa\x9c\x33\x90\xeb\x4f\x36\x91\xf1\x4f\x7c\xf2\x0f\x21\x56\x3c\x5d\x17\xd5\x15\x29\x61\xd2\xe8\xea\x20\x4f\xe1\x5c\xd9\x8f\xff\xd4\xf4\x35\x77\x85\x98\x63\x9f\xa4\x42\x90\xa2\x3f\x34\x6d\xbb\x79\x4e\x05\x15\xc8\xd1\x1a\xac\x5d\x52\xdb\x30\xca\x08\x39\x1b\x6b\xf8\x5f\xe8\x59\x17\x15\xfa\x73\x85\x98\xd8\x0a\x6b\x2c\x16\xb8\x2c\xd2\x9b\xb8\x81\xdf\x8b\x66\xe5\x15\xbf\xbe\x7b\xfd\x8a\xc7\x12\x58\x43\x16\x1d\xb4\x00\x02\x02\x35\xd1\x43\x3d\x00\xba\x8c\x5e\x19\xbc\x5a\xf9\x5a\xcb\xb7\x52\x40\xc7\x27\xb8\xdc\xb8\x42\x1c\x34\x5a\xad\x50\x6d\xa2\x6e\x37\x7c\xd4\xe1\x40\x35\x2e\x1e\x9a\x63\x5c\x27\xa0\xc5\x5b\xe5\x8c\x8e\x53\xed\x89\x73\x4f\x6f\x1b\x5f\xc1\xe9\x46\xfb\xfa\x1c\x6d\xeb\xea\x8c\x43\x9f\x9f\xff\x82\xa8\xc8\xc4\x29\x62\xd9\x3c\x23\x60\xc6\xf4\x17\x99\xb9\x44\x09\x9e\x61\x66\xfd\x41\x4e\x6f\x6a\xe0\x38\x3a\x4f\xa6\x21\x47\xd7\xd2\x81\x97\x67\x71\xc0\xef\xd4\x30\xbd\x29\xc5\x52\x84\x8a\x24\x39\xc4\x1d\xbb\xb2\xa2\x52\x98\x3d\x89\xb4\xae\xc0\x45\xeb\x61\x39\xa7\xe0\xc8\x56\xcf\x98\x99\xb7\xf4\xbc\x9a\x49\x9f\xf3\x9d\x09\x2a\x03\xff\x91\xa9\x76\x1f\xbd\x4e\x68\xec\x80\xb8\x93\xde\x30\x20\x55\x4d\xd9\x9e\x2c\x47\x89\xe0\x37\xec\x11\xdd\x4c\x18\xf0\x8c\x3e\x6d\x88\x7b\x1f\xd2\x89\x47\xbb\x9b\xae\x73\x04\xbc\xfd\x82\x96\xfc\x42\x6e\x1d\x76\x6f\xc3\xd0\x58\xe2\x1f\xd8\x31\x78\xa6\xfd\xfc\xac\xdc\xe8\xb1\x47\x69\x79\x64\x20\x4e\x6f\x0d\x8f\x1a\xba\x9f\x18\x18\x97\x8c\x45\x6f\x50\xee\xf9\x8e\xa2\x33\x40\x47\x89\xd2\xcc\xdb\x91\xdd\xcd\x43\x0f\xa4\x41\xfb\x9b\x81\x91\x50\x73\xe9\x0d\x06\x6f\x87\x73\x2f\x9e\x53\x7b\x14\x06\x02\x7e\xd7\xa6\x3b\xe9\x9d\x91\xf8\x13\xa5\x2e\x63\x9a\x64\x1c\xf7\xbd\x5d\xa8\x24\xaf\x00\x2c\x2e\x3f\x31\x8d\x6b\x31\x4d\xb0\x3f\x48\xa7\xab\x0a\xf6\x14\x21\x0c\xe3\x0b\x31\x43\x22\x4c\x28\xa4\x2b\x22\x84\xac\x41\xe7\x84\x25\xaf\x1e\x19\xa0\x7b\x93\x1b\x6b\x38\xe6\x53\x28\xa3\x7c\xb5\x6c\x42\x6c\x12\xbf\x2a\x72\x03\xc1\x33\x69\x03\x3d\xf0\xfc\x2f\x8a\x72\xd2\x58\xeb\x3c\xe0\x59\x6f\xb4\x1c\x40\x2c\x1c\x19\xa6\x55\xaa\x8c\x96\x2d\xb7\x64\x5b\xe5\x57\x79\xb1\x36\xf3\xe5\x2a\xe1\x6b\xce\x56\x59\x33\x36\x63\xa9\x96\x81\x2b\x85\xb5\xa4\x90\x79\xb8\x45\x0c\xd3\x40\xbe\x6a\x57\xe8\x06\x5c\xc3\x6c\xc5\x4b\xa3\x25\x58\x63\xba\x30\x9c\x58\x3f\x5a\xff\xfb\xce\xaa\x9f\x56\xec\xbd\x22\xff\x0f\x05\x38\x67\xd9\xa4\xac\x9c\xe7\xb0\x2c\xb9\x72\x7e\x98\xd6\xf5\x5e\x82\xf2\x94\x0d\x62\x02\x2e\x61\x72\xc5\xf7\x8a\x9c\x42\x6e\x3f\x19\x3b\x48\x00\x26\xff\xd3\x32\xc2\x34\x15\x4e\x09\xb3\x37\xbe\x57\xf0\x5c\x40\xd1\x92\x58\x91\xd0\x16\xce\xdd\x7b\x9c\x41\x85\xaa\x91\xce\x6e\xe5\xd0\x1e\xdf\xb6\x68\x7b\x9d\x27\x98\x75\xe5\x42\x07\x3f\xb8\x1b\x3f\x68\xd9\x6e\x1c\x12\xde\x21\xe1\xdd\x67\x47\xdf\x2a\xe3\xd9\x7b\xb5\x1e\xef\xb6\x89\xc7\xe6\xbc\x46\xe2\x43\xd2\xdb\xd6\x17\xea\x2d\xe2\x48\x5b\x2f\x59\x74\x32\xfd\xfb\xad\x9c\xb6\x25\x2e\x0e\x17\xef\x51\x2b\x35\xd9\xdb\xfa\x12\x52\x79\xe7\xdb\x6f\x6c\x83\xaa\xa5\x82\x3e\xe2\x28\xc5\xb6\xb3\xd1\x8f\xf5\x15\x01\xe0\xf7\xc3\x01\x68\x1a\xe2\x80\x5d\x5e\x4b\x5c\x0c\x0e\x6c\x8a\x0b\xda\x87\xd4\x16\x07\x60\x23\x20\xb4\x1a\xe3\x02\x05\xbf\xe5\x0d\xc0\xb9\xa0\xb5\x9a\xe3\x3d\xb4\x66\x83\x5c\x90\xd6\x2d\x72\xcd\x4a\x37\xc9\xc5\x4d\xb7\x5b\x0b\xc4\xd5\x54\x83\x81\xbc\x9a\xf7\x6d\xa0\x2f\xb3\xa9\xa0\xc6\xce\x8f\x9a\x29\xbd\x1d\x5c\x4d\x39\xac\x8b\xab\xc9\xed\x77\x6f\x43\xa2\x5b\xe3\x3b\xa3\x1b\xd0\xdb\xb5\xe8\xad\x8a\xad\x75\xe7\x33\x0a\xb7\xd6\x7c\xe3\x75\x13\x58\xd7\x56\x8d\x5f\x93\xd1\xc6\x59\xd1\x2d\xea\x1a\x94\xad\xc6\xb2\xdf\xd2\x0d\x46\xaa\xd8\xdb\x85\x47\x4b\x93\xf8\x4b\xa8\xdf\x14\xad\x2c\xcd\xa3\x00\x0a\x56\x99\xa0\x4b\xfc\x60\xb1\x60\x2b\x25\x64\xe5\x20\x28\x6a\xe4\x7e\xab\xff\x4b\x15\xfa\x5a\xcd\x72\x69\x55\x1d\xd6\xb2\x6c\x1f\xa7\x4e\xfb\x39\x04\xda\x90\x82\xb1\x9e\x3b\x36\x62\x9d\xfa\x99\x45\x63\xd5\xae\xac\x3b\xdd\xd5\x34\x8b\xd4\x2b\x64\x59\x77\xdd\xe7\x63\x9b\xd5\x06\x06\xcf\x49\xaf\xf7\xf5\xb6\xb4\xad\xc9\x87\x50\x6a\x11\xd5\x0f\x25\xb5\xa0\x59\x37\xd6\x8b\x6c\x1f\x23\x7e\xa3\x3c\x04\x48\x67\xb3\x5c\x4f\x3a\xc4\x47\x58\x4c\xbf\xf9\x6e\x2c\xb7\xd7\x4e\x3a\x30\xdf\x7b\xfd\x7a\x29\xc6\xb0\x4d\x9a\x59\x45\x6f\xb3\x4d\x7f\x0f\x3f\x04\x63\xa8\x8f\xaf\xe9\xef\x8f\x57\x1f\x0d\xd8\x64\x76\x1c\x08\x68\xd1\x64\xf7\x76\x99\xc1\xd3\x02\x26\xa7\x5d\xd8\x66\xb6\x3a\xdb\x9d\x02\x70\xdf\x9f\x8e\x9f\x91\x78\x5a\xcf\x27\x48\xb1\x06\x6d\x42\x47\xe6\x21\xf7\xcc\x42\x08\xd2\x07\xba\x0d\x1d\x97\x90\xb6\x90\xde\xed\x03\xdf\x8d\xf8\x5f\x69\x17\x7d\xc8\x14\x5f\x7d\x1f\x3d\x32\xcc\x5b\x0e\x64\x84\x20\xe9\x3e\x94\xa1\x67\x1d\x62\x7c\xb4\xf4\xfb\x13\xe3\xde\xb9\x90\x00\x5c\x7b\x17\x67\x91\xfa\xac\x8b\xc3\xee\x51\x12\xb1\xd6\x90\xc3\x24\x8e\x59\x74\x13\x42\xc3\x6f\xf4\x21\xb4\x12\x7e\x97\xb5\xd1\x5c\x76\x5a\x1d\x4b\xba\xbd\x8a\x20\x2b\xc7\xca\x5e\x73\xca\xb8\xa7\x3b\x9c\x16\xc0\xb2\x07\x6b\x8d\x35\x9d\x58\x6b\xd8\xe8\xc7\x36\xa3\xe7\x8e\x5b\x74\x77\x66\xb5\x5d\x7c\x08\xb6\xd6\x24\x6f\xd1\xa4\xe9\xdb\x5a\xc3\x56\xf7\xd6\xba\xa3\x7a\xb8\x86\x82\xad\x42\x9b\x4d\xbc\x16\xa9\x1d\xbf\x68\xc3\x66\xc7\xda\x79\x86\xa0\xc1\x9e\x9e\x85\x54\xd3\xd9\x03\xd6\xd5\x91\xb2\xc6\xed\x9b\x07\x9f\x79\xe9\xc6\x3e\x10\x93\xf6\xe9\x17\x69\xea\xde\xf0\xf3\xce\xc1\x84\xf5\xee\xb2\xbd\x7d\x22\x46\xc3\x70\xf0\x2f\x83\xea\x2b\xfb\x57\xe0\x2c\x4d\x37\xee\x87\x7c\x7f\xc8\xf7\x87\x78\xfc\xc2\xf1\x78\x47\x09\xdf\x39\xfc\x23\x8d\xdd\x1b\x80\xfe\x31\xa0\xb0\xea\x5d\xe6\x77\x0e\x04\x69\x28\x0e\x3e\x66\x50\x7d\x71\x1f\x6b\x8e\x12\x75\x83\x1b\xf0\x21\x7d\xa8\xa8\xfe\x3d\xc4\x7b\xd2\x60\xce\x6e\xce\x18\x19\x37\xbd\x83\x46\x5a\x9f\x23\x5f\x8c\x6e\x6f\x0c\x41\x11\xf1\xbf\x9f\xea\x0b\xcc\x9e\x3e\xfd\xee\xf2\x49\x72\x7c\x7c\x0c\x3e\xbc\x38\xfd\xf9\xed\xeb\xff\x3f\x7a\xfa\xe4\x1c\xfc\x4e\xb8\x41\x09\x15\xe5\xbe\x04\x66\x19\x4f\xe9\x69\x85\xf9\x79\xa1\x68\xf3\x77\x00\x00\x00\xff\xff\xed\xf6\xee\xa7\xd3\x43\x00\x00")

func swaggerSpecService_manager_apiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecService_manager_apiJson,
		"swagger-spec/service_manager_api.json",
	)
}

func swaggerSpecService_manager_apiJson() (*asset, error) {
	bytes, err := swaggerSpecService_manager_apiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/service_manager_api.json", size: 17363, mode: os.FileMode(420), modTime: time.Unix(1461833536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
	"swagger-spec/service_manager_api.json": swaggerSpecService_manager_apiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
		"service_manager_api.json": &bintree{swaggerSpecService_manager_apiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

