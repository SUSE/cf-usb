// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x4f\x8f\xdb\xba\x11\xbf\xe7\x53\x10\x6e\x4f\x46\x62\x6d\x1e\xd2\x02\x7d\xa7\xba\x71\x5a\x18\x29\x92\x00\xdb\x9c\xd2\xc5\x2e\x2d\xd1\xb6\x52\x59\x52\x28\x6a\x37\xdb\xc5\x7e\xf7\xc7\x7f\xf2\x5a\x12\x65\x93\x12\x65\xcb\x31\x7d\x48\x16\xf2\x70\x34\x33\x9c\xf9\x71\x66\x44\xca\x4f\xaf\x00\xfd\x8c\xb2\x07\xb8\x5a\x21\x3c\xfa\x1d\x8c\x7e\x9b\x5c\x8d\x5e\x8b\xab\x61\xbc\x4c\xe8\x25\x41\xc3\xaf\x04\x28\xf3\x71\x98\x92\x30\x89\x19\xed\xd7\x38\xbc\x47\x38\x83\x11\xc8\x10\xbe\x0f\x7d\x04\x16\x38\xf9\x1f\xc2\x60\x03\x63\xb8\x42\x1b\x14\x13\x30\xfd\x32\x97\xfc\x38\x07\x46\x2f\x47\x5f\x4d\xae\x26\x6f\x77\xbf\x23\x21\x89\x10\xe7\x7b\xfd\x8f\x5d\x16\x30\x0d\x4b\x64\x08\x6f\xb2\xcf\xcb\x6b\x71\x4b\x46\xbf\x26\x24\xcd\x7e\xf7\xbc\x55\x48\xd6\xf9\x62\xe2\x27\x1b\x6f\x9d\xfa\x51\x92\x07\x9e\xbf\x7c\x93\x67\x8b\xdd\xe1\x7e\x12\x13\xe8\x93\x92\x62\xfc\x0b\xb4\x81\x61\xc4\xd9\xd1\x41\x01\xba\xff\xfb\x3a\x45\x8c\xd7\x68\x4b\xf6\xbc\xc3\x26\xa2\xf7\x8e\x33\x54\x67\x13\xc3\x0d\x17\x6a\x9a\x42\x7f\x8d\xc0\x8b\x3d\xb7\x14\x39\x8e\x0a\xa9\xa9\xd0\x0f\x0f\x0f\x13\xc8\x69\x27\x09\x5e\x79\x92\x6f\xe6\xfd\x7b\xfe\xfe\xc3\xa7\xeb\x0f\x6f\x28\x83\xc9\x9a\x6c\xa2\x1d\x31\x5e\xed\x08\x33\xca\x90\x9f\xe3\x90\x3c\xce\xd0\x32\x8c\x43\x36\x35\x59\x79\xd2\xa6\x39\x59\x27\x38\xfc\x3f\x94\xd3\x56\x91\x97\x3c\xa6\x5c\x5e\x6a\xe5\x8f\xe8\xb1\x2a\x6b\xc8\xa7\x6a\x8d\x60\x40\xdd\xe3\x75\x83\xa6\xa5\x1b\x54\x88\xaa\x2e\x33\x9d\x82\xff\x50\x1f\x89\x0f\xa9\x43\x89\xbf\x6d\x49\x2a\x22\x57\x35\xfa\x76\x53\x61\x76\x23\x99\xd1\xb9\xce\xf2\x0d\xca\x4a\xcc\xa8\xa6\x29\xb5\x32\x1f\xec\x7d\xcf\x12\x29\x4a\x31\x26\xc5\x49\x90\xfb\x86\x63\x20\x59\x57\xac\xee\xe5\x69\x00\x09\xba\xa5\x63\x60\x94\xac\xea\x76\x4f\x93\xac\xee\x84\x4a\x93\x71\x46\x19\x20\xeb\x6d\x7c\x49\xa6\xff\xad\x5a\x9b\x0f\x4f\x52\x84\xb9\xa0\xf3\x80\x0d\x17\x72\xbc\x97\x62\x28\xe8\x31\xca\xd2\x84\xb9\x9c\x52\x1a\x4e\xf2\xdb\xd5\x55\xe3\x97\x2a\x91\xaf\x73\x9f\x5a\x30\x5b\xe6\x11\x28\xb8\x8f\x94\x83\x9f\xeb\xf2\x70\x7e\x7f\x31\xbc\xe1\xd7\x18\xfd\x4c\x91\x4f\x50\x00\x10\xc6\x49\xd5\x55\x4b\x43\x33\x1a\x6a\x1b\xb8\x97\x3d\xa7\x2b\x02\x23\x23\x38\x8c\x57\x6a\xf9\xb9\x0e\x6a\xcd\x6a\x57\xcb\x57\x9e\x95\xa8\xe2\xd5\x30\x97\x5f\x5e\x21\x3d\x57\xf9\x17\x22\x19\x60\x2c\xf0\x86\x7b\x00\x80\x8b\x24\x27\xdc\x73\x28\xa6\x4e\xb4\xfc\x85\xde\x6b\xce\x84\x38\x9d\xa7\x58\x98\xbb\x3f\x63\xb4\x64\xec\xff\xe4\x05\x2f\xb0\x28\x8c\x6b\x3a\x8f\xce\x43\xcb\x1e\x1a\x60\xbe\xe8\xf7\xe2\xa4\xf0\x9e\x2e\xc1\x70\x11\x21\x70\x27\x6f\x73\xa7\xeb\xb3\x33\x29\xd6\x59\xbb\xed\x76\x2d\xc6\x18\x56\x97\xe2\x1a\x71\x48\xd0\xa6\x59\xa5\x12\xa9\x3a\x1c\x84\x89\x9b\xdd\x86\x7d\xd4\xae\xd3\xfc\xcd\x05\x87\xcb\xeb\x96\xeb\xfb\x7b\x8c\xe8\x02\x0d\x20\x88\xd1\x03\x10\x73\xa2\xe5\xf4\x3e\x1f\x27\xfc\x5e\x45\x9e\x42\x4c\x13\x34\x22\x62\xf5\x9b\x52\xa7\x3d\xf3\x51\x24\x77\x41\x13\xff\x2d\xa5\x48\x11\x17\x49\xb0\xcf\x63\xab\x4a\x0b\xb1\x01\x49\xc0\x02\x01\xa1\x49\xb0\x6f\x38\x46\x3f\xf2\x10\x23\xa6\x38\xc1\x39\xea\x6d\x89\x38\x14\x13\xba\xbe\x71\xd3\x16\x87\xde\x1a\x85\x89\x34\xa3\x86\x01\x4f\x62\x96\x06\x30\x78\x77\xf5\x37\x23\x2d\xa7\x32\x2c\xc0\x03\x2d\xf0\xf8\x42\x91\x51\xef\x04\x2c\x9e\x01\x8c\xa8\xee\xc1\x23\x40\x3f\xc3\x8c\x64\x2e\xcb\x34\x59\xc3\xbd\x27\xf1\xc7\x6d\x18\x3c\x77\x5a\xcf\x41\x23\x4a\x34\xae\xd4\x7d\x23\x16\xd5\xe9\x30\x68\xb1\xba\xcd\x1c\xb4\xe6\x33\x3b\x48\xa5\x33\xf5\x16\x91\xc5\xcc\xd7\x3f\x7f\x3c\x1f\x34\x79\x67\xa4\xd9\xa7\x84\x80\x7f\x26\x79\x1c\x38\xb0\x38\x90\xc1\xe4\x26\x0d\x0a\x7d\x0c\x10\x1d\x09\x07\x03\x92\x52\x0b\x06\xd4\xe3\x07\x92\xbf\x89\x09\x75\xf9\x9b\x39\xca\x4a\x33\x6a\x18\xd0\x21\xee\xc1\xdb\x9c\x3f\xe2\x06\x28\xa2\xb8\xd7\x0b\xe8\x0a\xd6\x0e\x74\x25\xe5\x91\x73\x2f\xb3\x78\x91\xba\x8a\x29\x33\x0c\x1a\x17\x9b\x75\x1d\x7a\x2e\x9d\xbc\x45\x48\x14\xfd\x50\xfd\xf4\x29\x4a\x60\x50\x94\xb8\x9c\x97\x4e\x0e\xc5\x06\xb9\x70\x96\x94\xfd\xe6\x50\xd9\x1a\x1e\x36\x00\xeb\x67\xcf\x20\xd9\x4b\x59\x31\xc2\x32\x8c\x10\xa0\xcc\xdf\x82\x05\xcc\xd0\x5f\xdf\x01\x14\xfb\x49\x60\x2b\x91\xea\xd7\x26\x4c\xf6\x5e\x8c\x22\x3d\x03\xfd\x44\x7e\x4e\xd8\xb3\x00\xbb\xd6\xe0\x72\x77\x80\x7b\xe5\x23\xe5\x12\xc5\x26\x8f\x48\x48\xe3\x8f\x78\x4c\xfb\x37\x01\x53\xff\xe4\xf9\x25\x43\x0b\xb7\x94\x34\xd2\x0d\x66\x29\x69\x10\xb8\x45\x33\x0e\x50\x4f\x5d\x86\x2b\x20\x39\x1a\xb4\xe6\xae\x1b\x47\xb8\x55\xa5\xf6\xf9\x85\x1b\x74\xb7\x92\x89\xab\x1a\x8b\xa1\x67\x00\x27\xb7\x61\x9c\x11\x18\xfb\x0a\x57\x33\x7b\x42\x0f\xa3\xa8\x8c\x24\xb9\x00\x8b\xcc\xec\x89\xfc\x7c\x2b\xce\x69\xf1\xa4\x0d\x52\x08\x0c\xfa\x91\x23\xbc\xb7\x35\xb6\x03\x28\x4b\x18\x65\x17\x8e\x28\xa7\xd8\xc3\xb0\x75\x7a\xb7\x99\x41\x53\xb3\x43\x10\xd3\x79\x33\x83\x84\x8e\xed\xc4\x98\xed\x67\x98\xef\x19\x66\x17\x34\x9a\x6f\xd4\xa4\x62\x45\x33\xfd\x3d\x0c\x7a\x8d\xf6\xe3\x76\xca\x35\x22\x67\x60\x5b\x1e\x0a\xd7\x38\xd6\xa6\x87\xf6\x16\xba\x5c\xf4\xd0\x4b\x50\x5e\x0a\x1f\x79\xa5\xf3\x3e\x84\xcc\x66\xc6\x72\x34\xec\xe9\xb3\x12\x2a\x82\xc5\x95\x44\xc3\x04\x03\x57\x14\xd5\x75\xb0\x93\xb1\x98\x6d\x5e\xa8\x25\x2c\x06\x67\x2b\x1c\x6c\x0c\x62\x8f\xc3\xad\x00\x7d\xeb\x5b\x1d\xa6\x41\xf1\x70\x46\xe3\x0e\x97\x97\xbd\x19\x6f\x9c\x17\xfb\xe6\x8f\x71\xde\xc3\x61\x76\xd3\xd0\x61\x62\xb6\xc1\xf6\x87\x19\x27\x6d\x55\x67\xee\xee\x84\x70\xa0\x3d\x9c\x5c\xcf\xed\x91\x38\xbf\x00\xee\x50\xe8\x79\x29\x13\xa8\x75\xb5\xf7\x85\x8e\x16\x67\x62\x0d\x8e\xcc\xb0\x5b\xba\xc0\x1f\x5a\xe0\x1b\x17\x79\x2e\xd8\xd5\x74\x27\x09\x76\xf9\xea\x87\xae\x8f\x9b\x58\x24\xf3\x33\x3c\x54\x72\x70\x27\x99\x6a\x9f\xfe\xbc\x2e\x84\x18\x54\x38\x1f\x7c\x72\x54\x99\x30\x3b\xcf\x98\xd4\x20\x11\xee\x80\xc4\xb0\x02\xba\xa7\x92\xe0\xb8\xcf\xa1\xa4\xc3\xba\xe7\x4f\x9a\x9a\x75\xc3\x1a\xef\x49\xfe\x65\xa1\x63\xcc\x80\x67\x8b\x37\x2f\x27\x0c\xc3\x00\x8c\xc7\xf2\xf2\x7c\x36\x1e\x1b\xe1\x50\x7f\x30\xf4\xa2\xb7\xf5\x6c\x62\x3e\x03\xc9\x52\x9c\xae\x6c\xd4\x62\x3b\xf6\x17\x49\x26\x8e\xda\x8e\x38\x88\x11\xae\x0d\xd1\x40\x37\xe4\xd6\xb1\x4d\x04\x11\xfd\x64\x07\x22\x35\xca\x9e\xf7\x77\x1f\x16\xb5\x55\xe7\x58\x3e\x5b\xb0\x6a\x89\xd3\x40\x90\xc3\x67\xf6\x71\xf8\xdc\x40\x77\x92\x64\x30\x8d\x60\xdc\xb5\xea\xbc\xe3\x4c\xee\x8c\x92\xbb\x2f\xfc\xbe\xae\xd0\xd4\xe8\x46\x5d\x04\x98\x1c\xb7\xd0\x64\x0e\xeb\xaa\x4c\x4d\xcd\x4c\x13\x3f\xe3\x5d\x8e\x7c\x36\x74\xb7\x36\xee\xe0\x47\x7f\xf0\xd1\x20\xd1\x96\xae\xf5\x23\x70\xa1\x2c\x58\x26\x98\xfe\x39\x1e\x07\x21\x8c\x1a\xb2\xda\x2d\x97\x63\x65\x35\xfb\x63\x62\x60\xfb\x17\x8f\x9a\xd2\xb4\xb2\xcc\xe5\xe2\xc1\x9e\x44\xc3\x7b\x62\xff\xd9\xea\x37\x31\x5e\x3b\xa5\xe2\x78\xcc\x2e\xb0\x70\xe2\xf1\xc5\x2f\xbd\x54\x8e\xc6\xd9\x49\xbf\xe8\xd2\x6f\xd9\x78\x08\xbf\x5c\xe3\x69\xcf\xe7\x08\x28\xe0\xaa\x9a\xba\x0e\x76\x92\x8f\x16\x5d\x27\xbe\x22\x97\x1b\x4e\x35\x20\x29\x5e\xcd\xde\xb5\x1d\xe5\x80\xa5\xa0\xec\xb7\x19\xd5\x4b\x02\x27\x3b\x51\xf6\x6c\x70\xd6\x09\x9b\x83\x6a\xa5\xa2\x0e\xaa\x1b\xae\x74\xdd\xa7\xa8\x9f\xf4\x19\x02\xb4\x10\xc4\x01\x74\x85\x72\xd0\x1b\x17\x55\x70\xe2\xc2\x5a\x4d\x77\x9a\xdd\x8b\x21\x8c\x3a\xf7\x95\x39\x13\xcd\xbe\xf2\x34\x8a\x66\xfc\x9e\xae\xa7\xec\x36\x2f\x09\xba\x23\x1f\xa2\xa7\xde\xe7\x7a\xca\x9a\x9a\x99\x96\x75\xe6\x27\xe7\xe9\x6c\xb0\x8c\x40\xff\xc8\x3c\x9b\xbe\xfe\xb0\x43\xcd\x7d\x4b\xd7\xaa\x1e\xf9\xc4\x7e\xea\xe0\x00\xe3\xa3\x1d\xa5\xda\xeb\xfd\x97\xdc\x3d\x6e\x65\x99\xcb\x8d\xfc\x3d\xe9\x84\xf7\xc4\xfe\xb3\xd5\x3d\x66\xbc\x4a\x85\x84\x64\xae\xbb\x4b\xb1\x7f\xc0\xe8\xb7\x52\xb0\x87\x1c\xae\x47\xdc\x47\xac\xbb\x0a\xa5\xae\x83\x9d\x64\xa2\x45\x8f\x98\xa7\x13\xe5\x1e\xb1\x09\x5c\xc8\x23\xee\x0e\x31\x24\x65\xcf\x27\xd9\xfb\x48\xb6\x84\x37\x04\x2e\xe1\x02\x0e\x84\x9b\x15\x75\x20\xdc\x70\xc5\x52\xf7\xb7\x53\xd2\x26\xcf\xac\x3b\x14\x96\x94\xae\xc3\xeb\x42\x57\x79\xb5\x4d\x49\x66\xe7\xa5\xcb\x2c\xcd\x32\x7a\xd7\x32\x1d\xd0\xfb\x9b\x96\x5d\x48\x9f\x69\x16\xe0\xde\xbd\x5c\x1d\x3a\x38\x44\xe1\x7f\x15\x3f\x5b\x1f\x34\xfd\xfa\xbe\xfa\x07\xbd\x0b\x21\x93\xc5\x77\xaa\x7e\x45\xed\xdd\xa0\xa9\x87\xfe\x88\xbd\x33\x9e\xd9\xaf\xf4\xcd\x4d\xb5\x52\xc4\x0c\x71\x48\xd8\x10\x04\x5b\x26\x8d\x11\x72\xc8\x8c\x3a\x40\x5b\x1c\xa8\xb1\xaa\xbe\xd6\xb3\x2c\x81\x80\x9d\x2c\x14\x06\x1d\x8c\xa3\x90\x48\x21\xb7\x55\xfe\x8b\x30\x0e\xf8\xcf\x65\x1c\xe4\xba\x48\x92\x08\xa9\xb6\x99\xa8\xd8\xca\xa5\xc4\xa6\x21\x4a\x18\x60\x91\x31\x81\xab\x3d\x90\xaf\xf3\x48\x4d\xe3\x51\x5a\xcb\x75\x4a\x25\x2f\x5d\xdf\x21\xff\x75\x90\x83\x32\xcb\x38\x69\x15\x84\x7c\x5b\x85\xdd\x08\x6c\xcc\x2a\x2c\x84\x9d\x7d\x7f\xb3\x1e\xc8\x52\xfd\xf3\x08\x8a\x25\x46\x9d\x20\x41\xc3\xc3\x78\x0e\xd8\x37\xc6\x5f\x14\x96\x97\x5e\x5f\xdc\x01\x1e\x54\x85\x85\x0a\x0e\xf4\x85\xd5\x71\x87\xca\x5b\x17\x7b\xf1\x8c\x33\x5b\xf4\x2d\xb3\xb5\x0f\x92\x3d\x7a\x9c\x7a\x3f\x55\x8d\xe5\x70\xd6\xe5\xa6\xb4\x55\xfb\x56\xfa\x51\x62\x37\x38\x86\xe7\xff\x3d\x64\x8f\x22\xa2\xe4\xd0\xfe\x30\x7d\xb8\x1e\xab\xb9\x22\xdf\x36\x75\xb5\x9a\x62\x58\x81\xe1\xc6\x2c\x5e\x89\x7f\x9f\xff\x08\x00\x00\xff\xff\xce\x5c\x44\x5e\x58\x90\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 36952, mode: os.FileMode(436), modTime: time.Unix(1449159989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

