// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// swagger-spec/service_manager_api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5d\x73\xd3\x46\x17\xbe\x76\x7e\xc5\x8e\xde\xf7\x2a\x13\x2c\x43\xa1\x33\xe5\xaa\x26\xa1\x1d\x0f\x0c\x30\x4d\xb9\x4a\x33\xc9\x5a\x5a\xdb\x4b\x25\xad\xd8\x5d\x25\xa4\x19\xff\xf7\xee\x97\x3e\x2d\x4b\x2b\x39\x04\x89\x72\x83\x89\x74\xbe\xf6\x9c\x67\x9f\x73\x56\xd2\xfd\xd1\xc4\x61\xb7\x70\xbd\x46\xd4\x79\x09\x9c\x67\xd3\x99\x73\x22\x2e\xe1\x68\x45\xc4\xdf\xe2\xee\xc4\xf1\x11\xf3\x28\x8e\x39\x26\x91\x14\xf9\x18\xe1\x1b\x44\x19\x0c\x00\x43\xf4\x06\x7b\x08\x2c\x29\xf9\x1b\x51\x10\xc2\x08\xae\x51\x88\x22\x0e\xe6\x1f\x16\xd2\xcc\xc4\x91\x92\x46\x6f\x36\x9d\x4d\x9f\xea\xab\x1c\xf3\x00\x29\x5b\xe7\xaf\x8a\x6a\x30\xc6\x46\x00\xd1\x90\xbd\x5f\x9d\x6b\x07\x52\x72\xc3\x79\xcc\x5e\xba\xee\x1a\xf3\x4d\xb2\x9c\x7a\x24\x74\x37\xb1\x17\x90\xc4\x77\xbd\xd5\x93\x84\x2d\xb5\xa2\x47\x22\x0e\x3d\x6e\x42\x9f\x38\x28\x84\x38\x50\xfa\x42\xca\x47\x37\xbf\x6e\x62\x24\x95\x1d\x71\x77\xab\x34\x02\xe1\x20\x62\x28\xd3\x88\x60\xa8\x1c\xce\x63\xe8\x6d\x10\x30\x09\x11\x37\x12\x1a\xa4\x81\x88\x38\x6e\x6f\x6f\xa7\x50\x89\x4c\x09\x5d\xbb\xc6\x0a\x73\xdf\x2e\x4e\x5f\xbf\x3b\x7f\xfd\x44\xe8\x4d\x37\x3c\x0c\x94\xa3\x23\xe5\xcb\x61\xc8\x4b\x28\xe6\x77\x67\x68\x85\x23\x2c\xf3\xc9\xd2\x1c\xcf\x13\xbe\x21\x14\xff\x03\x4d\x96\x75\x2c\xfc\x2e\x56\xb1\x88\xbc\xbc\x41\x77\x26\x0e\xac\xb2\xb9\x41\xd0\x17\x25\x3b\x29\xc7\x5c\xb2\xa2\xef\x55\xab\x37\x9f\x83\x3f\x45\xb9\xa2\xba\xc0\x84\xc0\x45\x6d\x38\x17\x97\x42\xf2\x52\x8a\x8a\x04\xb3\x24\x44\x32\xf0\x0b\x29\x09\xe3\x58\xac\x5d\xc9\xb9\x9f\x18\x91\x66\x95\x5c\x4c\x89\x9f\x78\x16\x72\x90\x6f\xb2\x2c\xb8\x49\xec\x43\x8e\xae\x84\x1c\x0c\xc8\x3a\xcb\x43\x4c\x58\x56\xd2\xdd\x15\x29\x1d\x06\xf8\x26\x43\xa2\xd1\xff\xcb\xe4\x60\xe2\x90\x18\x51\xe5\x7b\xe1\x4b\x15\xed\xe6\xd4\x78\x31\x32\x14\xb1\x98\xc8\x1a\x66\x9e\x26\xce\xb3\xd9\x2c\xff\x6b\xc7\xf3\x79\xe2\x89\x15\xb2\x55\x12\x80\x54\xd9\xd1\xa2\xdb\x13\x63\xe0\x45\xa3\x81\x8f\x11\xfa\x12\x23\x8f\x23\x1f\x20\x4a\x89\x29\xa7\x14\x64\x02\x58\x21\x2c\xa8\xe6\x60\x60\x9c\xe2\x68\x6d\x1c\xc9\x12\xe6\x3f\xea\xdf\x6d\x06\x6d\xb7\xb0\x8b\x27\xce\x1a\xed\xcf\xe1\xef\x88\x33\x20\xa5\x69\xa8\xd2\x04\xe0\x92\x24\x5c\xa5\x54\x6c\xd1\xe9\xde\x44\x0a\x9b\x0b\xe9\xe3\x41\x53\xd8\x94\x84\xff\x53\xb4\x92\x7a\xff\x73\xfd\x7c\x13\xe9\x75\x56\x12\x32\x94\x0a\x30\x0e\x23\x2f\xcf\x48\x7b\x19\xe0\x8d\xa0\x2c\xb8\x0c\x10\xc8\x95\x1b\xb2\x5f\x11\x89\x21\x15\x64\x20\xf8\x53\xed\xbc\xcb\xde\x85\x79\xff\xc6\x2a\x15\x90\x52\x78\x97\x49\x0a\x72\xe2\x28\x64\x45\xc9\xfd\x25\xd3\x81\xa7\x59\x4c\xd3\x38\x88\xfa\x9d\xb4\xb3\xce\x29\x45\x82\x42\x00\x8c\xb2\x2a\xed\x29\x92\xa7\x04\x17\x15\xa1\x72\x99\xd2\x92\xa4\x3c\x5e\x31\xb9\xe3\x3c\xb5\x06\x38\x01\x4b\x04\xb4\x0b\x3f\x93\xd6\x1d\x62\x49\xfc\xac\x32\x02\x00\x9f\x13\x4c\x91\x8c\x88\xd3\x04\xa5\x97\x77\x92\x64\x57\x2d\x93\xab\x66\x74\x3d\x6d\x28\x5b\xb6\x80\x4a\xe8\x9d\xf6\x7c\x19\x40\x55\xdc\x3c\x9f\xfd\xd2\x10\xc0\x29\x89\x56\xa2\x1f\xf1\xa1\xf1\xb5\xd9\xcd\xee\x7d\xfa\xdf\x2b\xec\x6f\xbb\x50\x78\x9a\x57\xb1\x3e\xbc\x4e\x34\x10\x59\x33\x7f\xf7\x41\xa6\x08\xab\x02\x37\xd9\xc8\x5b\xf1\xba\x38\x6b\x43\x64\x5d\xd6\x5a\x80\x76\x00\x8d\xf5\x85\xd6\xf3\x06\x97\xef\x08\x07\xbf\x91\x24\xf2\x87\x80\x2d\xc3\x64\x49\xdb\xf8\x54\x24\xb2\x96\xb1\x69\x0c\x80\x39\x01\x7b\xe3\xd0\x3b\xa3\x89\x2b\x2b\xb1\xcc\x7d\x1f\xec\xd3\xfe\x06\xb4\xda\x32\x4d\xe9\x61\xea\xc0\x69\xea\xab\xc0\x7f\x3c\x84\x9c\x1e\x9c\x02\x81\xea\xbd\xfb\xe6\x4c\xdd\xb6\x18\x00\xb4\x9d\x31\xec\x9a\x66\xe0\x35\x15\x3d\xf3\xac\x17\x5b\x53\xfb\xd1\x30\x66\x6b\x37\x76\x63\x69\xc0\xa6\x25\x7f\x10\x82\xfa\x5c\xda\x4a\xad\xd2\xe6\xf8\x21\xd2\xd2\x89\xbf\x07\x50\x98\x67\x5e\x1d\xce\x73\xb2\xfe\xe8\x0b\x66\x5c\xb8\x00\xd7\x46\xff\xba\x69\x24\x33\x8f\xbd\x5e\xdd\xa5\xd5\x5a\xf8\x87\x62\xe2\x73\x82\x68\xde\xe1\x2a\xeb\x6e\x01\x42\x03\x84\x86\xd1\xb0\x4c\x4e\x87\xf9\x04\x20\x05\x8c\x7b\x6f\xfe\xd7\x6d\xa2\x97\xe8\xc9\x40\x03\x6e\x31\xdf\x68\x42\xf1\xc1\xf1\xb1\xb9\xbc\x38\x3b\x3e\x6e\x05\x93\x1d\x80\xf2\x10\xbb\x70\xca\x19\x20\x2b\x15\x15\x2b\xf9\x7a\x2c\x66\x79\x14\x10\x8d\x88\xac\x6c\x67\xfe\x43\xc1\xa5\x8f\x03\x63\xc1\xd7\xee\x91\xa0\x6a\xad\xfd\x28\x60\xce\x4a\x96\x61\xd8\x9e\x02\xca\xc8\x1b\xc8\x21\xe0\xeb\x6c\x87\xf1\x9c\x01\x72\x02\x8f\x03\x18\x75\x68\xf7\xd7\x4a\xfe\xba\x95\x90\x3f\x28\xb3\x8f\xdc\xd6\x57\x30\x60\x43\xec\xeb\x07\x3f\x4e\x96\x49\x1f\xe4\xa3\xe4\x0a\x8e\xdc\x7b\xf9\xd3\x63\x04\x90\x6a\x05\x8a\x3e\x3e\x96\x17\xac\x3a\xbf\x04\x9a\x1d\xce\x4c\x68\xbd\xa8\x39\xce\xbd\x8c\xab\xef\x17\x91\xf3\x9f\x69\xfa\x72\xd1\x95\x7e\x9f\xe2\x09\xac\x08\x2d\x36\xdb\x5e\xd3\xc0\xc0\x31\xb7\x3b\x0b\x94\x4c\x59\x0f\x02\x36\x01\xd8\x4e\x01\x05\x1c\x0e\x64\x04\xf8\x4e\x76\x46\xce\xc0\x3e\x16\xed\xaf\x43\x27\x57\xf2\x0d\x9d\x7c\x1e\x04\x67\xca\xe4\x8f\x2e\x5e\x8a\xbc\x77\x17\x97\x09\x1f\x64\x17\x37\xec\x6a\xf3\x42\x18\xc8\x45\x48\x12\x6d\x7c\x1f\x2c\x71\x63\x07\x1b\x3f\x97\xb4\x61\xa6\x77\xe8\x16\x94\x54\x0e\xa4\xa5\x42\x49\x0e\x7e\xeb\xfb\x30\xb4\x54\x04\xc9\x10\xb0\x51\xe1\x17\xf7\x5e\xfe\xf4\x98\xf0\xa4\x5a\x69\xc2\x33\x76\x9a\x46\xbc\x6e\x30\xea\xdb\x67\x6d\xf0\x34\xc8\xd9\xae\x09\x2a\x23\xea\x60\xdd\x66\x3b\xc5\x3f\xe5\xd9\xae\x0d\x49\x7a\x76\x1b\x38\x98\x76\x87\xb6\x8e\xd4\xa8\x93\xe4\x7f\x53\x7a\xfc\x81\xf9\x07\x7f\x07\xdb\x97\x3e\xb5\xed\x81\x83\xbe\xff\x2b\xd9\x3a\x34\x8d\x17\x0e\x47\x93\xec\x63\x65\x7f\xf7\xeb\xe9\xd2\x77\xae\xa9\x4d\xb2\xfc\x24\xc2\xd0\xee\x8b\x39\xbf\xd0\x19\xd5\x9f\x0a\x5f\xc1\x18\x5f\xa5\x1f\xa9\x9b\x5c\x27\x6c\x99\x5d\x92\x57\x2e\x0d\xff\x52\x09\x20\x8e\x0b\x35\xa8\x33\x92\xd7\xa7\x9e\xc5\x76\x7d\xb4\x68\x94\x87\x0c\x96\x7d\x12\xdf\x69\xb5\xbb\x87\x0f\x8d\xeb\x96\xf5\x61\xdf\x72\x3d\x45\xfb\x7b\x35\x52\x00\x85\x38\x7a\x8b\xa2\xb5\xd8\x38\x2f\xc1\x4f\x3f\x67\x57\xe1\x97\xc2\xd5\x92\xf5\x25\x8e\x7c\xf9\x45\x6c\x8d\xe9\x25\x21\x01\x4a\xcf\xa9\xdb\xe2\xd2\xba\x85\x51\x17\xc5\x8b\x59\xc9\x6a\x19\xe8\x36\x59\xe1\x70\xcd\x6a\x44\x4b\xe7\xa3\x9d\xd3\x51\xfd\xa6\xd8\x96\x0c\x0b\x96\x82\xa2\x99\xc1\x1a\xe3\x06\x08\x75\xd8\x51\x07\xfa\x8e\xc0\x29\xb3\x9e\x15\x68\xbe\x4e\xf6\xad\xa1\x98\x46\xfc\xf0\x30\xec\x0e\x80\x15\x45\xed\xa0\x2d\x17\x49\xb5\x8a\x03\x76\xf7\x38\x76\x74\xe9\xfb\xd4\x36\x14\xa7\xed\xb9\x00\x5f\x3b\xb2\xcc\xbe\xcc\xea\x98\xcf\x07\xa5\xc6\xe6\xed\x50\xe1\x0b\x2a\x0e\x75\x1f\xff\x78\x6b\x29\xdf\x27\x8b\xa5\x87\x60\x0f\x4a\x4a\x95\xd6\x64\x57\x22\xb5\x5b\xcb\x93\x41\x8d\x9a\xec\xfd\x47\xdb\x7f\x03\x00\x00\xff\xff\xee\xd6\xb1\x0e\xac\x36\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 13996, mode: os.FileMode(420), modTime: time.Unix(1461682381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSpecService_manager_apiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdf\x6f\xdb\x36\x10\x7e\x96\xff\x0a\x42\x1b\xb0\x0d\x08\xe2\xb4\x18\xf6\xb0\xb7\x22\x29\x86\x0c\x58\x17\x34\x05\xf6\xd0\x04\x01\x2d\x9d\x6c\xd6\x32\xa9\x91\x94\xbd\x20\xf0\xff\xbe\x23\x45\xea\xa7\x2d\xc9\xcb\x80\xda\x4d\x1e\xea\x5a\xd4\xf1\x78\xf7\x7d\xdf\x9d\xce\xca\xd3\x24\x08\xd5\x86\xce\xe7\x20\xc3\x5f\x49\xf8\xf6\xfc\x22\x3c\xc3\x25\xc6\x13\x81\xd7\x78\x37\x08\xd7\x20\x15\x13\xdc\xdc\x5e\xbf\x31\x77\x83\x50\x33\x9d\x82\x59\xb8\xa4\x9a\xa6\x62\x4e\x6e\x41\xae\x59\x04\xe4\x0f\xca\x29\xba\x22\xef\x6e\xae\x0b\xcb\x18\x54\x24\x59\xa6\x9d\x83\x4f\x0b\x20\x09\x93\x4a\x13\xe7\x95\x88\x84\x68\x5c\xec\x71\x74\x4e\xee\xf8\xa7\x05\x53\xe6\x3b\xd9\xb0\x34\x25\x33\x20\x74\x4d\x59\x4a\x67\x29\x10\xf4\xd1\xe7\x20\x12\x5c\x53\xc6\xf1\xdb\x66\xc1\xa2\xc5\x1d\x97\x39\x57\x04\x4d\xf9\x9c\x28\x16\x03\x79\x14\xb9\x24\xca\xed\xa2\x3c\xb6\xdf\x41\x11\x25\x56\xe0\xa3\xf3\xb7\x57\xd6\xe9\x0a\xb8\xc6\x98\x22\x9a\xd1\x19\x4b\x99\x66\xa0\xce\xef\x78\x38\x09\xb6\x06\x3a\x3c\x50\xe5\x2b\x50\x98\xee\x67\x83\x00\xcd\xb2\x94\x45\xd4\x20\x30\xfd\xa2\x84\xb1\xbb\x37\x76\x99\x14\x71\x1e\x0d\xdb\xa9\x68\x01\x35\x77\x0b\xad\xb3\xd2\x05\xd5\x0b\xe5\x69\x9a\xd2\x18\x31\xd5\x4c\x81\x5b\xc1\xfb\x42\x69\x7f\x11\x84\x22\x03\x69\xdd\x5f\xc7\x86\x8a\xd2\xdc\x21\x67\xf9\xea\x32\xf6\xce\x9b\x95\x20\x88\x24\x01\xc9\x78\xb9\x21\xa3\x92\xae\x40\x23\x9f\x26\xc6\x7b\xb7\x2a\x41\x65\x88\x04\xa8\x32\x80\x20\x7c\x7b\x71\x51\x5d\xf5\x9c\x14\x39\x2e\xc5\x32\x2c\x6c\xb7\x67\x13\xbf\x25\xa1\x79\xaa\x7b\xbc\xcc\x01\xb9\x66\x11\x01\x29\x85\x24\x3e\x0a\x17\x6b\xe0\xe0\xa4\x35\x07\x41\xf8\xbd\x84\xc4\x6c\xfd\x6e\x8a\xee\x19\x67\xc6\x95\x9a\xbe\x37\x0e\xdc\xf9\xc1\x76\x52\xfb\xcf\x7e\x9a\x0f\x1b\x56\x38\xdd\x08\xb9\x54\x19\x8d\xaa\x5c\x5b\xc8\x6b\x3a\xf7\xfc\x99\xcb\xd2\xbe\xf0\xee\x11\x6b\xf1\x13\x49\xa0\x1a\xfe\x2a\x6d\x77\xd3\x73\x69\xad\x08\x87\x0d\xd9\xb4\x4d\x9b\xc4\x78\x12\x38\xae\x55\xfe\x1f\xca\x5d\x0f\x12\xfe\xce\x01\xc3\xf6\x58\x33\x7b\xc0\x4c\xc4\x8f\x61\x05\x7f\xa7\x9a\xbd\x2a\x7e\xbf\xfd\xf3\x83\xa9\x25\xb2\xa1\x58\x1d\x5a\x10\x0b\x81\xdf\xd8\x41\x7d\x0f\xe8\xae\x7a\x5d\xf1\x96\xc9\x17\x59\x7e\x74\x01\xb6\x34\x61\xe2\x66\x12\x0c\x68\x5a\xe6\x50\x50\xd4\x2f\xc3\x37\x3d\x02\x2a\x70\xe9\xa0\x79\x88\x74\xf6\x64\xf1\xd1\x8b\xb1\x25\xaa\x13\x11\xf7\xf4\xa9\xd2\x0a\x8b\xb7\xa5\xd6\xe7\xf0\x5c\xa9\xa3\x87\x21\x9d\xff\x06\xda\x76\xe2\x18\xb0\x9b\xa7\x8a\x24\x98\xbf\xed\xcc\x19\x44\x2c\x61\xc8\xfe\x28\xd1\xd7\x33\x68\x09\xdd\x34\xd3\x7d\x42\x2f\xa3\x23\xd7\x57\xe1\x1e\xdd\xf9\x65\xfd\x98\xd9\xa3\x94\xb6\x4d\x72\x8c\x1c\xfb\xba\xa2\x4f\x18\x9f\x44\x65\xae\xa4\x8d\xd6\xcb\x12\xa7\xf5\x88\xa7\xa7\x48\xf3\x33\x95\x57\x38\x19\x12\xdf\x95\xb5\xaa\xe1\x7f\x60\xab\x3d\x45\xd5\xd9\x8c\x5b\x20\x1e\xa5\x1a\x46\xb4\xaa\x29\xce\x64\x1c\x22\xeb\x6f\xdc\x23\xba\xda\x30\xe2\x19\x7d\x59\x19\x0f\x3e\xa4\xa3\x8e\xed\x71\x4a\xe7\x8c\x74\xe6\x85\x32\xf2\x07\x37\x3a\x1c\xdf\xc0\x50\x31\xf1\x15\x26\x86\x0e\xb5\xff\xbd\x2b\x57\x79\x9c\x50\x5b\x3e\xb0\x10\xa7\x4f\x35\x45\x8d\x9d\x27\x46\xd6\x25\xba\x18\x2c\xca\x13\x9f\x28\x7a\x0b\xf4\xa0\x50\xaa\x7d\x47\x32\xdd\xbc\xf4\x42\x1a\x35\xdf\x8c\xac\x84\xc2\xcb\x60\x31\x74\x26\x9c\x6f\xe2\x39\x75\x42\x65\x60\xe1\x6f\x73\x7a\x94\xea\x9c\xd8\x7f\xf6\x55\x57\x6d\x9b\x73\x1c\x0e\xfd\xba\xf0\x4d\xde\x03\x28\x66\x5f\x30\xe3\x22\xcc\x3a\xd8\x9f\x9d\xe8\xa4\xc0\xa7\x88\x42\x8c\x1f\xec\x0e\x87\xb0\xd2\x54\xe7\xca\x06\x59\x80\x6e\x0c\x33\xf3\xf6\xa8\x06\x7a\x67\x73\xc5\x46\x8b\x3e\x8f\x32\xf0\x7c\x55\x95\x58\x10\x7e\x10\xbc\x86\xe0\x95\xe3\xa0\x5c\x78\xff\x8f\x06\xae\x2a\xb6\xee\xf7\x28\xeb\xa6\x8c\x83\xd8\x83\x27\x35\x6a\x7d\x2a\x07\xc7\xc6\x1b\xb1\xe5\x7c\xc9\xc5\xa6\xde\x2f\xf3\xc8\x9c\x99\xe4\x69\xb5\x96\x60\xab\x45\x70\x5d\xb0\x8d\x28\x5c\x1f\xde\x11\x46\x9d\xa0\x6e\x6a\x4b\x78\x24\x6b\x9a\xe6\xe6\xd5\x68\x46\x36\x4c\x2f\x6a\x22\x2e\x1f\xad\x3f\xde\x36\xde\x9f\x4a\xfc\x5d\xc1\x7f\xd0\x84\x71\xec\x26\x99\x6c\x3d\x87\xdd\x2b\x57\xe3\x8f\xe9\xe2\x7d\xaf\x02\x1e\xe3\x22\x53\x64\x46\xa3\xa5\x99\x15\x8d\x85\x1b\x3f\xd1\x1d\x55\x84\xa9\x9f\xca\x18\x69\x1c\x5b\x51\xd2\xf4\xa6\xab\x0a\xd3\x0b\x34\xac\x54\xa3\x12\x76\x95\x73\xff\x8c\x33\xea\x45\xd5\x81\x62\x6f\xf4\xd0\x01\x6d\x37\x6c\x07\xc5\xb3\xb7\xeb\xba\x83\x5e\x75\xf0\xff\xe8\x60\xc7\xb8\xf1\xda\xf0\x5e\x1b\xde\xb7\x2c\xf4\x67\x75\xbc\xe6\xac\x36\xa0\xee\xa6\xf1\xa1\x3d\xaf\x8a\xf8\xb5\xe9\x3d\x57\x0b\xc5\x88\x78\x20\xd7\x2b\xac\x4e\xcc\x7f\x98\xe5\x78\x57\xe3\x32\x70\x99\xbf\x51\xfb\x34\xf1\xd7\xfa\x8a\x6a\x77\xe7\x97\x9f\x9b\x84\xfa\xa3\xf6\x6a\xa4\x95\x14\x8e\xb3\x93\xed\xbf\x01\x00\x00\xff\xff\x5c\xdd\x9a\x6b\x0a\x1f\x00\x00")

func swaggerSpecService_manager_apiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecService_manager_apiJson,
		"swagger-spec/service_manager_api.json",
	)
}

func swaggerSpecService_manager_apiJson() (*asset, error) {
	bytes, err := swaggerSpecService_manager_apiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/service_manager_api.json", size: 7946, mode: os.FileMode(420), modTime: time.Unix(1461151802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
	"swagger-spec/service_manager_api.json": swaggerSpecService_manager_apiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
		"service_manager_api.json": &bintree{swaggerSpecService_manager_apiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

