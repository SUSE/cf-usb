// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5f\x73\xdb\xb8\x11\x7f\x6e\x3e\x05\x46\xed\x93\x27\x31\x9d\x6b\xee\x66\x9a\xa7\xfa\xe2\x6b\x47\x73\x37\xb9\xcc\xb8\xf7\x94\x66\x6c\x88\x84\x24\x5c\x29\x92\x47\x80\xb1\x5d\x8f\xbf\xfb\x01\x20\x48\xf3\x0f\x20\x01\x14\x28\xd1\x11\xf4\x90\x78\xa8\xc5\x62\x77\xb1\xfb\xc3\x2e\xfe\x50\x8f\xaf\x00\xfb\xcc\xc8\x1d\x5c\xad\x50\x3e\x7b\x0f\x66\xdf\x9d\x5f\xcc\x5e\x97\x4f\x71\xb2\x4c\xd9\xa3\x92\x46\x3c\x89\x10\x09\x73\x9c\x51\x9c\x26\x9c\xf6\xb7\x04\x7f\x45\x39\x81\x31\x20\x28\xff\x8a\x43\x04\x16\x79\xfa\x3f\x94\x83\x0d\x4c\xe0\x0a\x6d\x50\x42\xc1\xe5\xa7\xb9\xe4\x27\x38\x70\x7a\xd9\xfa\xe2\xfc\xe2\xfc\x6d\xf3\x3b\x8a\x69\x8c\x04\xdf\xeb\x1f\x9b\x2c\x60\x86\x5b\x64\x28\xdf\x90\x5f\x97\xd7\x65\x97\x9c\x7e\x4d\x69\x46\xde\x07\xc1\x0a\xd3\x75\xb1\x38\x0f\xd3\x4d\xb0\xce\xc2\x38\x2d\xa2\x20\x5c\xbe\x29\xc8\xa2\xd9\x3c\x4c\x13\x0a\x43\xda\x52\x4c\x7c\x81\x36\x10\xc7\x82\x1d\x6b\x14\xa1\xaf\xff\x5c\x67\x88\xf3\x9a\xd5\x64\x4f\x0d\x36\x31\xeb\x3b\x21\xa8\xcf\x26\x81\x1b\x21\xd4\x65\x06\xc3\x35\x02\xcf\xf6\xac\x29\x8a\x3c\xae\xa4\x66\x42\xdf\xdd\xdd\x9d\x43\x41\x7b\x9e\xe6\xab\x40\xf2\x25\xc1\x2f\xf3\x0f\x3f\x7d\xbc\xfe\xe9\x0d\x63\x70\xbe\xa6\x9b\xb8\x21\xc6\xab\x86\x30\x33\x82\xc2\x22\xc7\xf4\xe1\x0a\x2d\x71\x82\xf9\xd0\x90\xf6\xa0\x5d\x16\x74\x9d\xe6\xf8\xff\x50\x0e\x5b\x47\x5e\xfa\x90\x09\x79\x99\x95\x7f\x46\x0f\x5d\x59\xb1\x18\xaa\x35\x82\x11\x73\x8f\xd7\x1a\x4d\x5b\x1d\x74\x88\xba\x2e\x73\x79\x09\xfe\xc3\x7c\x24\xd9\xa5\x0e\x23\xfe\x5c\x93\x74\x44\xee\x6a\xf4\xf9\x4b\x87\xd9\x17\xc9\x8c\x8d\x35\x29\x36\x88\xb4\x98\x31\x4d\x33\x66\x65\xd1\x38\xf8\x9d\xa4\x52\x94\xaa\x4d\x96\xa7\x51\x11\x5a\xb6\x81\x74\xdd\xb1\x7a\x50\x64\x11\xa4\xe8\x86\xb5\x81\x71\xba\xea\xdb\x3d\x4b\x49\xdf\x09\x95\x26\x13\x8c\x08\xa0\xeb\x3a\xbe\x24\xd3\xff\x76\xad\x2d\x9a\xa7\x19\xca\x85\xa0\xf3\x88\x37\x2f\xe5\xf8\x20\xc5\x50\xd0\xe7\x88\x64\x29\x77\x39\xa5\x34\x82\xe4\xbb\x8b\x0b\xed\x97\x2a\x91\xaf\x8b\x90\x59\x90\x2c\x8b\x18\x54\xdc\x67\xca\xc6\x4f\x7d\x79\x04\xbf\xef\x2d\x3b\xfc\x2d\x41\xf7\x19\x0a\x29\x8a\x00\xca\xf3\xb4\xeb\xaa\xad\xa6\x84\x85\xda\x06\x6e\x65\x2f\xe8\xaa\xc0\x20\x34\xc7\xc9\x4a\x2d\xbf\xd0\x41\xad\x59\xef\x69\xfb\xc9\x93\x12\x55\x82\x1e\xe6\x8a\xc7\x2b\x64\xe6\x2a\xff\x46\x94\x00\xce\x22\xdf\x08\x0f\x00\x70\x91\x16\x54\x78\x0e\xc3\xd4\x73\x23\x7f\x61\x7d\xcd\xb9\x10\xc7\xf3\x14\x07\x63\xf7\xb7\x1c\x2d\x39\xfb\xbf\x06\xd1\x33\x2c\x96\xc6\xb5\x1d\x47\xef\xa1\x6d\x0f\x8d\x72\x31\xe9\x8f\xe2\xa4\xf0\x2b\x9b\x82\xe1\x22\x46\xe0\x56\x76\x73\x6b\xea\xb3\x57\x52\xac\x17\xed\xb6\xf5\x5c\x9c\xe7\xb0\x3b\x15\xf7\x88\x31\x45\x1b\xbd\x4a\x2d\x52\x75\x38\x94\x26\xd6\xbb\x0d\xff\xa8\x5d\x47\xff\xcd\x09\x87\xcb\xeb\x81\xf3\xfb\x87\x1c\xb1\x09\x1a\x40\x90\xa0\x3b\x50\x8e\x89\x91\xd3\x87\xa2\x5d\xe9\xf7\x2a\xf2\x0c\xe6\x2c\x41\xa3\x65\xac\x7e\x56\xea\xb4\x65\x3c\xaa\xe4\x2e\xd2\xf1\xaf\x29\xcb\x14\x71\x91\x46\xdb\x3c\xb6\xab\x74\x29\x36\xa0\x29\x58\x20\x50\x6a\x12\x6d\x6b\x9e\xa3\x3f\x0a\x9c\x23\xae\x38\xcd\x0b\x34\xda\x14\xb1\x2b\x26\x4c\x7d\xe3\xcb\x50\x1c\x7a\x6b\x15\x26\xd2\x8c\x06\x06\x3c\x8a\x59\x34\x60\xf0\xee\xe2\x1f\x56\x5a\x5e\xca\xb0\x00\x77\xac\xc0\x13\x13\x05\x61\xde\x09\x78\x3c\x03\x18\x33\xdd\xa3\x07\x80\xee\x31\xa1\xc4\x67\x99\x36\x73\x78\xf0\x58\xfe\x71\x83\xa3\xa7\xbd\xe6\x73\xa0\x45\x09\xed\x4c\x3d\x36\x62\x31\x9d\x76\x83\x16\xaf\xdb\xec\x41\x6b\x7e\xe5\x06\xa9\x4c\x86\xde\x21\xb2\xd8\xf9\xfa\xaf\x3f\xbf\x1c\x34\x79\x67\xa5\xd9\xc7\x94\x82\x7f\xa5\x45\x12\x79\xb0\xd8\x91\xc1\x14\x36\x0b\x14\xe6\x18\x50\xae\x48\x78\x18\x90\x94\x46\x30\xa0\x6e\x3f\x91\xfc\xad\x1c\x50\x9f\xbf\xd9\xa3\xac\x34\xa3\x81\x01\x4f\x10\x71\x7d\x9a\xf8\x4c\x77\x58\xe4\x8f\x50\xcc\xf0\x77\x14\xf0\x2f\x59\x7b\xf0\x97\x94\x07\xce\x01\xed\xe2\x56\xea\x5a\x0e\x99\x75\xf0\xfa\xac\xac\xab\xc3\xc8\x25\x5c\xb0\xc0\x54\xb1\x2e\x6b\x9e\xc6\xc5\x29\x8c\x2a\x0c\x15\xbc\x4c\x72\x39\xde\xc8\x87\xb3\xa4\x1c\x37\x97\x23\x6b\xb8\xdb\x00\x7c\x5d\xfd\x0a\xd2\xad\x94\x1d\x23\x2c\x71\xcc\xe6\xca\x35\x7c\x0b\x16\x90\xa0\x1f\xde\x01\x94\x84\x69\xe4\x2a\xa1\x1b\xd7\x26\x5c\xf6\x51\x8c\x22\x3d\x03\xdd\xa3\xb0\xa0\x7c\x4f\xc2\xad\x35\x84\xdc\x7b\xc0\xbd\x72\x6b\xbb\x45\xb1\x29\x62\x8a\x59\xfc\xd1\x80\x6b\xff\x26\xe2\xea\x1f\x3d\xcf\xe5\x68\xe1\xa7\x12\x2d\xdd\x64\xa6\x12\xe6\x5e\x4b\xbc\xba\xd1\xc8\x3d\x60\x6d\x10\x94\x1c\x81\xe4\x68\xb1\x52\x78\xad\x6d\xe1\x27\x97\xde\xe7\x1b\x5e\x2f\xac\x9c\xf1\x65\x15\xb1\x1e\x55\x1a\xa8\x12\x61\x18\xbb\xc1\x14\xcc\x0f\x1d\xda\x40\x09\x6b\xe0\x81\x44\x52\x9e\x2e\x90\x34\xfc\xcf\xc3\x48\xd5\xf4\x05\xc0\xc8\x0d\x4e\x08\x85\x49\xa8\x70\x34\xbb\x73\x47\x32\x19\xa9\xd9\x01\x96\x1b\x03\x68\x73\xec\xa2\xce\x4b\xe6\xb5\x48\xc7\x45\x94\x21\x58\x51\xa2\xd0\x1f\x05\xca\xb7\x2e\xfa\x7b\x48\x69\xd0\x1d\xe3\x70\x56\xed\xf7\xfe\x94\x96\xa1\x66\xbb\x50\x66\xef\x53\x5a\x1d\x04\xb1\x3c\xa8\x35\xdf\xd2\xcc\x2d\x66\xe8\x3b\xd2\xa9\xd8\xd1\xcc\xfc\x70\x96\xd9\x0e\xe2\x61\xb7\x00\x0d\x22\x67\x62\x67\xb9\x2a\xd7\x38\xd4\x69\xae\xe1\x16\x72\xb4\x5f\xf7\x21\x4d\x96\x31\x0e\xa9\xcf\x84\x06\x65\x42\xcf\x95\x95\x7c\xb2\xf7\x31\x2e\xd2\x5e\xab\x29\x4a\x10\x23\xc3\xd2\xa2\x83\x21\xdc\x98\x05\x57\x15\x92\xbe\xf2\x9a\x2a\xe4\xf8\xea\xab\xab\x83\x9b\xbc\xc8\xee\xec\x57\x2f\x2d\xb2\xb8\x9a\xe6\x61\x63\x12\x47\xc4\x6e\x4a\xd0\x77\x7e\x52\xec\x32\xaa\xf6\x94\x0d\x7a\x38\xbd\x1c\xd1\xfa\xde\x51\x79\xed\xe8\x10\xd7\xe5\x5e\x36\x66\xfb\x6c\xb4\xa7\x83\x93\x99\xc1\xe2\x6c\xd8\x95\x20\x1d\x54\x33\x37\x8f\x89\xf9\xa9\x61\x3a\x19\xa5\x3f\x40\xf6\xf2\x02\x78\x8f\x72\x32\xc8\xb8\x40\x83\x6b\xca\x4f\xac\x75\xf9\xe2\x02\x8b\x05\x76\xde\xa5\x0f\xfc\xa9\x05\xbe\x75\x29\xe9\x83\x5d\x4d\x77\x94\x60\x97\xef\xe7\xd9\x77\xf7\x8c\x47\xb2\x38\x41\xcf\x24\x07\xb7\x92\xa9\xf1\x15\x7d\xf9\xc6\x9e\x1f\x1f\xaa\x58\x98\xab\xa2\xed\x88\x91\xbd\x73\x3f\xac\x33\x76\x4e\xe2\x58\x0d\x17\xb8\x01\x17\xd3\x0a\xed\x83\x96\x20\xd2\xc5\xfc\x4b\x3b\xf4\x4f\xad\xe2\x3f\x78\x94\x7f\x39\x58\x2b\xe6\x60\x50\x63\xc0\xf3\x9d\x1b\x1c\x81\xb3\x33\xf9\x78\x7e\x75\x76\x66\x85\x0d\xe3\xe1\xc1\xb3\xde\xce\x67\xf8\xf9\x15\x48\x97\xe5\x7d\x23\xad\x16\x75\xdb\x6f\x64\x82\x7f\xc9\x28\xe0\x93\x8d\xbe\x0e\x4e\x96\x06\xec\x16\x8d\x5d\x22\x48\xb9\x92\xec\x41\xa4\x47\x39\xf2\x85\x94\xdd\xa2\x0e\x5a\x33\x96\xbb\x0a\x4e\x2d\x71\x1c\x08\xf2\xf8\xcc\x3f\x93\xc4\x67\xbf\x40\xdc\xd3\xc1\x65\xca\x99\xc5\x30\xd9\xb7\xde\xbc\x15\x4c\x6e\xad\x52\xc8\x4f\xa2\xdf\x13\xa8\x2b\x97\x30\x26\xf6\x85\xe5\xfc\xd4\x0a\xcb\xc3\x1e\xdb\xe4\x0e\xeb\xcf\x6a\x1a\x6a\xb6\x07\xb0\x04\x8f\xfc\x3f\x57\x55\x2c\xe7\xd5\x48\x40\xcf\xce\xf8\x03\xeb\xe2\x95\x23\xcf\x78\xc0\x23\xf5\x1d\x31\xf1\xcc\xd4\xf2\xd7\x0d\x7d\xe9\xba\xe5\x33\x08\x0f\x26\x99\x17\x9d\x00\xb0\x38\xa8\x5b\xf9\xc0\x76\x4a\xd6\x0a\x34\xc4\x9d\x92\x46\x25\xb7\x77\x41\xeb\x81\xa5\xa2\x1c\xb7\x9c\xdd\x25\xe7\x3e\xb5\xac\x3b\x1b\x1c\x01\x90\x3c\x54\x7b\xa8\xd6\xd1\x1d\xe7\xf0\x02\x66\xc5\xcf\xbe\xc5\xa5\x60\x62\x58\x5c\x5e\xc6\xf1\x95\xe8\xd3\x17\x96\x7e\xc7\xb2\xa4\x3b\xf0\x7d\x40\xe6\x7d\xbe\xb0\x34\xd4\xcc\x36\xff\xb3\xbf\x04\xc8\xdf\x3f\xb0\x54\xea\xaa\xb9\xfd\xc7\x87\x6f\x3c\xec\x50\x73\xaf\xe9\x06\x25\x2e\x1f\xf9\xeb\xe8\x77\x30\x3e\xd8\x79\xed\xad\xde\x3f\xb1\x8b\x7c\x87\x3d\xa4\x3d\xc4\x32\xa7\x1b\xf9\x5b\xd2\x89\xe0\x51\xbc\x1e\xc2\xd1\x92\x12\xe7\xd5\x5a\x52\x92\xcc\x4d\xd7\x94\xc6\x07\x8c\x71\x6b\x3e\x77\xc8\xe1\x17\x93\xc6\x88\x75\x5f\xa1\xf4\x75\x70\x93\x4c\x0c\x58\x4c\x12\xe9\x44\x7b\x31\xc9\x06\x2e\xe4\x3d\x3a\x8f\x18\x92\x72\xe4\xeb\x72\x63\x24\x5b\xa5\x37\x44\x3e\xe1\x02\x1e\x84\xf5\x8a\x7a\x10\xd6\x3c\xd9\xf7\x92\x9a\x8b\xa4\x4d\x5e\x59\xf3\x28\x2c\x29\x27\x7d\x33\x4d\x05\x19\x3e\x74\xd5\x74\x07\x2b\xc9\xc4\x5f\xd5\x0f\x01\x47\xba\xdf\x33\x56\xff\x44\x6a\x25\x64\xba\xf8\x9d\xa9\xdf\x51\xbb\xe9\xb5\xfd\xd8\x9b\x95\xbf\xaa\x7b\x03\x33\x7c\x53\xfd\x3e\xf5\xeb\x57\x7f\x61\x9f\x59\x41\x16\xf5\xa3\x56\xbb\x2f\xdd\xac\x2f\xe7\x68\x40\xb1\xc6\x47\x55\x5d\x68\xec\xbe\xd3\xdc\x4f\xa5\x6c\xa0\x25\xdc\x60\x66\x06\xe5\x31\xa9\x7f\x69\xdb\xa1\xcd\x8d\x96\xbb\x4b\xdc\xdb\xcb\xf0\x38\xd2\x83\x86\x81\xa5\x4d\xe4\x36\xe5\xaf\x09\xf1\x0d\x4e\x7e\x41\xc9\x8a\xe1\xf5\x7b\xf0\xf7\x1f\x74\x44\xf0\xbe\x41\x64\x24\xe9\x02\x27\x91\x78\x6f\xf9\x4e\xf9\x16\x69\x1a\x23\xd5\xe6\x97\x8a\xad\x9c\x8a\xdc\xa9\x6c\xa0\xf1\xf7\x17\x66\x63\xd3\xc2\x42\x87\x83\x4e\xe1\x6a\xcb\xdc\x63\xb2\x11\x60\xb0\x01\x30\x70\xc2\x54\xc9\xcb\x12\x0d\x28\xde\xf7\xbe\x53\x66\x19\xba\x83\x70\x41\x6c\x98\xba\x05\x05\x6d\x7a\xe3\x00\x09\x26\xec\xb8\xce\x41\x4a\xda\x71\xa2\xc8\x34\x5a\x9c\x2e\x73\xb4\x17\xdc\x19\x38\xbd\xc8\x8f\xc7\x9e\x09\xfd\x8c\x37\xc8\xaf\x5a\xaf\xad\xdb\x03\xfb\x54\xe5\x9b\x0a\xeb\x74\x6a\x0f\x73\xac\xce\xdb\x76\x46\xf1\xb1\x17\x96\x64\x4d\xd6\xd3\xac\xe6\x92\x63\xfb\xae\xfa\xb0\x4c\x8f\xe5\x74\xd2\x17\x5d\xc1\x61\xdc\x95\x79\xbc\xb9\x0d\x33\xe1\x16\x7a\x7f\x16\xac\x27\x15\x68\x13\xce\x89\x9a\x36\x9b\xb4\x84\xfa\x57\xd3\xf7\xc4\x3c\x52\x88\x19\xa6\x35\xda\x5f\xe6\xd0\x75\xab\x98\xbe\xac\x59\xbc\x2a\xff\x7d\xfa\x33\x00\x00\xff\xff\x9f\x42\x5b\x51\x8a\x8c\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 35978, mode: os.FileMode(420), modTime: time.Unix(1455724024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

