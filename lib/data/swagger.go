// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xc0\x5c\xfb\x74\x63\x8b\xe7\xd4\xc9\x4c\xfd\x54\xc5\x4a\x3b\x9a\x64\x1c\xcf\x5c\xf3\xe4\x7a\xee\x20\x12\x92\x90\x52\x24\x43\x82\x3e\x5f\x6f\xee\xbb\x17\x00\x41\x1e\xff\x00\x12\x40\x82\x12\x15\x41\x0f\xf6\x0d\xb5\x58\xee\x2e\x76\x7f\xd8\x5d\x02\xe2\xd3\x2b\x40\x3f\x57\xd9\x03\xdc\x6c\x50\x7a\xf5\x1e\x5c\x7d\x37\xbb\xb9\x7a\x5d\x5c\xc5\xd1\x3a\xa6\x97\x0a\x1a\x7e\x25\x40\x99\x9f\xe2\x84\xe0\x38\x62\xb4\xbf\x45\xf8\x2b\x4a\x33\x18\x82\x0c\xa5\x5f\xb1\x8f\xc0\x2a\x8d\xff\x8b\x52\xb0\x83\x11\xdc\xa0\x1d\x8a\x08\x98\x7f\x5a\x0a\x7e\x9c\x03\xa3\x17\xa3\x6f\x66\x37\xb3\xb7\xf5\xef\x08\x26\x21\xe2\x7c\x6f\x7f\xac\xb3\x80\x09\x6e\x90\xa1\x74\x97\xfd\xba\xbe\x2d\x6e\xc9\xe8\xb7\x84\x24\xd9\x7b\xcf\xdb\x60\xb2\xcd\x57\x33\x3f\xde\x79\xdb\xc4\x0f\xe3\x3c\xf0\xfc\xf5\x9b\x3c\x5b\xd5\x87\xfb\x71\x44\xa0\x4f\x1a\x8a\xf1\x2f\xd0\x0e\xe2\x90\xb3\xa3\x83\x02\xf4\xf5\x1f\xdb\x04\x31\x5e\x57\x15\xd9\x73\x8d\x4d\x48\xef\x1d\x65\xa8\xcb\x26\x82\x3b\x2e\xd4\x3c\x81\xfe\x16\x81\x17\x7b\x56\x14\x79\x1a\x96\x52\x53\xa1\x1f\x1e\x1e\x66\x90\xd3\xce\xe2\x74\xe3\x09\xbe\x99\xf7\xcb\xf2\xc3\x4f\x1f\x6f\x7f\x7a\x43\x19\xcc\xb6\x64\x17\xd6\xc4\x78\x55\x13\xe6\x2a\x43\x7e\x9e\x62\xf2\xb8\x40\x6b\x1c\x61\x36\x35\x59\x73\xd2\xe6\x39\xd9\xc6\x29\xfe\x1f\x14\xd3\xd6\x92\x97\x3c\x26\x5c\x5e\x6a\xe5\x9f\xd1\x63\x5b\x56\xcc\xa7\x6a\x8b\x60\x40\xdd\xe3\xb5\x42\xd3\xc6\x0d\x5a\x44\x6d\x97\x99\xcf\xc1\xbf\xa9\x8f\x44\x87\xd4\xa1\xc4\x9f\x2b\x92\x96\xc8\x6d\x8d\x3e\x7f\x69\x31\xfb\x22\x98\xd1\xb9\xce\xf2\x1d\xca\x1a\xcc\xa8\xa6\x09\xb5\x32\x1f\xec\xfd\x9e\xc5\x42\x94\x72\x4c\x92\xc6\x41\xee\x1b\x8e\x81\x64\xdb\xb2\xba\x97\x27\x01\x24\xe8\x8e\x8e\x81\x61\xbc\xe9\xda\x3d\x89\xb3\xae\x13\x4a\x4d\xc6\x19\x65\x80\x6c\xab\xf8\x12\x4c\xff\xd3\xb6\x36\x1f\x1e\x27\x28\xe5\x82\x2e\x03\x36\xbc\x90\xe3\x83\x10\x43\x42\x9f\xa2\x2c\x89\x99\xcb\x49\xa5\xe1\x24\xdf\xdd\xdc\x28\xbf\x94\x89\x7c\x9b\xfb\xd4\x82\xd9\x3a\x0f\x41\xc9\xfd\x4a\x3a\xf8\xb9\x2b\x0f\xe7\xf7\xbd\xe1\x0d\x7f\x8b\xd0\xb7\x04\xf9\x04\x05\x00\xa5\x69\xdc\x76\xd5\xc6\xd0\x8c\x86\xda\x0e\xee\x65\xcf\xe9\xca\xc0\xc8\x48\x8a\xa3\x8d\x5c\x7e\xae\x83\x5c\xb3\xce\xd5\xe6\x95\x67\x29\xaa\x78\x1d\xcc\xe5\x97\x37\x48\xcf\x55\xfe\x85\x48\x06\x18\x8b\x74\xc7\x3d\x00\xc0\x55\x9c\x13\xee\x39\x14\x53\x67\x5a\xfe\x42\xef\xb5\x64\x42\x9c\xce\x53\x2c\xcc\xdd\x5f\x53\xb4\x66\xec\xff\xe2\x05\x2f\xb0\x58\x18\xd7\x74\x1e\x9d\x87\x36\x3d\x34\x48\xf9\xa2\x3f\x8a\x93\xc2\xaf\x74\x09\x86\xab\x10\x81\x7b\x71\x9b\x7b\x5d\x9f\x5d\x08\xb1\xce\xda\x6d\xab\xb5\x38\x4d\x61\x7b\x29\xee\x10\x63\x82\x76\x6a\x95\x1a\xa4\xf2\x70\x28\x4c\xac\x76\x1b\xf6\x91\xbb\x8e\xfa\x9b\x0b\x0e\x97\xd7\x3d\xd7\xf7\x0f\x29\xa2\x0b\x34\x80\x20\x42\x0f\xa0\x98\x13\x2d\xa7\xf7\xf9\xb8\xc2\xef\x65\xe4\x09\x4c\x69\x82\x46\x8a\x58\xfd\x2c\xd5\x69\xcf\x7c\x94\xc9\x5d\xa0\xe2\x5f\x51\x16\x29\xe2\x2a\x0e\xf6\x79\x6c\x5b\xe9\x42\x6c\x40\x62\xb0\x42\xa0\xd0\x24\xd8\x37\x3c\x45\x7f\xe4\x38\x45\x4c\x71\x92\xe6\x68\xb4\x25\xe2\x50\x4c\xe8\xfa\xc6\x97\xbe\x38\xf4\xd6\x28\x4c\x84\x19\x35\x0c\x78\x12\xb3\x28\xc0\xe0\xdd\xcd\xdf\x8d\xb4\x9c\x8b\xb0\x00\x0f\xb4\xc0\xe3\x0b\x45\x46\xbd\x13\xb0\x78\x06\x30\xa4\xba\x07\x8f\x00\x7d\xc3\x19\xc9\x5c\x96\x69\xb2\x86\x7b\x4f\xc5\x1f\x77\x38\x78\x1e\xb4\x9e\x03\x25\x4a\x28\x57\xea\xb1\x11\x8b\xea\x74\x18\xb4\x58\xdd\x66\x0e\x5a\xcb\x85\x1d\xa4\xd2\x99\x7a\x8b\xc8\x62\xe6\xeb\xbf\xfe\x7c\x3e\x68\xf2\xce\x48\xb3\x8f\x31\x01\xff\x8c\xf3\x28\x70\x60\x71\x20\x83\xc9\x4d\x1a\x14\xfa\x18\x50\x74\x24\x1c\x0c\x08\x4a\x2d\x18\x90\x8f\x9f\x48\xfe\x56\x4c\xa8\xcb\xdf\xcc\x51\x56\x98\x51\xc3\x80\x17\x88\xb8\x2e\x4d\x7c\xa1\x3b\x2e\xf2\x07\x28\xa4\xf8\x3b\x0a\xf8\x17\xac\x1d\xf8\x0b\xca\x23\xe7\x80\x66\x71\x2b\x74\x2d\xa6\xcc\x38\x78\x5d\x56\xd6\xd6\x61\xe4\x12\xce\x5b\x61\x22\xe9\xcb\xea\xa7\x71\x61\x0c\x83\x12\x43\x39\x2f\x9d\x5c\x8e\x0d\x72\xe1\x2c\x28\xc7\xcd\xe5\xb2\x2d\x3c\x6c\x00\xd6\x57\x5f\x40\xb2\x97\xb2\x65\x84\x35\x0e\xe9\x5a\xb9\x85\x6f\xc1\x0a\x66\xe8\x87\x77\x00\x45\x7e\x1c\xd8\x4a\xe8\xc6\xb5\x09\x93\x7d\x14\xa3\x08\xcf\x40\xdf\x90\x9f\x13\xf6\x4c\xc2\xae\x35\xb8\xdc\x03\xe0\x5e\xfa\x68\xbb\x41\xb1\xcb\x43\x82\x69\xfc\x11\x8f\x69\xff\x26\x60\xea\x9f\x3c\xcf\x65\x68\xe1\x96\x12\x25\xdd\x64\x96\x12\xea\x5e\x6b\xbc\xb9\x53\xc8\xdd\xa3\x37\x08\x0a\x8e\x40\x70\x34\xe8\x14\xde\x2a\x47\xb8\xc5\xa5\xf3\xf9\x13\xf7\x0b\x4b\x67\x3c\xaf\x22\xd6\xa1\x4a\x0d\x55\x02\x0c\x43\x3b\x98\x82\xd9\xa6\x43\x13\x28\xa1\x03\x1c\x90\x08\xca\xcb\x05\x92\x9a\xff\x39\x18\x29\x87\x9e\x01\x8c\xdc\xe1\x28\x23\x30\xf2\x25\x8e\x66\xb6\xef\x48\x24\x23\x15\x3b\x40\x73\x63\x00\x4d\xb6\x5d\x54\x79\xc9\xb2\x12\xe9\xb4\x88\xd2\x07\x2b\x0a\x14\xfa\x23\x47\xe9\xde\xa6\xbf\x83\x94\x1a\xdd\x29\x36\x67\x55\x7e\xef\x76\x69\x69\x6a\x76\x08\x65\x06\xef\xd2\x6a\x21\x88\xe1\x46\xad\xe5\x9e\x61\x76\x31\x43\x7d\x23\x95\x8a\x2d\xcd\xf4\x37\x67\xe9\x3d\x41\x3c\xee\x23\x40\x8d\xc8\x99\xd8\x5e\xae\xd2\x35\x8e\xb5\x9b\xab\xbf\x85\x2c\x3d\xaf\xfb\x10\x47\xeb\x10\xfb\xc4\x65\x42\xbd\x32\xa1\x97\xca\x4a\x5c\x19\xbc\x8d\x2b\x6b\xf6\x6a\xf2\x02\xc4\xb2\x7e\x69\xd1\xd1\x10\x6e\xcc\x82\xab\x0c\x49\x57\x79\x4d\x15\x72\x5c\xf5\xd5\xd6\xc1\x4e\x5e\x64\xb6\xf7\xab\x93\x16\x19\x1c\x4d\x73\xb0\x31\x89\x2d\x62\x77\x05\xe8\x5b\xdf\x29\x36\x0f\xca\x67\xca\x1a\x77\xb8\xbc\x1c\xd1\xf8\xdc\x51\x71\xec\xe8\x18\xc7\xe5\xce\x1b\xb3\x5d\x36\xda\xd1\xc1\xca\xca\x60\xb0\x37\x6c\xc1\x49\x7b\xd5\xcc\xf5\x6d\x62\x6e\x69\x98\x4e\x46\xe9\x36\x90\x9d\x5f\x00\x0f\x28\x27\xbd\x84\x09\xd4\xbb\xa6\xfc\x44\x47\x17\x3f\x5c\x60\xd0\x60\x67\xb7\x74\x81\x3f\xb5\xc0\x37\x2e\x25\x5d\xb0\xcb\xe9\x4e\x12\xec\xe2\xf7\x79\x86\x3e\x3d\x63\x91\xcc\x77\xd0\x53\xc9\xc1\xbd\x60\xaa\x7d\x44\x5f\xfc\x62\xcf\x8f\x8f\x65\x2c\x2c\x65\xd1\x76\xc2\xc8\x3e\xf8\x3c\xac\x35\x77\x56\xe2\x58\x0e\x17\xb8\x06\x17\xd3\x0a\xed\xa3\x96\x20\xc2\xc5\xdc\x8f\x76\xa8\xaf\x1a\xc5\xbf\xf7\x24\xfe\xb2\xd0\x2b\x66\x60\x50\x61\xc0\xcb\x99\x1b\x1c\x80\xeb\x6b\x71\x79\xb9\xb8\xbe\x36\xc2\x86\xf1\xf0\xe0\x45\x6f\xeb\x2b\xfc\x72\x01\xe2\x75\x71\xde\x48\xa9\x45\x35\xf6\x4f\xb2\xc0\x9f\x33\x0a\xb8\x64\xa3\xab\x83\x95\xd6\x80\x59\xd3\xd8\x26\x82\x14\x9d\x64\x07\x22\x1d\xca\x91\x0f\xa4\x1c\x16\xb5\x57\xcf\x58\x3c\x55\xb0\x6a\x89\xd3\x40\x90\xc3\x67\xf6\x99\x24\x3e\xbb\x06\x71\x47\x07\x9b\x29\x67\x12\xc2\x68\x68\xbd\x79\xcf\x99\xdc\x1b\xa5\x90\x9f\xf8\x7d\x2f\xa0\xae\x5c\xc3\x30\x33\x2f\x2c\x97\x97\x56\x58\x1e\x77\xdb\x26\x73\x58\xb7\x57\x53\x53\xb3\x01\xc0\xe2\x3d\xb1\xff\x6c\x55\xb1\x8c\x57\x2d\x01\xbd\xbe\x66\x17\x8c\x8b\x57\x86\x3c\xe3\x01\x8f\xd0\x77\xc4\xc4\x33\x91\xcb\x5f\x0d\x74\xa5\xeb\x9e\x4f\x2f\x3c\x98\x64\x5e\x74\x01\xc0\x62\xa1\x6e\x65\x13\xdb\x2a\x59\x4b\xd0\xe0\x67\x4a\x6a\x95\xdc\xe0\x82\xd6\x01\x4b\x49\x39\x6e\x39\x7b\x48\xce\x21\xb5\xac\x3d\x1b\x9c\x00\x90\x1c\x54\x3b\xa8\x56\xd1\x4d\x7b\xf7\xd1\xa1\x04\xaf\xc2\x6a\x53\x80\x2e\x04\x71\x00\xdd\xa2\x9c\xf4\x76\x24\x19\x9c\xb8\xb0\x96\xd3\x9d\x66\x4f\x12\x86\xe1\xe0\x9e\x11\x67\xa2\xd9\x33\x9a\x87\xe1\x82\xdf\xd3\xf5\x8b\xdc\x46\x84\x82\xee\xc8\xc7\x7c\xa9\xf7\xb9\x7e\x91\xa6\x66\xa6\x65\x9d\xf9\xd9\x5e\xf6\xb3\x22\x6b\xa9\xae\x8a\x43\xbd\x6c\xfa\xc6\xc3\x0e\x39\xf7\x8a\xae\x57\x3d\xf2\x91\xbd\x65\xe2\x00\xe3\xa3\x1d\xc3\xd8\xeb\xfd\x13\x3b\x9f\x7b\xdc\xb3\x17\x7d\x2c\x73\xb9\x91\xbf\x27\x9d\xf0\x9e\xf8\xaf\xbe\x58\xea\x14\x33\x5e\x8d\x42\x42\x30\xd7\x6d\x15\x8f\x0f\x18\xe3\x56\x0a\xf6\x90\xc3\xf5\x88\xc7\x88\x75\x57\xa1\x74\x75\xb0\x93\x4c\xf4\xe8\x11\xf3\x74\xa2\xd9\x23\x36\x81\x0b\x71\x3c\xd6\x21\x86\xa0\x1c\xf9\x14\xec\x18\xc9\x56\xe1\x0d\x81\x4b\xb8\x80\x03\x61\xb5\xa2\x0e\x84\x15\x57\x2c\x75\x7f\x07\x25\x6d\xe2\x24\xaa\x43\x61\x41\xe9\x3a\xbc\x2e\x74\xa5\x57\x95\x25\x19\xff\xab\x7c\xbf\x77\xa0\x7a\x4d\xb9\xfc\xcd\xc7\xa5\x90\xf1\xea\x77\xaa\x7e\x4b\xed\xba\xd7\x76\x63\xaf\x7a\xd7\x7c\xe3\x9b\x2f\xed\xbc\x2e\x65\xf1\x4e\xb0\xc2\x0b\x6b\x2f\xac\x57\xb8\xe8\x21\x33\xea\x54\xaa\x59\xf5\x2e\x7b\x8b\xea\x6b\x75\x9e\x0b\x08\x1a\x64\x21\x1c\x0c\x30\x8e\x44\x22\x89\xdc\xba\xfc\x15\xd1\xb6\xc3\xd1\x2f\x28\xda\x50\xe8\x7c\x0f\xfe\xf6\x83\x8a\x08\x7e\xab\x11\x69\x49\xba\xc2\x51\xc0\xdf\x0c\x70\x50\xbe\x55\x1c\x87\x48\xf6\x78\x59\xc6\x56\xac\x0a\xf6\x54\xd6\xd0\xf8\xfb\x1b\xbd\xb9\x69\xc0\x92\xc5\x49\x27\x70\xb3\x67\x19\xd0\xe9\xc9\x6b\xf4\xe2\x7b\xae\x5d\x32\x79\xe9\x9a\x0f\xf9\x1b\x15\x0e\xca\x2c\x42\xb7\x17\x2e\xf0\xe7\xb2\x76\x41\x41\x99\x69\x58\x40\x82\x09\x3b\xae\x75\x90\x12\x76\x9c\x28\x32\x8d\x16\xa7\xeb\x14\x0d\x82\x3b\x0d\xa7\xe7\xa9\xea\xd8\x2b\xa1\x5b\xf1\x7a\xf9\x55\xe3\x87\x21\x07\x60\x9f\xac\x92\x92\x61\x9d\x4a\xed\x7e\x8e\xd5\xfa\x3d\xab\x51\x7c\xec\xcc\x92\xac\xc9\x7a\x9a\xd1\x5a\x72\x6a\xdf\x95\xef\x5b\xe9\xb0\x9c\x4e\xfa\xa2\x2a\x38\xb4\x6f\xa5\x1f\x6f\x76\xc3\x8c\xbb\x85\xda\x9f\x39\xeb\x49\x05\xda\x84\x73\xa2\xba\xcd\x26\x2d\xa1\xfa\xe5\x0f\x1d\x31\x4f\x14\x62\x9a\x69\x8d\xf2\xdd\x37\xaa\xdb\x4a\x96\x2f\x63\x16\xaf\x8a\x7f\x9f\xff\x1f\x00\x00\xff\xff\x8b\xc7\x8d\x89\xec\x8f\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 36844, mode: os.FileMode(420), modTime: time.Unix(1455201623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

