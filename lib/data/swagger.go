// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x4f\x6f\xdb\xb8\x12\xbf\xf7\x53\x10\x7e\xef\x64\xb4\x56\x5a\xf4\x3d\x60\x7b\x5a\xb7\xee\x2e\x8c\x2e\xda\x02\xd9\x9e\xba\x41\x42\x4b\xb4\xad\xae\x2c\xa9\x14\x95\x34\x1b\xe4\xbb\x2f\xff\xc9\xb1\x24\xca\x22\x65\xca\x7f\x6a\xfa\xd0\x06\xf2\x70\x34\x33\x9c\xf9\x71\x38\x1a\xca\x0f\xcf\x00\xfd\x0c\xb2\x3b\xb8\x58\x20\x3c\x78\x03\x06\xaf\x46\x17\x83\xe7\xe2\x6a\x18\xcf\x13\x7a\x49\xd0\xf0\x2b\x01\xca\x7c\x1c\xa6\x24\x4c\x62\x46\xfb\x25\x0e\x6f\x11\xce\x60\x04\x32\x84\x6f\x43\x1f\x81\x19\x4e\xfe\x46\x18\xac\x60\x0c\x17\x68\x85\x62\x02\xc6\x9f\xa7\x92\x1f\xe7\xc0\xe8\xe5\xe8\x8b\xd1\xc5\xe8\xe5\xe6\x77\x24\x24\x11\xe2\x7c\x2f\xdf\x6e\xb2\x80\x69\x58\x22\x43\x78\x95\x7d\x9a\x5f\x8a\x5b\x32\xfa\x25\x21\x69\xf6\xc6\xf3\x16\x21\x59\xe6\xb3\x91\x9f\xac\xbc\x65\xea\x47\x49\x1e\x78\xfe\xfc\x45\x9e\xcd\x36\x87\xfb\x49\x4c\xa0\x4f\x4a\x8a\xf1\x2f\xd0\x0a\x86\x11\x67\x47\x07\x05\xe8\xf6\xd7\x65\x8a\x18\xaf\xc1\x9a\xec\x71\x83\x4d\x44\xef\x1d\x67\xa8\xce\x26\x86\x2b\x2e\xd4\x38\x85\xfe\x12\x81\x27\x7b\xae\x29\x72\x1c\x15\x52\x53\xa1\xef\xee\xee\x46\x90\xd3\x8e\x12\xbc\xf0\x24\xdf\xcc\xfb\x63\xfa\xee\xfd\xc7\xcb\xf7\x2f\x28\x83\xd1\x92\xac\xa2\x0d\x31\x9e\x6d\x08\x33\xc8\x90\x9f\xe3\x90\xdc\x4f\xd0\x3c\x8c\x43\x36\x35\x59\x79\xd2\xc6\x39\x59\x26\x38\xfc\x07\xca\x69\xab\xc8\x4b\xee\x53\x2e\x2f\xb5\xf2\x07\x74\x5f\x95\x35\xe4\x53\xb5\x44\x30\xa0\xee\xf1\xbc\x41\xd3\xd2\x0d\x2a\x44\x55\x97\x19\x8f\xc1\x9f\xd4\x47\xe2\x36\x75\x28\xf1\xd7\x35\x49\x45\xe4\xaa\x46\x5f\xaf\x2a\xcc\xae\x24\x33\x3a\xd7\x59\xbe\x42\x59\x89\x19\xd5\x34\xa5\x56\xe6\x83\xbd\x6f\x59\x22\x45\x29\xc6\xa4\x38\x09\x72\xdf\x70\x0c\x24\xcb\x8a\xd5\xbd\x3c\x0d\x20\x41\xd7\x74\x0c\x8c\x92\x45\xdd\xee\x69\x92\xd5\x9d\x50\x69\x32\xce\x28\x03\x64\xb9\x8e\x2f\xc9\xf4\xaf\xaa\xb5\xf9\xf0\x24\x45\x98\x0b\x3a\x0d\xd8\x70\x21\xc7\x3b\x29\x86\x82\x1e\xa3\x2c\x4d\x98\xcb\x29\xa5\xe1\x24\xaf\x2e\x2e\x1a\xbf\x54\x89\x7c\x99\xfb\xd4\x82\xd9\x3c\x8f\x40\xc1\x7d\xa0\x1c\xfc\x58\x97\x87\xf3\xfb\x9f\xe1\x0d\xbf\xc4\xe8\x47\x8a\x7c\x82\x02\x80\x30\x4e\xaa\xae\x5a\x1a\x9a\xd1\x50\x5b\xc1\xad\xec\x39\x5d\x11\x18\x19\xc1\x61\xbc\x50\xcb\xcf\x75\x50\x6b\x56\xbb\x5a\xbe\xf2\xa8\x44\x15\xaf\x86\xb9\xfc\xf2\x02\xe9\xb9\xca\xef\x88\x64\x80\xb1\xc0\x2b\xee\x01\x00\xce\x92\x9c\x70\xcf\xa1\x98\x3a\xd2\xf2\x17\x7a\xaf\x29\x13\xe2\x70\x9e\x62\x61\xee\xfe\x8b\xd1\x9c\xb1\xff\x8f\x17\x3c\xc1\xa2\x30\xae\xe9\x3c\x3a\x0f\x2d\x7b\x68\x80\xf9\xa2\xdf\x8b\x93\xc2\x5b\xba\x04\xc3\x59\x84\xc0\x8d\xbc\xcd\x8d\xae\xcf\x4e\xa4\x58\x27\xed\xb6\xeb\xb5\x18\x63\x58\x5d\x8a\x6b\xc4\x21\x41\xab\x66\x95\x4a\xa4\xea\x70\x10\x26\x6e\x76\x1b\xf6\x51\xbb\x4e\xf3\x37\x67\x1c\x2e\xcf\x3b\xae\xef\xef\x30\xa2\x0b\x34\x80\x20\x46\x77\x40\xcc\x89\x96\xd3\xfb\x7c\x9c\xf0\x7b\x15\x79\x0a\x31\x4d\xd0\x88\x88\xd5\xaf\x4a\x9d\xb6\xcc\x47\x91\xdc\x05\x4d\xfc\xd7\x94\x22\x45\x9c\x25\xc1\x36\x8f\xad\x2a\x2d\xc4\x06\x24\x01\x33\x04\x84\x26\xc1\xb6\xe1\x18\x7d\xcf\x43\x8c\x98\xe2\x04\xe7\xa8\xb7\x25\xa2\x2d\x26\x74\x7d\xe3\xaa\x2b\x0e\xbd\x34\x0a\x13\x69\x46\x0d\x03\x1e\xc4\x2c\x0d\x60\xf0\xfa\xe2\x17\x23\x2d\xc7\x32\x2c\xc0\x1d\xdd\xe0\xf1\x85\x22\xa3\xde\x09\x58\x3c\x03\x18\x51\xdd\x83\x7b\x80\x7e\x84\x19\xc9\x5c\x96\x69\xb2\x86\x7b\x0f\xe2\x8f\xeb\x30\x78\xdc\x69\x3d\x07\x8d\x28\xd1\xb8\x52\xf7\x8d\x58\x54\xa7\x76\xd0\x62\xfb\x36\x73\xd0\x9a\x4e\xec\x20\x95\xce\xd4\x5b\x44\x16\x33\x5f\xff\xf4\xe1\x74\xd0\xe4\xb5\x91\x66\x1f\x13\x02\x7e\x4b\xf2\x38\x70\x60\xd1\x92\xc1\xe4\x26\x05\x0a\x7d\x0c\x10\x15\x09\x07\x03\x92\x52\x0b\x06\xd4\xe3\x8f\x24\x7f\x13\x13\xea\xf2\x37\x73\x94\x95\x66\xd4\x30\xa0\x43\xdc\xd6\xdb\x9c\x3e\xe2\x06\x28\xa2\xb8\xd7\x0b\xe8\x0a\xd6\x0e\x74\x25\xe5\x9e\x73\x2f\xb3\x78\x91\xba\x8a\x29\x33\x0c\x1a\x17\x9b\x75\x1d\x7a\xde\x3a\x79\xb3\x90\x28\xea\xa1\xfa\xe9\x53\x94\xc0\xa0\xd8\xe2\x72\x5e\x3a\x39\x14\x1b\xe4\xc2\x59\x52\xf6\x9b\x43\x65\x4b\xd8\x6e\x00\x56\xcf\x9e\x40\xb2\x95\xb2\x62\x84\x79\x18\x21\x40\x99\xbf\x04\x33\x98\xa1\xff\xbf\x06\x28\xf6\x93\xc0\x56\x22\xd5\xaf\x4d\x98\xec\xbd\x18\x45\x7a\x06\xfa\x81\xfc\x9c\xb0\x67\x01\x76\xad\xc1\xe5\xde\x01\xee\x95\x8f\x94\x4b\x14\xab\x3c\x22\x21\x8d\x3f\xe2\x31\xed\x5f\x04\x4c\xfd\x83\xe7\x97\x0c\x2d\xdc\x52\xd2\x48\x77\x34\x4b\x49\x83\xc0\x1d\x8a\x71\x80\x7a\xea\x3c\x5c\x00\xc9\xd1\xa0\x34\x77\xd9\x38\xc2\xad\x2a\xb5\xcf\x4f\x5c\xa0\xbb\x96\x4c\xdc\xae\xb1\x18\x7a\x02\x70\x72\x1d\xc6\x19\x81\xb1\xaf\x70\x35\xb3\x27\xf4\x30\x8a\xca\x48\x92\x0b\xb0\xc8\xcc\x9e\xc8\x4f\xd7\xe2\x1c\x16\x4f\xba\x20\x85\xc0\xa0\xef\x39\xc2\x5b\x4b\x63\x1b\x80\x32\x87\x51\x76\xe6\x88\x72\x88\x1e\x86\xb5\xd3\xbb\x66\x06\x4d\xcd\xda\x20\x66\xe7\x66\x06\x09\x1d\xeb\x89\x31\xeb\x67\x98\x6e\x19\x66\x17\x34\x9a\x6f\xd4\xa4\x62\x45\x33\xfd\x1e\x06\xbd\x42\xfb\x7e\x2b\xe5\x1a\x91\x73\x64\x2d\x0f\x85\x6b\xec\xab\xe9\xa1\xbb\x85\xce\x17\x3d\xf4\x12\x94\xa7\x8d\x8f\xbc\xb2\x73\x1f\x42\x66\x33\x63\xd9\x1b\xf6\xf4\xb9\x13\x2a\x82\xc5\x6d\x89\x8e\x13\x0c\xdc\xa6\xa8\xae\x83\x9d\x8c\xc5\xac\x79\xa1\x96\xb0\x18\x9c\xad\x70\xb0\x71\x14\x3d\x0e\xd7\x02\xf4\xad\xb7\x3a\x8c\x83\xe2\xe1\x8c\xc6\x1d\xce\x2f\x7b\x33\x6e\x9c\x17\x7d\xf3\xfb\x38\xef\xe1\x30\xbb\x69\xe8\x71\x62\xb6\x41\xfb\xc3\x84\x93\x76\xda\x67\x6e\x76\x42\x38\xd0\x3e\x9e\x5c\xcf\xf5\x48\x9c\x5e\x00\xef\xb0\xd1\xf3\x52\x26\x50\xe7\xdd\xde\x67\x3a\x5a\x9c\x89\x35\x38\x32\xc3\x6e\xe9\x02\xff\xd8\x02\xdf\x78\x93\xe7\x82\x5d\x4d\x77\x90\x60\x97\xaf\x7e\xd8\xf5\x71\x13\x8b\x64\x7e\x86\x87\x4a\x0e\x6e\x24\x53\xed\xd3\x9f\xf2\x65\x10\x6f\xef\x8b\x58\x98\xaa\xa2\xed\x80\x91\xdd\xfa\x10\xa9\x32\x77\x56\xe2\x58\x0d\x17\xe1\x06\x5c\x1c\x57\x68\xef\x75\x73\x20\x5d\xcc\x55\x75\x9b\xaf\x1a\xc5\xbf\xf7\x20\xff\xb2\x50\xc5\x65\x60\xb0\xc6\x80\xa7\x53\x7f\x61\x00\x86\x43\x79\x79\x3a\x19\x0e\x8d\xb0\xa1\x3f\x3c\x78\xd2\xdb\xfa\x0a\x3f\x9d\x80\x64\x2e\x4e\x3c\x36\x6a\xb1\x1e\xfb\x93\x2c\xf0\xa7\x8c\x02\x2e\xd9\xa8\xeb\x60\xa5\x34\x60\x56\xce\xb5\x89\x20\xa2\xc6\xeb\x40\xa4\x46\xd9\x73\xcf\x75\xbb\xa8\x9d\xaa\xb9\xb2\xde\x6f\xd5\x12\x87\x81\x20\x87\xcf\xec\xe3\xf0\xb9\x81\xee\x20\xc9\x60\x1a\xc1\x78\xd7\x9d\xe0\x0d\x67\x72\x63\x94\xdc\x7d\xe6\xf7\x3d\x83\x1d\x5f\x5b\x83\x61\x7b\x85\xe8\x2c\xc0\x64\xbf\x4d\x88\xcc\x61\x5d\xe7\xa1\xa6\x66\xa6\x89\x9f\x71\xe7\x21\x9f\x0d\xdd\x76\xc3\x0d\xfc\xe8\x0f\x3e\x1a\x24\x5a\xd3\x75\x7e\x2c\x2d\x94\x05\xf3\x04\xd3\x3f\x87\xc3\x20\x84\x51\x43\x56\xbb\xe6\xb2\xaf\xac\x66\x7b\x4c\x1c\x59\x4f\xe1\x5e\x53\x9a\x4e\x96\x39\x5f\x3c\xd8\x92\x68\x78\x0f\xec\x3f\x5b\xf5\x26\xc6\x6b\x63\xab\x38\x1c\xb2\x0b\x2c\x9c\x78\x7c\xf1\x4b\x4f\x3b\x47\xe3\xec\xa4\x5f\x74\xe9\x77\xdb\xd8\x86\x5f\xae\xf0\xb4\xe5\xb3\x07\x14\x70\xbb\x9a\xba\x0e\x76\x92\x8f\x0e\x55\x27\xbe\x22\x97\x0b\x4e\x35\x20\x29\x5e\x97\xbe\x6b\x39\xca\x01\x4b\x41\xd9\x6f\x31\xaa\x97\x04\x4e\x56\xa2\xec\xd9\xe0\xa4\x13\x36\x07\xd5\x4a\x45\x1d\x54\x37\x5c\xd9\xb5\x77\x50\x3f\xe9\x33\x04\x68\x21\x88\x03\xe8\x0a\xe5\x51\x37\x13\xaa\xe0\xc4\x85\xb5\x9a\xee\x30\x1d\x85\x21\x8c\x76\xae\x2b\x73\x26\x9a\x75\xe5\x71\x14\x4d\xf8\x3d\x5d\x4d\xd9\xb5\x11\x09\xba\x3d\x1f\x6c\xa7\xde\xe7\x6a\xca\x9a\x9a\x99\x6e\xeb\xcc\x4f\xb3\xd3\xd9\x60\x19\x81\xfe\x31\x76\x36\x7d\xfd\x61\x87\x9a\xfb\x9a\xae\xd3\x7e\xe4\x23\xfb\xf9\x81\x16\xc6\x7b\x3b\xde\xb4\xd5\xfb\xcf\xb9\x7a\xdc\xc9\x32\xe7\x1b\xf9\x5b\xd2\x09\xef\x81\xfd\x67\xab\x7a\xcc\x78\x95\x36\x12\x92\xb9\x6e\x97\x62\xff\x80\xd1\xef\x4e\xc1\x1e\x72\xb8\x1a\x71\x1f\xb1\xee\x76\x28\x75\x1d\xec\x24\x13\x1d\x6a\xc4\x3c\x9d\x28\xd7\x88\x4d\xe0\x42\x1e\x3b\x77\x88\x21\x29\x7b\x3e\x5d\xde\x47\xb2\x25\xbc\x21\x70\x09\x17\x70\x20\xdc\xac\xa8\x03\xe1\x86\x2b\x96\xaa\xbf\x3b\x25\x6d\xf2\x1c\xb9\x43\x61\x49\xe9\x2a\xbc\x2e\x74\x95\x57\xbb\x6c\xc9\xec\xbc\x08\x99\xa5\x59\x46\xef\x3f\xa6\x03\x7a\x7f\xfb\xb1\x0b\xe9\x13\xcd\x02\xdc\xfb\x90\xab\x43\x8f\x0e\x51\xf8\x5f\xc5\x4f\xc9\x07\x4d\xbf\x88\xaf\xfe\x91\xed\x42\xc8\x64\xf6\x8d\xaa\x5f\x51\x7b\x33\x68\xea\xa1\x3f\x60\xef\x71\x67\xf6\x2b\x7d\x73\x55\xdd\x29\x62\x86\x38\x24\x6c\x08\x82\x35\x93\xc6\x08\x69\x33\xa3\x0e\xd0\x16\x07\x6a\xac\xaa\xaf\xf5\x2c\x4b\x20\xe0\x4e\x16\x0a\x83\x1d\x8c\xa3\x90\x48\x21\xb7\x55\xfe\xb3\x30\x0e\xf8\x4f\x58\xb4\x72\x9d\x25\x49\x84\x54\x6d\x26\x2a\xb6\x72\x29\xb1\x69\x88\x12\x06\x58\x64\x4c\xe0\x62\x0b\xe4\xeb\x3c\x52\xd3\x78\x94\xd6\x71\x9d\x52\xc9\x4b\xd7\x77\xc8\x7f\xb1\xa3\x55\x66\x19\x27\x9d\x82\x90\xb7\x55\xd8\x8d\xc0\xc6\xac\xc2\x42\xd8\xd9\xf7\x37\xeb\x81\x2c\xd5\x3f\x8d\xa0\x98\x63\xb4\x13\x24\x68\x78\x18\xcf\x01\xfb\xc6\xf8\xb3\xc2\xf2\xd2\x2b\x85\x77\x80\x07\xd5\xc6\x42\x05\x07\xfa\xc2\xea\xb8\x43\xe5\x4d\x88\xbd\x78\xc6\x89\x2d\xfa\x96\xd9\xda\x07\xc9\x1e\x3d\x4e\xdd\x4f\x55\x63\x79\x3c\xeb\x72\x53\xda\xaa\x7d\x2b\xfd\x28\xb1\x1b\x1c\xc7\xe7\xff\x3d\x64\x8f\x22\xa2\xe4\xd0\xfe\x30\xfd\x78\x3d\x56\x73\x45\xbe\x6e\xaa\x6a\x35\xc5\xb0\x02\xc3\x8d\x59\x3c\x13\xff\x3e\xfe\x1b\x00\x00\xff\xff\x16\x9a\xfc\xf1\xec\x8f\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 36844, mode: os.FileMode(436), modTime: time.Unix(1452603260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

