// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xdf\x93\x9b\xbe\x11\x7f\xcf\x5f\xa1\x71\xfb\xe4\x49\xcc\xe5\xdb\x7c\x33\xd3\x3c\xd5\x89\xd3\x8e\x27\x99\x24\x33\xd7\x3c\xa5\x37\x77\x32\xc8\xb6\x52\x0c\x04\xc4\xfd\xe8\xcd\xfd\xef\x95\x84\xe0\x0c\x48\x46\xc2\x60\xe3\x58\x7e\x48\x6e\xf0\x6a\xd9\x5d\xed\x7e\xb4\x5a\x56\xf8\xf1\x05\xa0\x9f\x51\x72\x07\x57\x2b\x14\x8f\xde\x81\xd1\x1f\x93\x8b\xd1\xcb\xec\x2a\x0e\x96\x21\xbd\x94\xd1\xf0\x2b\x1e\x4a\xdc\x18\x47\x04\x87\x01\xa3\xfd\x1e\xe0\x5b\x14\x27\xd0\x07\x09\x8a\x6f\xb1\x8b\xc0\x22\x0e\xff\x8b\x62\xb0\x81\x01\x5c\xa1\x0d\x0a\x08\x98\x7e\x9b\x0b\x7e\x9c\x03\xa3\x17\xa3\x2f\x26\x17\x93\xd7\xdb\xdf\x11\x4c\x7c\xc4\xf9\x5e\xbe\xdf\x66\x01\x23\x5c\x22\x43\xf1\x26\xf9\xba\xbc\xcc\x6e\xc9\xe8\xd7\x84\x44\xc9\x3b\xc7\x59\x61\xb2\x4e\x17\x13\x37\xdc\x38\xeb\xc8\xf5\xc3\xd4\x73\xdc\xe5\xab\x34\x59\x6c\x0f\x77\xc3\x80\x40\x97\x94\x14\xe3\x5f\xa0\x0d\xc4\x3e\x67\x47\x07\x79\xe8\xf6\x1f\xeb\x08\x31\x5e\xa3\x82\xec\x69\x8b\x8d\x4f\xef\x1d\x24\xa8\xce\x26\x80\x1b\x2e\xd4\x34\x82\xee\x1a\x81\x67\x7b\x16\x14\x69\xec\xe7\x52\x53\xa1\xef\xee\xee\x26\x90\xd3\x4e\xc2\x78\xe5\x08\xbe\x89\xf3\x79\xfe\xe1\xe3\x97\xcb\x8f\xaf\x28\x83\xc9\x9a\x6c\xfc\x2d\x31\x5e\x6c\x09\x33\x4a\x90\x9b\xc6\x98\x3c\xcc\xd0\x12\x07\x98\x4d\x4d\x52\x9e\xb4\x69\x4a\xd6\x61\x8c\xff\x07\xc5\xb4\x55\xe4\x25\x0f\x11\x97\x97\x5a\xf9\x13\x7a\xa8\xca\x8a\xf9\x54\xad\x11\xf4\xa8\x7b\xbc\x54\x68\x5a\xba\x41\x85\xa8\xea\x32\xd3\x29\xf8\x37\xf5\x91\xa0\x49\x1d\x4a\xfc\xa3\x20\xa9\x88\x5c\xd5\xe8\xc7\x55\x85\xd9\x95\x60\x46\xe7\x3a\x49\x37\x28\x29\x31\xa3\x9a\x46\xd4\xca\x7c\xb0\xf3\x33\x09\x85\x28\xf9\x98\x28\x0e\xbd\xd4\x35\x1c\x03\xc9\xba\x62\x75\x27\x8d\x3c\x48\xd0\x35\x1d\x03\xfd\x70\x55\xb7\x7b\x14\x26\x75\x27\x94\x9a\x8c\x33\x4a\x00\x59\x17\xf1\x25\x98\xfe\xa7\x6a\x6d\x3e\x3c\x8c\x50\xcc\x05\x9d\x7b\x6c\x78\x26\xc7\x07\x21\x86\x84\x3e\x46\x49\x14\x32\x97\x93\x4a\xc3\x49\xfe\xb8\xb8\x50\x7e\x29\x13\xf9\x32\x75\xa9\x05\x93\x65\xea\x83\x9c\xfb\x48\x3a\xf8\xa9\x2e\x0f\xe7\xf7\xa7\xe1\x0d\xbf\x07\xe8\x3e\x42\x2e\x41\x1e\x40\x71\x1c\x56\x5d\xb5\x34\x34\xa1\xa1\xb6\x81\x3b\xd9\x73\xba\x3c\x30\x12\x12\xe3\x60\x25\x97\x9f\xeb\x20\xd7\xac\x76\xb5\x7c\xe5\x49\x8a\x2a\x4e\x0d\x73\xf9\xe5\x15\xd2\x73\x95\x7f\x21\x92\x00\xc6\x22\xde\x70\x0f\x00\x70\x11\xa6\x84\x7b\x0e\xc5\xd4\x89\x96\xbf\xd0\x7b\xcd\x99\x10\xc7\xf3\x94\x0e\xe6\xee\xaf\x31\x5a\x32\xf6\x7f\x71\xbc\x67\x58\xcc\x8c\x6b\x3a\x8f\xd6\x43\xcb\x1e\xea\xc5\x7c\xd1\xef\xc5\x49\xe1\x2d\x5d\x82\xe1\xc2\x47\xe0\x46\xdc\xe6\x46\xd7\x67\x67\x42\xac\x93\x76\xdb\x62\x2d\x8e\x63\x58\x5d\x8a\x6b\xc4\x98\xa0\x8d\x5a\xa5\x12\xa9\x3c\x1c\x32\x13\xab\xdd\x86\x7d\xe4\xae\xa3\xfe\xe6\x8c\xc3\xe5\x65\xcb\xf5\xfd\x43\x8c\xe8\x02\x0d\x20\x08\xd0\x1d\xc8\xe6\x44\xcb\xe9\x5d\x3e\x2e\xf3\x7b\x19\x79\x04\x63\x9a\xa0\x91\x2c\x56\x7f\x48\x75\xda\x31\x1f\x79\x72\xe7\xa9\xf8\x17\x94\x59\x8a\xb8\x08\xbd\x5d\x1e\x5b\x55\x3a\x13\x1b\x90\x10\x2c\x10\xc8\x34\xf1\x76\x0d\x8f\xd1\xaf\x14\xc7\x88\x29\x4e\xe2\x14\xf5\xb6\x44\x34\xc5\x84\xae\x6f\x5c\xb5\xc5\xa1\xd7\x46\x61\x22\xcc\xa8\x61\xc0\xa3\x98\x45\x01\x06\x6f\x2e\xfe\x6e\xa4\xe5\x54\x84\x05\xb8\xa3\x1b\x3c\xbe\x50\x24\xd4\x3b\x01\x8b\x67\x00\x7d\xaa\xbb\xf7\x00\xd0\x3d\x4e\x48\x62\xb3\x4c\x93\x35\xdc\x79\xcc\xfe\xb8\xc6\xde\xd3\x5e\xeb\x39\x50\xa2\x84\x72\xa5\xee\x1b\xb1\xa8\x4e\xcd\xa0\xc5\xf6\x6d\xe6\xa0\x35\x9f\x75\x83\x54\x3a\x53\xdf\x21\xb2\x98\xf9\xfa\xd7\x4f\xa7\x83\x26\x6f\x8c\x34\xfb\x12\x12\xf0\xcf\x30\x0d\x3c\x0b\x16\x0d\x19\x4c\x6a\x52\xa0\xd0\xc7\x80\xac\x22\x61\x61\x40\x50\x6a\xc1\x80\x7c\xfc\x40\xf2\xb7\x6c\x42\x6d\xfe\x66\x8e\xb2\xc2\x8c\x1a\x06\xb4\x88\xdb\x78\x9b\xd3\x47\x5c\x0f\xf9\x14\xf7\x7a\x01\xdd\x8c\xb5\x05\x5d\x41\x79\xe0\xdc\xcb\x2c\x5e\x84\xae\xd9\x94\x19\x06\x8d\x8d\xcd\xba\x0e\x3d\x6f\x9d\x9c\x05\x26\x92\x7a\xa8\x7e\xfa\xe4\x87\xd0\xcb\xb7\xb8\x9c\x97\x4e\x0e\xc5\x06\xd9\x70\x16\x94\xfd\xe6\x50\xc9\x1a\x36\x1b\x80\xd5\xb3\x67\x90\xec\xa4\xac\x18\x61\x89\x7d\x04\x28\xf3\xd7\x60\x01\x13\xf4\xf6\x0d\x40\x81\x1b\x7a\x5d\x25\x52\xfd\xda\x84\xc9\xde\x8b\x51\x84\x67\xa0\x7b\xe4\xa6\x84\x3d\x0b\xe8\xd6\x1a\x5c\xee\x3d\xe0\x5e\xfa\x48\xb9\x44\xb1\x49\x7d\x82\x69\xfc\x11\x87\x69\xff\xca\x63\xea\x1f\x3d\xbf\x64\x68\x61\x97\x12\x25\xdd\x60\x96\x12\x85\xc0\x2d\x8a\x71\x80\x7a\xea\x12\xaf\x80\xe0\x68\x50\x9a\xbb\x54\x8e\xb0\xab\x4a\xed\xf3\x1b\x17\xe8\xae\x05\x13\xbb\x6b\xcc\x87\x9e\x00\x9c\x5c\xe3\x20\x21\x30\x70\x25\xae\x66\xf6\x84\x1e\xfa\x7e\x19\x49\xd2\x0c\x2c\x12\xb3\x27\xf2\xf3\x42\x9c\xe3\xe2\x49\x1b\xa4\xc8\x30\xe8\x57\x8a\xe2\x9d\xa5\xb1\x2d\x40\x59\x42\x3f\x39\x73\x44\x39\x46\x0f\x43\xe1\xf4\xb6\x99\x41\x53\xb3\x26\x88\xd9\xbb\x99\x41\x40\x47\x31\x31\x66\xfd\x0c\xf3\x1d\xc3\xba\x05\x0d\xf5\x8d\x54\x2a\x56\x34\xd3\xef\x61\xd0\x2b\xb4\x1f\xb6\x52\xae\x11\x39\x03\x6b\x79\xc8\x5d\xe3\x50\x4d\x0f\xed\x2d\x74\xbe\xe8\xa1\x97\xa0\x3c\x6f\x7c\xc4\x95\xbd\xfb\x10\x92\x2e\x33\x96\x83\x61\x4f\x9f\x3b\xa1\x3c\x58\xec\x96\x68\x98\x60\x60\x37\x45\x75\x1d\xba\xc9\x58\xcc\x9a\x17\x6a\x09\x8b\xc1\xd9\x0a\x0b\x1b\x83\xe8\x71\xb8\xce\x40\xbf\xf3\x56\x87\xa9\x97\x3f\x9c\xd1\xb8\xc3\xf9\x65\x6f\xc6\x8d\xf3\x59\xdf\xfc\x21\xce\x7b\x58\xcc\x56\x0d\x1d\x26\x66\x1b\xb4\x3f\xcc\x38\x69\xab\x7d\xe6\x76\x27\x84\x05\xed\xe1\xe4\x7a\xb6\x47\xe2\xf4\x02\x78\x8f\x8d\x9e\x13\x31\x81\x5a\xef\xf6\xbe\xd1\xd1\xd9\x99\x58\x83\x23\x33\xec\x96\x36\xf0\x87\x16\xf8\xc6\x9b\x3c\x1b\xec\x72\xba\xa3\x04\xbb\x78\xf5\xc3\xbe\x8f\x9b\x58\x24\xf3\x33\x3c\x54\x72\x70\x23\x98\x6a\x9f\xfe\x14\x2f\x83\x78\xff\x90\xc7\xc2\x5c\x16\x6d\x47\x8c\xec\xc6\x87\x48\x95\xb9\xeb\x24\x8e\xe5\x70\x81\xb7\xe0\x62\x58\xa1\x7d\xd0\xcd\x81\x70\x31\x5b\xd5\x55\x5f\x35\x8a\x7f\xe7\x51\xfc\xd5\x41\x15\x97\x81\x41\x81\x01\xcf\xa7\xfe\xb0\x07\xc6\x63\x71\x79\x3e\x1b\x8f\x8d\xb0\xa1\x3f\x3c\x78\xd6\xbb\xf3\x15\x7e\x3e\x03\xe1\x32\x3b\xf1\xa8\xd4\xa2\x18\xfb\x9b\x2c\xf0\xa7\x8c\x02\x36\xd9\xa8\xeb\xd0\x49\x69\xc0\xac\x9c\xdb\x25\x82\x64\x35\x5e\x0b\x22\x35\xca\x9e\x7b\xae\x9b\x45\x6d\x55\xcd\x15\xf5\xfe\x4e\x2d\x71\x1c\x08\xb2\xf8\xcc\x3e\x16\x9f\x15\x74\x47\x49\x06\x23\x1f\x06\xfb\xee\x04\x6f\x38\x93\x1b\xa3\xe4\xee\x1b\xbf\xef\x19\xec\xf8\x9a\x1a\x0c\x9b\x2b\x44\x67\x01\x26\x87\x6d\x42\x64\x0e\x6b\x3b\x0f\x35\x35\x33\x4d\xfc\x8c\x3b\x0f\xf9\x6c\xe8\xb6\x1b\x6e\xe1\x47\x7f\xf0\xa1\x90\xa8\xa0\x6b\xfd\x58\x3a\x53\x16\x2c\xc3\x98\xfe\x39\x1e\x7b\x18\xfa\x8a\xac\xb6\xe0\x72\xa8\xac\x66\x77\x4c\x0c\xac\xa7\xf0\xa0\x29\x4d\x2b\xcb\x9c\x2f\x1e\xec\x48\x34\x9c\x47\xf6\x5f\x57\xf5\x26\xc6\x6b\x6b\xab\x38\x1e\xb3\x0b\xc6\x65\xa6\xfe\x91\xa4\xdf\x2d\x62\x13\x56\xd9\x22\xd3\x8e\xcf\x01\x22\xde\xee\x60\xea\x3a\x74\x93\x68\xb4\xa8\x30\xf1\xd5\xb7\x5c\x5c\xca\x41\x83\x2f\xca\x5b\x35\x97\xbd\x4b\x4f\x16\x58\x72\xca\x7e\x0b\x4f\xbd\x24\x6b\xa2\xea\xd4\x9d\x0d\x4e\x3a\x39\xb3\x50\x2d\x55\xd4\x42\xb5\xe2\xca\xbe\x7d\x82\x4d\x09\x5e\x81\xd5\xa6\x00\x9d\x09\x62\x01\xba\x42\x39\xe8\xc6\x41\x19\x9c\xd8\xb0\x96\xd3\x1d\xa7\x7b\x10\x43\x7f\xef\x1a\x32\x67\xa2\x59\x43\x9e\xfa\xfe\x8c\xdf\xd3\xd6\x8f\x6d\xcb\x50\x46\x77\xe0\x43\xec\xd4\xfb\x6c\xfd\x58\x53\x33\xd3\x6d\x9d\xf9\xc9\x75\x3a\x1b\x2c\x23\xd0\x3f\xb2\xce\xa6\xaf\x3f\xec\x90\x73\x2f\xe8\x5a\xed\x47\xbe\xb0\x9f\x1a\x68\x60\x7c\xb0\xa3\x4c\x3b\xbd\xff\x9c\x2b\xc5\xad\x2c\x73\xbe\x91\xbf\x23\x9d\x70\x1e\xd9\x7f\x5d\x55\x8a\x19\xaf\xd2\x46\x42\x30\xd7\x2d\x15\xf7\x0f\x18\xfd\xee\x14\xba\x43\x0e\x5b\x23\xee\x23\xd6\xed\x0e\xa5\xae\x43\x37\xc9\x44\x8b\x1a\x31\x4f\x27\xca\x35\x62\x13\xb8\x10\x47\xcc\x2d\x62\x08\xca\x9e\x4f\x92\xf7\x91\x6c\x65\xde\xe0\xd9\x84\x0b\x58\x10\x56\x2b\x6a\x41\x58\x71\xa5\xa3\xea\xef\x5e\x49\x9b\x38\x33\x6e\x51\x58\x50\xda\x0a\xaf\x0d\x5d\xe9\xd5\x36\x5b\xb2\x6e\x5e\x7a\xcc\xd2\x2c\xa3\x77\x1d\xd3\x01\xbd\xbf\xe9\xd8\x86\xf4\x89\x66\x01\xf6\xdd\xc7\xd5\xa1\x83\x43\x14\xfe\x57\xfe\xb3\xf1\x9e\xea\xd7\xef\xe5\x3f\xa8\x9d\x0b\x19\x2e\x7e\x52\xf5\x2b\x6a\x6f\x07\x4d\x3d\xf4\x47\xec\x9d\xed\xcc\x7e\xa5\x6f\xae\xaa\x3b\xc5\x98\x21\x0e\xc1\x8a\x20\x28\x98\x28\x23\xa4\xc9\x8c\x3a\x40\x9b\x1f\x9e\xe9\x54\x7d\xad\x67\x59\x19\x02\xee\x65\x21\xec\xed\x61\x1c\x89\x44\x12\xb9\x75\xf9\x2b\xa2\x6d\x83\x83\xcf\x28\x58\x51\xe4\x7e\x07\xfe\xf6\x56\x45\x04\xef\xb7\x88\xb4\x24\x5d\xe0\xc0\xe3\x3f\x7c\xd1\x28\xdf\x22\x0c\x7d\x24\x6b\x58\x91\xb1\x15\x8b\x52\x77\x2a\x6b\x68\xfc\xe7\x85\xde\xdc\x94\x60\xa9\xc3\x49\x27\x70\xb5\x63\x15\xd2\x79\xca\xa7\xf1\x74\xaf\xe5\xd2\x29\x93\x97\xa6\x1c\x90\xff\x60\x48\xa3\xcc\x22\x74\x5b\xe1\x02\xef\xf4\xe8\x16\x14\x94\x89\x4e\x07\x48\x30\x60\xc7\xed\x1c\xa4\x84\x1d\x07\x8a\x4c\xbd\xc5\xe9\x32\x46\x7b\xc1\x9d\x86\xd3\xf3\x4c\xb9\xef\x95\xd0\xae\x78\xad\xfc\xaa\xf4\xba\xe6\x3d\xb0\x4f\xb6\x91\x93\x61\x9d\x4a\xed\x76\x8e\x55\x79\xcb\x64\x2f\x3e\x76\x62\x49\xd6\x60\x3d\xcd\x68\x2d\x39\xb6\xef\xca\x3b\xe1\x6a\x2c\x87\x93\xbe\xa8\x36\x1c\xda\xb7\xd2\x8f\xb7\x6e\xc3\x8c\xbb\x85\xda\x9f\x39\xeb\x41\x05\xda\x80\x73\xa2\x6d\x9b\x0d\x5a\x42\xf5\x2f\x25\xd5\xc4\x3c\x52\x88\x69\xa6\x35\xd7\xaa\x02\xaa\xea\xb6\x92\xe5\xcb\x98\xc5\x8b\xec\xdf\xa7\xff\x07\x00\x00\xff\xff\x5a\xc1\x79\x6a\x43\x92\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 37443, mode: os.FileMode(436), modTime: time.Unix(1452781053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

