// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// swagger-spec/service_manager_api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5f\x73\xdb\xb8\x11\x7f\x6e\x3e\x05\x46\xed\x93\x27\x31\x9d\x6b\xee\x66\x9a\xa7\xfa\xe2\x6b\x47\x73\x99\x5c\xa6\x6e\x9e\xd2\x8c\x0d\x91\x90\x84\x2b\x45\xf2\x08\x30\x8e\xeb\xf1\x77\x2f\x00\x82\x32\xff\x00\x12\x40\x82\x12\x1d\x41\x0f\x89\x87\x5a\x2c\x76\x17\xbb\x3f\xec\xe2\x0f\xf5\xf0\x02\xb0\xcf\x8c\xdc\xc1\xd5\x0a\xe5\xb3\xb7\x60\xf6\xc3\xf9\xc5\xec\x65\xf9\x14\x27\xcb\x94\x3d\x2a\x69\xc4\x93\x08\x91\x30\xc7\x19\xc5\x69\xc2\x69\x3f\x25\xf8\x2b\xca\x09\x8c\x01\x41\xf9\x57\x1c\x22\xb0\xc8\xd3\xff\xa2\x1c\x6c\x60\x02\x57\x68\x83\x12\x0a\x2e\x3f\xce\x25\x3f\xc1\x81\xd3\xcb\xd6\x17\xe7\x17\xe7\xaf\xeb\xdf\x51\x4c\x63\x24\xf8\x5e\xff\x5c\x67\x01\x33\xdc\x20\x43\xf9\x86\xfc\xb6\xbc\x2e\xbb\xe4\xf4\x6b\x4a\x33\xf2\x36\x08\x56\x98\xae\x8b\xc5\x79\x98\x6e\x82\x75\x16\xc6\x69\x11\x05\xe1\xf2\x55\x41\x16\xf5\xe6\x61\x9a\x50\x18\xd2\x86\x62\xe2\x0b\xb4\x81\x38\x16\xec\x58\xa3\x08\x7d\xfd\xfb\x3a\x43\x9c\xd7\x6c\x4b\xf6\x58\x63\x13\xb3\xbe\x13\x82\xba\x6c\x12\xb8\x11\x42\x5d\x66\x30\x5c\x23\xf0\x64\xcf\x2d\x45\x91\xc7\x95\xd4\x4c\xe8\xbb\xbb\xbb\x73\x28\x68\xcf\xd3\x7c\x15\x48\xbe\x24\x78\x3f\x7f\xf7\xcb\x87\xeb\x5f\x5e\x31\x06\xe7\x6b\xba\x89\x6b\x62\xbc\xa8\x09\x33\x23\x28\x2c\x72\x4c\xef\xaf\xd0\x12\x27\x98\x0f\x0d\x69\x0e\xda\x65\x41\xd7\x69\x8e\xff\x07\xe5\xb0\xb5\xe4\xa5\xf7\x99\x90\x97\x59\xf9\x57\x74\xdf\x96\x15\x8b\xa1\x5a\x23\x18\x31\xf7\x78\xa9\xd1\xb4\xd1\x41\x8b\xa8\xed\x32\x97\x97\xe0\xdf\xcc\x47\x92\x7d\xea\x30\xe2\xcf\x5b\x92\x96\xc8\x6d\x8d\x3e\x7f\x69\x31\xfb\x22\x99\xb1\xb1\x26\xc5\x06\x91\x06\x33\xa6\x69\xc6\xac\x2c\x1a\x07\xbf\x93\x54\x8a\x52\xb5\xc9\xf2\x34\x2a\x42\xcb\x36\x90\xae\x5b\x56\x0f\x8a\x2c\x82\x14\xdd\xb0\x36\x30\x4e\x57\x5d\xbb\x67\x29\xe9\x3a\xa1\xd2\x64\x82\x11\x01\x74\xbd\x8d\x2f\xc9\xf4\x3f\x6d\x6b\x8b\xe6\x69\x86\x72\x21\xe8\x3c\xe2\xcd\x4b\x39\xde\x49\x31\x14\xf4\x39\x22\x59\xca\x5d\x4e\x29\x8d\x20\xf9\xe1\xe2\x42\xfb\xa5\x4a\xe4\xeb\x22\x64\x16\x24\xcb\x22\x06\x15\xf7\x99\xb2\xf1\x63\x57\x1e\xc1\xef\x47\xcb\x0e\x3f\x25\xe8\x5b\x86\x42\x8a\x22\x80\xf2\x3c\x6d\xbb\x6a\xa3\x29\x61\xa1\xb6\x81\x3b\xd9\x0b\xba\x2a\x30\x08\xcd\x71\xb2\x52\xcb\x2f\x74\x50\x6b\xd6\x79\xda\x7c\xf2\xa8\x44\x95\xa0\x83\xb9\xe2\xf1\x0a\x99\xb9\xca\x3f\x11\x25\x80\xb3\xc8\x37\xc2\x03\x00\x5c\xa4\x05\x15\x9e\xc3\x30\xf5\xdc\xc8\x5f\x58\x5f\x73\x2e\xc4\xf1\x3c\xc5\xc1\xd8\xfd\x25\x47\x4b\xce\xfe\xcf\x41\xf4\x04\x8b\xa5\x71\x6d\xc7\xd1\x7b\x68\xd3\x43\xa3\x5c\x4c\xfa\xa3\x38\x29\xfc\xca\xa6\x60\xb8\x88\x11\xb8\x95\xdd\xdc\x9a\xfa\xec\x95\x14\xeb\x59\xbb\xed\x76\x2e\xce\x73\xd8\x9e\x8a\x3b\xc4\x98\xa2\x8d\x5e\xa5\x06\xa9\x3a\x1c\x4a\x13\xeb\xdd\x86\x7f\xd4\xae\xa3\xff\xe6\x84\xc3\xe5\x65\xcf\xf9\xfd\x5d\x8e\xd8\x04\x0d\x20\x48\xd0\x1d\x28\xc7\xc4\xc8\xe9\x43\xd1\xae\xf4\x7b\x15\x79\x06\x73\x96\xa0\xd1\x32\x56\x3f\x2b\x75\xda\x31\x1e\x55\x72\x17\xe9\xf8\x6f\x29\xcb\x14\x71\x91\x46\xbb\x3c\xb6\xad\x74\x29\x36\xa0\x29\x58\x20\x50\x6a\x12\xed\x6a\x9e\xa3\x3f\x0a\x9c\x23\xae\x38\xcd\x0b\x34\xda\x14\xb1\x2f\x26\x4c\x7d\xe3\x4b\x5f\x1c\x7a\x6d\x15\x26\xd2\x8c\x06\x06\x3c\x8a\x59\x34\x60\xf0\xe6\xe2\x6f\x56\x5a\x5e\xca\xb0\x00\x77\xac\xc0\x13\x13\x05\x61\xde\x09\x78\x3c\x03\x18\x33\xdd\xa3\x7b\x80\xbe\x61\x42\x89\xcf\x32\x6d\xe6\xf0\xe0\xa1\xfc\xe3\x06\x47\x8f\x83\xe6\x73\xa0\x45\x09\xed\x4c\x3d\x36\x62\x31\x9d\xf6\x83\x16\xaf\xdb\xec\x41\x6b\x7e\xe5\x06\xa9\x4c\x86\xde\x21\xb2\xd8\xf9\xfa\x6f\xbf\x3e\x1f\x34\x79\x63\xa5\xd9\x87\x94\x82\x7f\xa4\x45\x12\x79\xb0\xd8\x93\xc1\x14\x36\x0b\x14\xe6\x18\x50\xae\x48\x78\x18\x90\x94\x46\x30\xa0\x6e\x3f\x91\xfc\xad\x1c\x50\x9f\xbf\xd9\xa3\xac\x34\xa3\x81\x01\x4f\x10\x71\x7d\x9a\xf8\x44\x77\x58\xe4\x8f\x50\xcc\xf0\x77\x14\xf0\x2f\x59\x7b\xf0\x97\x94\x07\xce\x01\xed\xe2\x56\xea\x5a\x0e\x99\x75\xf0\xfa\xac\xac\xad\xc3\xc8\x25\x5c\xb0\xc0\x54\xb1\x2e\x6b\x9e\xc6\xc5\x29\x8c\x2a\x0c\x15\xbc\x4c\x72\x39\xde\xc8\x87\xb3\xa4\x1c\x37\x97\x23\x6b\xb8\xdf\x00\x7c\x5d\xfd\x0a\xd2\x9d\x94\x2d\x23\x2c\x71\xcc\xe6\xca\x35\x7c\x0d\x16\x90\xa0\x9f\xde\x00\x94\x84\x69\xe4\x2a\xa1\x1b\xd7\x26\x5c\xf6\x51\x8c\x22\x3d\x03\x7d\x43\x61\x41\xf9\x9e\x84\x5b\x6b\x08\xb9\x07\xc0\xbd\x72\x6b\xbb\x41\xb1\x29\x62\x8a\x59\xfc\xd1\x80\x6b\xff\x2a\xe2\xea\x1f\x3d\xcf\xe5\x68\xe1\xa7\x12\x2d\xdd\x64\xa6\x12\xe6\x5e\x4b\xbc\xba\xd1\xc8\xdd\x63\x6d\x10\x94\x1c\x81\xe4\x68\xb1\x52\x78\xad\x6d\xe1\x27\x97\xce\xe7\x3b\x5e\x2f\xac\x9c\xf1\x79\x15\xb1\x1e\x55\x6a\xa8\x12\x61\x18\xbb\xc1\x14\xcc\x0f\x1d\xda\x40\x09\x6b\xe0\x81\x44\x52\x9e\x2e\x90\xd4\xfc\xcf\xc3\x48\xd5\xf4\x19\xc0\xc8\x0d\x4e\x08\x85\x49\xa8\x70\x34\xbb\x73\x47\x32\x19\xd9\xb2\x03\x2c\x37\x06\xd0\xe6\xd8\xc5\x36\x2f\x99\x6f\x45\x3a\x2e\xa2\xf4\xc1\x8a\x12\x85\xfe\x28\x50\xbe\x73\xd1\xdf\x43\x4a\x8d\xee\x18\x87\xb3\xb6\x7e\xef\x4f\x69\x19\x6a\xb6\x0f\x65\x06\x9f\xd2\x6a\x21\x88\xe5\x41\xad\xf9\x8e\x66\x6e\x31\x43\xdf\x91\x4e\xc5\x96\x66\xe6\x87\xb3\xcc\x76\x10\x0f\xbb\x05\x68\x10\x39\x13\x3b\xcb\x55\xb9\xc6\xa1\x4e\x73\xf5\xb7\x90\xa3\xfd\xba\x77\x69\xb2\x8c\x71\x48\x7d\x26\xd4\x2b\x13\x7a\xaa\xac\xe4\x93\xc1\xc7\xb8\x48\x73\xad\xa6\x28\x41\x8c\xf4\x4b\x8b\x0e\x86\x70\x63\x16\x5c\x55\x48\xfa\xca\x6b\xaa\x90\xe3\xab\xaf\xb6\x0e\x6e\xf2\x22\xbb\xb3\x5f\x9d\xb4\xc8\xe2\x6a\x9a\x87\x8d\x49\x1c\x11\xbb\x29\x41\xdf\xf9\x49\xb1\xcb\xa8\xda\x53\x36\xe8\xe1\xf4\x72\x44\xeb\x7b\x47\xe5\xb5\xa3\x43\x5c\x97\x7b\xde\x98\xed\xb3\xd1\x8e\x0e\x4e\x66\x06\x8b\xb3\x61\x57\x82\xb4\x57\xcd\x5c\x3f\x26\xe6\xa7\x86\xe9\x64\x94\xfe\x00\xd9\xf3\x0b\xe0\x01\xe5\x64\x90\x71\x81\x7a\xd7\x94\x1f\x59\xeb\xf2\xc5\x05\x16\x0b\xec\xbc\x4b\x1f\xf8\x53\x0b\x7c\xeb\x52\xd2\x07\xbb\x9a\xee\x28\xc1\x2e\xdf\xcf\x33\x74\xf7\x8c\x47\xb2\x38\x41\xcf\x24\x07\xb7\x92\xa9\xf1\x15\x7d\xf9\xc6\x9e\x9f\xef\xab\x58\x98\xab\xa2\xed\x88\x91\xbd\x77\x3f\xac\x35\x76\x4e\xe2\x58\x0d\x17\xb8\x06\x17\xd3\x0a\xed\x83\x96\x20\xd2\xc5\xfc\x4b\x3b\xf4\x4f\xad\xe2\x3f\x78\x90\x7f\x39\x58\x2b\xe6\x60\xb0\xc5\x80\xa7\x3b\x37\x38\x02\x67\x67\xf2\xf1\xfc\xea\xec\xcc\x0a\x1b\xc6\xc3\x83\x27\xbd\x9d\xcf\xf0\xf3\x2b\x90\x2e\xcb\xfb\x46\x5a\x2d\xb6\x6d\xbf\x93\x09\xfe\x39\xa3\x80\x4f\x36\xba\x3a\x38\x59\x1a\xb0\x5b\x34\x76\x89\x20\xe5\x4a\xb2\x07\x91\x0e\xe5\xc8\x17\x52\xf6\x8b\xda\x6b\xcd\x58\xee\x2a\x38\xb5\xc4\x71\x20\xc8\xe3\x33\xff\x4c\x12\x9f\xfd\x02\x71\x47\x07\x97\x29\x67\x16\xc3\x64\x68\xbd\x79\x2b\x98\xdc\x5a\xa5\x90\x1f\x45\xbf\x27\x50\x57\x2e\x61\x4c\xec\x0b\xcb\xf9\xa9\x15\x96\x87\x3d\xb6\xc9\x1d\xd6\x9f\xd5\x34\xd4\x6c\x00\xb0\x04\x0f\xfc\x3f\x57\x55\x2c\xe7\x55\x4b\x40\xcf\xce\xf8\x03\xeb\xe2\x95\x23\xcf\x78\xc0\x23\xf5\x1d\x31\xf1\xcc\xd4\xf2\x6f\x1b\xfa\xd2\x75\xc7\xa7\x17\x1e\x4c\x32\x2f\x3a\x01\x60\x71\x50\xb7\xf2\x81\x6d\x95\xac\x15\x68\x88\x3b\x25\xb5\x4a\x6e\x70\x41\xeb\x81\xa5\xa2\x1c\xb7\x9c\xdd\x27\xe7\x90\x5a\xd6\x9d\x0d\x8e\x00\x48\x1e\xaa\x3d\x54\xeb\xe8\x8e\x73\x78\x01\xb3\xe2\x67\x68\x71\x29\x98\x18\x16\x97\x97\x71\x7c\x25\xfa\xf4\x85\xa5\xdf\xb1\x2c\xe9\x0e\x7c\x1f\x90\x79\x9f\x2f\x2c\x0d\x35\xb3\xcd\xff\xec\x2f\x01\xf2\xf7\x0f\x2c\x95\xba\x6a\x6e\xff\xf1\xe1\x1b\x0f\x3b\xd4\xdc\xb7\x74\xbd\x12\x97\x0f\xfc\x75\xf4\x7b\x18\x1f\xec\xbc\xf6\x4e\xef\x9f\xd8\x45\xbe\xc3\x1e\xd2\xee\x63\x99\xd3\x8d\xfc\x1d\xe9\x44\xf0\x20\x5e\x0f\xe1\x68\x49\x89\xf3\x6a\x2c\x29\x49\xe6\xa6\x6b\x4a\xe3\x03\xc6\xb8\x35\x9f\x3b\xe4\xf0\x8b\x49\x63\xc4\xba\xaf\x50\xba\x3a\xb8\x49\x26\x7a\x2c\x26\x89\x74\xa2\xb9\x98\x64\x03\x17\xf2\x1e\x9d\x47\x0c\x49\x39\xf2\x75\xb9\x31\x92\xad\xd2\x1b\x22\x9f\x70\x01\x0f\xc2\x7a\x45\x3d\x08\x6b\x9e\x0c\xbd\xa4\xe6\x22\x69\x93\x57\xd6\x3c\x0a\x4b\xca\x49\xdf\x4c\x53\x41\x86\x0f\x5d\x35\xdd\xc1\x4a\x32\xf1\x57\xf5\x43\xc0\x91\xee\xf7\x8c\xd5\x3f\x91\x5a\x09\x99\x2e\x7e\x67\xea\xb7\xd4\xae\x7b\x6d\x37\xf6\x66\xe5\xaf\xea\xde\xc0\x0c\xdf\x54\xbf\x4f\xfd\xf2\xc5\x9f\xd8\x67\x56\x90\xc5\xf6\x51\xa3\xdd\x97\x76\xd6\x97\x73\x34\xa0\x58\xe3\xa3\xaa\x2e\x34\x76\xdf\x6b\xee\xc7\x52\x36\xd0\x10\xae\x37\x33\x83\xf2\x98\x6c\x7f\x69\xdb\xa1\xcd\x8d\x96\xbb\x4b\xdc\x1b\x64\x78\x1c\xe9\x41\xc3\xc0\xd2\x26\x72\x9b\xf2\xd7\x84\xf8\x06\x27\xef\x51\xb2\x62\x78\xfd\x16\xfc\xf5\x27\x1d\x11\xfc\x56\x23\x32\x92\x74\x81\x93\x48\xbc\xb7\x7c\xaf\x7c\x8b\x34\x8d\x91\x6a\xf3\x4b\xc5\x56\x4e\x45\xee\x54\x36\xd0\xf8\xc7\x0b\xb3\xb1\x69\x60\xa1\xc3\x41\xa7\x70\xb5\x63\xee\x31\xd9\x08\x30\xd8\x00\xe8\x39\x61\xaa\xe4\x65\x89\x06\x14\xef\x7b\xdf\x2b\xb3\x0c\xdd\x5e\xb8\x20\x36\x4c\xdd\x82\x82\x36\xbd\x71\x80\x04\x13\x76\x5c\xe7\x20\x25\xed\x38\x51\x64\x1a\x2d\x4e\x97\x39\x1a\x04\x77\x06\x4e\x2f\xf2\xe3\xb1\x67\x42\x3f\xe3\xf5\xf2\xab\xc6\x6b\xeb\x06\x60\x9f\xaa\x7c\x53\x61\x9d\x4e\xed\x7e\x8e\xd5\x7a\xdb\xce\x28\x3e\xf6\xcc\x92\xac\xc9\x7a\x9a\xd5\x5c\x62\x98\x62\xe4\x2b\x44\x3f\xfd\xeb\xfd\x20\xb6\xbc\x2e\x18\x35\x0e\xd4\x07\x6f\x3a\x2c\xa7\x93\x0a\xe9\x8a\x17\xe3\xae\xcc\x63\xd7\x6d\xc8\x0a\x17\xd3\xc7\x86\x60\x3d\xa9\xa0\x9d\x70\x7e\x55\xb7\xd9\xa4\x25\xd4\xbf\xe6\xbe\x23\xe6\x91\x42\xcc\x30\x45\xd2\xfe\xca\x87\xae\x5b\xc5\x54\x68\xcd\xe2\x45\xf9\xef\xe3\xff\x03\x00\x00\xff\xff\x3e\x1e\x51\x28\xd6\x8c\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 36054, mode: os.FileMode(420), modTime: time.Unix(1460720745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSpecService_manager_apiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdf\x6f\xdb\x36\x10\x7e\x96\xff\x0a\x42\x1b\xb0\x0d\x08\xe2\xb4\x18\xf6\xb0\xb7\x22\x29\x86\x0c\x58\x17\x34\x05\xf6\xd0\x04\x01\x2d\x9d\x6c\xd6\x32\xa9\x91\x94\xbd\x20\xf0\xff\xbe\x23\x45\xea\xa7\x2d\xc9\xcb\x80\xda\x4d\x1e\xea\x5a\xd4\xf1\x78\xf7\x7d\xdf\x9d\xce\xca\xd3\x24\x08\xd5\x86\xce\xe7\x20\xc3\x5f\x49\xf8\xf6\xfc\x22\x3c\xc3\x25\xc6\x13\x81\xd7\x78\x37\x08\xd7\x20\x15\x13\xdc\xdc\x5e\xbf\x31\x77\x83\x50\x33\x9d\x82\x59\xb8\xa4\x9a\xa6\x62\x4e\x6e\x41\xae\x59\x04\xe4\x0f\xca\x29\xba\x22\xef\x6e\xae\x0b\xcb\x18\x54\x24\x59\xa6\x9d\x83\x4f\x0b\x20\x09\x93\x4a\x13\xe7\x95\x88\x84\x68\x5c\xec\x71\x74\x4e\xee\xf8\xa7\x05\x53\xe6\x3b\xd9\xb0\x34\x25\x33\x20\x74\x4d\x59\x4a\x67\x29\x10\xf4\xd1\xe7\x20\x12\x5c\x53\xc6\xf1\xdb\x66\xc1\xa2\xc5\x1d\x97\x39\x57\x04\x4d\xf9\x9c\x28\x16\x03\x79\x14\xb9\x24\xca\xed\xa2\x3c\xb6\xdf\x41\x11\x25\x56\xe0\xa3\xf3\xb7\x57\xd6\xe9\x0a\xb8\xc6\x98\x22\x9a\xd1\x19\x4b\x99\x66\xa0\xce\xef\x78\x38\x09\xb6\x06\x3a\x3c\x50\xe5\x2b\x50\x98\xee\x67\x83\x00\xcd\xb2\x94\x45\xd4\x20\x30\xfd\xa2\x84\xb1\xbb\x37\x76\x99\x14\x71\x1e\x0d\xdb\xa9\x68\x01\x35\x77\x0b\xad\xb3\xd2\x05\xd5\x0b\xe5\x69\x9a\xd2\x18\x31\xd5\x4c\x81\x5b\xc1\xfb\x42\x69\x7f\x11\x84\x22\x03\x69\xdd\x5f\xc7\x86\x8a\xd2\xdc\x21\x67\xf9\xea\x32\xf6\xce\x9b\x95\x20\x88\x24\x01\xc9\x78\xb9\x21\xa3\x92\xae\x40\x23\x9f\x26\xc6\x7b\xb7\x2a\x41\x65\x88\x04\xa8\x32\x80\x20\x7c\x7b\x71\x51\x5d\xf5\x9c\x14\x39\x2e\xc5\x32\x2c\x6c\xb7\x67\x13\xbf\x25\xa1\x79\xaa\x7b\xbc\xcc\x01\xb9\x66\x11\x01\x29\x85\x24\x3e\x0a\x17\x6b\xe0\xe0\xa4\x35\x07\x41\xf8\xbd\x84\xc4\x6c\xfd\x6e\x8a\xee\x19\x67\xc6\x95\x9a\xbe\x37\x0e\xdc\xf9\xc1\x76\x52\xfb\xcf\x7e\x9a\x0f\x1b\x56\x38\xdd\x08\xb9\x54\x19\x8d\xaa\x5c\x5b\xc8\x6b\x3a\xf7\xfc\x99\xcb\xd2\xbe\xf0\xee\x11\x6b\xf1\x13\x49\xa0\x1a\xfe\x2a\x6d\x77\xd3\x73\x69\xad\x08\x87\x0d\xd9\xb4\x4d\x9b\xc4\x78\x12\x38\xae\x55\xfe\x1f\xca\x5d\x0f\x12\xfe\xce\x01\xc3\xf6\x58\x33\x7b\xc0\x4c\xc4\x8f\x61\x05\x7f\xa7\x9a\xbd\x2a\x7e\xbf\xfd\xf3\x83\xa9\x25\xb2\xa1\x58\x1d\x5a\x10\x0b\x81\xdf\xd8\x41\x7d\x0f\xe8\xae\x7a\x5d\xf1\x96\xc9\x17\x59\x7e\x74\x01\xb6\x34\x61\xe2\x66\x12\x0c\x68\x5a\xe6\x50\x50\xd4\x2f\xc3\x37\x3d\x02\x2a\x70\xe9\xa0\x79\x88\x74\xf6\x64\xf1\xd1\x8b\xb1\x25\xaa\x13\x11\xf7\xf4\xa9\xd2\x0a\x8b\xb7\xa5\xd6\xe7\xf0\x5c\xa9\xa3\x87\x21\x9d\xff\x06\xda\x76\xe2\x18\xb0\x9b\xa7\x8a\x24\x98\xbf\xed\xcc\x19\x44\x2c\x61\xc8\xfe\x28\xd1\xd7\x33\x68\x09\xdd\x34\xd3\x7d\x42\x2f\xa3\x23\xd7\x57\xe1\x1e\xdd\xf9\x65\xfd\x98\xd9\xa3\x94\xb6\x4d\x72\x8c\x1c\xfb\xba\xa2\x4f\x18\x9f\x44\x65\xae\xa4\x8d\xd6\xcb\x12\xa7\xf5\x88\xa7\xa7\x48\xf3\x33\x95\x57\x38\x19\x12\xdf\x95\xb5\xaa\xe1\x7f\x60\xab\x3d\x45\xd5\xd9\x8c\x5b\x20\x1e\xa5\x1a\x46\xb4\xaa\x29\xce\x64\x1c\x22\xeb\x6f\xdc\x23\xba\xda\x30\xe2\x19\x7d\x59\x19\x0f\x3e\xa4\xa3\x8e\xed\x71\x4a\xe7\x8c\x74\xe6\x85\x32\xf2\x07\x37\x3a\x1c\xdf\xc0\x50\x31\xf1\x15\x26\x86\x0e\xb5\xff\xbd\x2b\x57\x79\x9c\x50\x5b\x3e\xb0\x10\xa7\x4f\x35\x45\x8d\x9d\x27\x46\xd6\x25\xba\x18\x2c\xca\x13\x9f\x28\x7a\x0b\xf4\xa0\x50\xaa\x7d\x47\x32\xdd\xbc\xf4\x42\x1a\x35\xdf\x8c\xac\x84\xc2\xcb\x60\x31\x74\x26\x9c\x6f\xe2\x39\x75\x42\x65\x60\xe1\x6f\x73\x7a\x94\xea\x9c\xd8\x7f\xf6\x55\x57\x6d\x9b\x73\x1c\x0e\xfd\xba\xf0\x4d\xde\x03\x28\x66\x5f\x30\xe3\x22\xcc\x3a\xd8\x9f\x9d\xe8\xa4\xc0\xa7\x88\x42\x8c\x1f\xec\x0e\x87\xb0\xd2\x54\xe7\xca\x06\x59\x80\x6e\x0c\x33\xf3\xf6\xa8\x06\x7a\x67\x73\xc5\x46\x8b\x3e\x8f\x32\xf0\x7c\x55\x95\x58\x10\x7e\x10\xbc\x86\xe0\x95\xe3\xa0\x5c\x78\xff\x8f\x06\xae\x2a\xb6\xee\xf7\x28\xeb\xa6\x8c\x83\xd8\x83\x27\x35\x6a\x7d\x2a\x07\xc7\xc6\x1b\xb1\xe5\x7c\xc9\xc5\xa6\xde\x2f\xf3\xc8\x9c\x99\xe4\x69\xb5\x96\x60\xab\x45\x70\x5d\xb0\x8d\x28\x5c\x1f\xde\x11\x46\x9d\xa0\x6e\x6a\x4b\x78\x24\x6b\x9a\xe6\xe6\xd5\x68\x46\x36\x4c\x2f\x6a\x22\x2e\x1f\xad\x3f\xde\x36\xde\x9f\x4a\xfc\x5d\xc1\x7f\xd0\x84\x71\xec\x26\x99\x6c\x3d\x87\xdd\x2b\x57\xe3\x8f\xe9\xe2\x7d\xaf\x02\x1e\xe3\x22\x53\x64\x46\xa3\xa5\x99\x15\x8d\x85\x1b\x3f\xd1\x1d\x55\x84\xa9\x9f\xca\x18\x69\x1c\x5b\x51\xd2\xf4\xa6\xab\x0a\xd3\x0b\x34\xac\x54\xa3\x12\x76\x95\x73\xff\x8c\x33\xea\x45\xd5\x81\x62\x6f\xf4\xd0\x01\x6d\x37\x6c\x07\xc5\xb3\xb7\xeb\xba\x83\x5e\x75\xf0\xff\xe8\x60\xc7\xb8\xf1\xda\xf0\x5e\x1b\xde\xb7\x2c\xf4\x67\x75\xbc\xe6\xac\x36\xa0\xee\xa6\xf1\xa1\x3d\xaf\x8a\xf8\xb5\xe9\x3d\x57\x0b\xc5\x88\x78\x20\xd7\x2b\xac\x4e\xcc\x7f\x98\xe5\x78\x57\xe3\x32\x70\x99\xbf\x51\xfb\x34\xf1\xd7\xfa\x8a\x6a\x77\xe7\x97\x9f\x9b\x84\xfa\xa3\xf6\x6a\xa4\x95\x14\x8e\xb3\x93\xed\xbf\x01\x00\x00\xff\xff\x5c\xdd\x9a\x6b\x0a\x1f\x00\x00")

func swaggerSpecService_manager_apiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecService_manager_apiJson,
		"swagger-spec/service_manager_api.json",
	)
}

func swaggerSpecService_manager_apiJson() (*asset, error) {
	bytes, err := swaggerSpecService_manager_apiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/service_manager_api.json", size: 7946, mode: os.FileMode(420), modTime: time.Unix(1461151802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
	"swagger-spec/service_manager_api.json": swaggerSpecService_manager_apiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
		"service_manager_api.json": &bintree{swaggerSpecService_manager_apiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

