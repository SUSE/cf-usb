// Code generated by go-bindata.
// sources:
// swagger-spec/api.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSpecApiJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xc0\x5c\xfb\x74\x63\x8b\xe7\xd4\xc9\x4c\xfd\x54\xc5\x4a\x3b\x9a\x64\x1c\xcf\x5c\xf3\xe4\x7a\xee\x20\x12\x92\x90\x52\x24\x43\x82\x3e\x5f\x6f\xee\xbb\x17\x00\x41\x1e\xff\x00\x12\x40\x82\x12\x15\x41\x0f\xf6\x0d\xb5\x58\xee\x2e\x76\x7f\xbb\x0b\x02\xd4\xd3\x2b\x40\x3f\x57\xd9\x03\xdc\x6c\x50\x7a\xf5\x1e\x5c\x7d\x37\xbb\xb9\x7a\x5d\x5c\xc5\xd1\x3a\xa6\x97\x0a\x1a\x7e\x25\x40\x99\x9f\xe2\x84\xe0\x38\x62\xb4\xbf\x45\xf8\x2b\x4a\x33\x18\x82\x0c\xa5\x5f\xb1\x8f\xc0\x2a\x8d\xff\x8b\x52\xb0\x83\x11\xdc\xa0\x1d\x8a\x08\x98\x7f\x5a\x0a\x7e\x9c\x03\xa3\x17\xa3\x6f\x66\x37\xb3\xb7\xf5\xef\x08\x26\x21\xe2\x7c\x6f\x7f\xac\xb3\x80\x09\x6e\x90\xa1\x74\x97\xfd\xba\xbe\x2d\x6e\xc9\xe8\xb7\x84\x24\xd9\x7b\xcf\xdb\x60\xb2\xcd\x57\x33\x3f\xde\x79\xdb\xc4\x0f\xe3\x3c\xf0\xfc\xf5\x9b\x3c\x5b\xd5\x87\xfb\x71\x44\xa0\x4f\x1a\x8a\xf1\x2f\xd0\x0e\xe2\x90\xb3\xa3\x83\x02\xf4\xf5\x1f\xdb\x04\x31\x5e\x57\x15\xd9\x73\x8d\x4d\x48\xef\x1d\x65\xa8\xcb\x26\x82\x3b\x2e\xd4\x3c\x81\xfe\x16\x81\x17\x7b\x56\x14\x79\x1a\x96\x52\x53\xa1\x1f\x1e\x1e\x66\x90\xd3\xce\xe2\x74\xe3\x09\xbe\x99\xf7\xcb\xf2\xc3\x4f\x1f\x6f\x7f\x7a\x43\x19\xcc\xb6\x64\x17\xd6\xc4\x78\x55\x13\xe6\x2a\x43\x7e\x9e\x62\xf2\xb8\x40\x6b\x1c\x61\x36\x35\x59\x73\xd2\xe6\x39\xd9\xc6\x29\xfe\x1f\x14\xd3\xd6\x92\x97\x3c\x26\x5c\x5e\x6a\xe5\x9f\xd1\x63\x5b\x56\xcc\xa7\x6a\x8b\x60\x40\xdd\xe3\xb5\x42\xd3\xc6\x0d\x5a\x44\x6d\x97\x99\xcf\xc1\xbf\xa9\x8f\x44\x87\xd4\xa1\xc4\x9f\x2b\x92\x96\xc8\x6d\x8d\x3e\x7f\x69\x31\xfb\x22\x98\xd1\xb9\xce\xf2\x1d\xca\x1a\xcc\xa8\xa6\x09\xb5\x32\x1f\xec\xfd\x9e\xc5\x42\x94\x72\x4c\x92\xc6\x41\xee\x1b\x8e\x81\x64\xdb\xb2\xba\x97\x27\x01\x24\xe8\x8e\x8e\x81\x61\xbc\xe9\xda\x3d\x89\xb3\xae\x13\x4a\x4d\xc6\x19\x65\x80\x6c\xab\xf8\x12\x4c\xff\xd3\xb6\x36\x1f\x1e\x27\x28\xe5\x82\x2e\x03\x36\xbc\x90\xe3\x83\x10\x43\x42\x9f\xa2\x2c\x89\x99\xcb\x49\xa5\xe1\x24\xdf\xdd\xdc\x28\xbf\x94\x89\x7c\x9b\xfb\xd4\x82\xd9\x3a\x0f\x41\xc9\xfd\x4a\x3a\xf8\xb9\x2b\x0f\xe7\xf7\xbd\xe1\x0d\x7f\x8b\xd0\xb7\x04\xf9\x04\x05\x00\xa5\x69\xdc\x76\xd5\xc6\xd0\x8c\x86\xda\x0e\xee\x65\xcf\xe9\xca\xc0\xc8\x48\x8a\xa3\x8d\x5c\x7e\xae\x83\x5c\xb3\xce\xd5\xe6\x95\x67\x29\xaa\x78\x1d\xcc\xe5\x97\x37\x48\xcf\x55\xfe\x85\x48\x06\x18\x8b\x74\xc7\x3d\x00\xc0\x55\x9c\x13\xee\x39\x14\x53\x67\x5a\xfe\x42\xef\xb5\x64\x42\x9c\xce\x53\x2c\xcc\xdd\x5f\x53\xb4\x66\xec\xff\xe2\x05\x2f\xb0\x58\x18\xd7\x74\x1e\x9d\x87\x36\x3d\x34\x48\x79\xd2\x1f\xc5\x49\xe1\x57\x9a\x82\xe1\x2a\x44\xe0\x5e\xdc\xe6\x5e\xd7\x67\x17\x42\xac\xb3\x76\xdb\x2a\x17\xa7\x29\x6c\xa7\xe2\x0e\x31\x26\x68\xa7\x56\xa9\x41\x2a\x0f\x87\xc2\xc4\x6a\xb7\x61\x1f\xb9\xeb\xa8\xbf\xb9\xe0\x70\x79\xdd\x33\xbf\x7f\x48\x11\x4d\xd0\x00\x82\x08\x3d\x80\x62\x4e\xb4\x9c\xde\xe7\xe3\x0a\xbf\x97\x91\x27\x30\xa5\x05\x1a\x29\x62\xf5\xb3\x54\xa7\x3d\xf3\x51\x16\x77\x81\x8a\x7f\x45\x59\x94\x88\xab\x38\xd8\xe7\xb1\x6d\xa5\x0b\xb1\x01\x89\xc1\x0a\x81\x42\x93\x60\xdf\xf0\x14\xfd\x91\xe3\x14\x31\xc5\x49\x9a\xa3\xd1\x52\xc4\xa1\x98\xd0\xf5\x8d\x2f\x7d\x71\xe8\xad\x51\x98\x08\x33\x6a\x18\xf0\x24\x66\x51\x80\xc1\xbb\x9b\xbf\x1b\x69\x39\x17\x61\x01\x1e\x68\x83\xc7\x13\x45\x46\xbd\x13\xb0\x78\x06\x30\xa4\xba\x07\x8f\x00\x7d\xc3\x19\xc9\x5c\x95\x69\x92\xc3\xbd\xa7\xe2\x8f\x3b\x1c\x3c\x0f\xca\xe7\x40\x89\x12\xca\x4c\x3d\x36\x62\x51\x9d\x0e\x83\x16\xeb\xdb\xcc\x41\x6b\xb9\xb0\x83\x54\x3a\x53\x6f\x11\x59\xcc\x7c\xfd\xd7\x9f\xcf\x07\x4d\xde\x19\x69\xf6\x31\x26\xe0\x9f\x71\x1e\x05\x0e\x2c\x0e\x54\x30\xb9\xc9\x02\x85\x3e\x06\x14\x2b\x12\x0e\x06\x04\xa5\x16\x0c\xc8\xc7\x4f\xa4\x7e\x2b\x26\xd4\xd5\x6f\xe6\x28\x2b\xcc\xa8\x61\xc0\x0b\x44\x5c\x57\x26\xbe\xd0\x1d\x17\xf9\x03\x14\x52\xfc\x1d\x05\xfc\x0b\xd6\x0e\xfc\x05\xe5\x91\x6b\x40\xb3\xb8\x15\xba\x16\x53\x66\x1c\xbc\xae\x2a\x6b\xeb\x30\x72\x0b\xe7\xad\x30\x91\xac\xcb\xea\x97\x71\x61\x0c\x83\x12\x43\x39\x2f\x9d\x5a\x8e\x0d\x72\xe1\x2c\x28\xc7\xad\xe5\xb2\x2d\x3c\x6c\x00\xb6\xae\xbe\x80\x64\x2f\x65\xcb\x08\x6b\x1c\xd2\x5c\xb9\x85\x6f\xc1\x0a\x66\xe8\x87\x77\x00\x45\x7e\x1c\xd8\x2a\xe8\xc6\xb5\x09\x93\x7d\x14\xa3\x08\xcf\x40\xdf\x90\x9f\x13\xf6\x4c\xc2\xae\x35\xb8\xdc\x03\xe0\x5e\xfa\x68\xbb\x41\xb1\xcb\x43\x82\x69\xfc\x11\x8f\x69\xff\x26\x60\xea\x9f\xbc\xce\x65\x68\xe1\x52\x89\x92\x6e\x32\xa9\x84\xba\xd7\x1a\x6f\xee\x14\x72\xf7\x58\x1b\x04\x05\x47\x20\x38\x1a\xac\x14\xde\x2a\x47\xb8\xe4\xd2\xf9\xfc\x89\xd7\x0b\x4b\x67\x3c\xaf\x26\xd6\xa1\x4a\x0d\x55\x02\x0c\x43\x3b\x98\x82\xd9\xa6\x43\x13\x28\xa1\x03\x1c\x90\x08\xca\xcb\x05\x92\x9a\xff\x39\x18\x29\x87\x9e\x01\x8c\xdc\xe1\x28\x23\x30\xf2\x25\x8e\x66\xb6\xef\x48\x14\x23\x15\x3b\x40\x6b\x63\x00\x4d\xb6\x5d\x54\x75\xc9\xb2\x12\xe9\xb4\x88\xd2\x07\x2b\x0a\x14\xfa\x23\x47\xe9\xde\x45\x7f\x07\x29\x35\xba\x53\x6c\xce\xaa\xfc\xde\xed\xd2\xd2\xd4\xec\x10\xca\x0c\xde\xa5\xd5\x42\x10\xc3\x8d\x5a\xcb\x3d\xc3\xec\x62\x86\xfa\x46\x2a\x15\x5b\x9a\xe9\x6f\xce\xd2\x7b\x82\x78\xdc\x47\x80\x1a\x91\x33\xb1\xbd\x5c\xa5\x6b\x1c\x6b\x37\x57\x7f\x0b\x59\x7a\x5e\xf7\x21\x8e\xd6\x21\xf6\x89\xab\x84\x7a\x55\x42\x2f\x9d\x95\xb8\x32\x78\x1b\x57\xd6\x5c\xab\xc9\x0b\x10\xcb\xfa\x95\x45\x47\x43\xb8\x31\x1b\xae\x32\x24\x5d\xe7\x35\x55\xc8\x71\xdd\x57\x5b\x07\x3b\x75\x91\xd9\xde\xaf\x4e\x59\x64\x70\x34\xcd\xc1\xc6\x24\xb6\x88\xdd\x15\xa0\x6f\x7d\xa7\xd8\x3c\x28\x9f\x29\x6b\xdc\xe1\xf2\x6a\x44\xe3\x73\x47\xc5\xb1\xa3\x63\x1c\x97\x3b\x6f\xcc\x76\xd5\x68\x47\x07\x2b\x99\xc1\x60\x6f\xd8\x82\x93\xf6\xea\x99\xeb\xdb\xc4\x5c\x6a\x98\x4e\x45\xe9\x36\x90\x9d\x5f\x00\x0f\x68\x27\xbd\x84\x09\xd4\xbb\xa7\xfc\x44\x47\x17\x2f\x2e\x30\x58\x60\x67\xb7\x74\x81\x3f\xb5\xc0\x37\x6e\x25\x5d\xb0\xcb\xe9\x4e\x12\xec\xe2\xfd\x3c\x43\x9f\x9e\xb1\x48\xe6\x3b\xe8\xa9\xe4\xe0\x5e\x30\xd5\x3e\xa2\x2f\xde\xd8\xf3\xe3\x63\x19\x0b\x4b\x59\xb4\x9d\x30\xb2\x0f\x3e\x0f\x6b\xcd\x9d\x95\x38\x96\xc3\x05\xae\xc1\xc5\xb4\x42\xfb\xa8\x2d\x88\x70\x31\xf7\xd2\x0e\xf5\x55\xa3\xf8\xf7\x9e\xc4\x5f\x16\xd6\x8a\x19\x18\x54\x18\xf0\x72\xe6\x06\x07\xe0\xfa\x5a\x5c\x5e\x2e\xae\xaf\x8d\xb0\x61\x3c\x3c\x78\xd1\xdb\x7a\x86\x5f\x2e\x40\xbc\x2e\xce\x1b\x29\xb5\xa8\xc6\xfe\x49\x12\xfc\x39\xa3\x80\x2b\x36\xba\x3a\x58\x59\x1a\x30\x5b\x34\xb6\x89\x20\xc5\x4a\xb2\x03\x91\x0e\xe5\xc8\x07\x52\x0e\x8b\xda\x6b\xcd\x58\x3c\x55\xb0\x6a\x89\xd3\x40\x90\xc3\x67\xf6\x99\x24\x3e\xbb\x05\xe2\x8e\x0e\x36\x4b\xce\x24\x84\xd1\xd0\x7e\xf3\x9e\x33\xb9\x37\x2a\x21\x3f\xf1\xfb\x5e\x40\x5f\xb9\x86\x61\x66\xde\x58\x2e\x2f\xad\xb1\x3c\xee\xb6\x4d\xe6\xb0\x6e\xaf\xa6\xa6\x66\x03\x80\xc5\x7b\x62\xff\xd9\xea\x62\x19\xaf\x5a\x01\x7a\x7d\xcd\x2e\x18\x37\xaf\x0c\x79\xc6\x03\x1e\xa1\xef\x88\x85\x67\x22\x97\xbf\x1a\xe8\x5a\xd7\x3d\x9f\x5e\x78\x30\xc9\xba\xe8\x02\x80\xc5\x42\xdf\xca\x26\xb6\xd5\xb2\x96\xa0\xc1\xcf\x94\xd4\x3a\xb9\xc1\x0d\xad\x03\x96\x92\x72\xdc\x76\xf6\x90\x9c\x43\x7a\x59\x7b\x36\x38\x01\x20\x39\xa8\x76\x50\xad\xa2\x3b\xcd\xe6\x05\x4c\x9b\x9f\xa1\xcd\x25\x67\xa2\xd9\x5c\xce\xc3\x70\xc1\xef\xe9\x1a\x4b\xf7\xc4\xb2\xa0\x3b\xf2\x79\x40\xea\x7d\xae\xb1\xd4\xd4\xcc\xb4\xfe\x33\x3f\x04\xc8\xde\x3f\xb0\x96\xea\xaa\x38\xfd\xc7\xa6\x6f\x3c\xec\x90\x73\xaf\xe8\x7a\x15\x2e\x1f\xd9\xeb\xe8\x0f\x30\x3e\xda\x7e\xed\xbd\xde\x3f\xb1\x83\x7c\xc7\xdd\xa4\xdd\xc7\x32\x97\x1b\xf9\x7b\xca\x09\xef\x89\xbf\x1e\xc2\xd2\x92\x12\xe3\xd5\x58\x52\x12\xcc\x75\xd7\x94\xc6\x07\x8c\x71\x7b\x3e\x7b\xc8\xe1\x16\x93\xc6\x88\x75\xd7\xa1\x74\x75\xb0\x53\x4c\xf4\x58\x4c\xe2\xe5\x44\x73\x31\xc9\x04\x2e\xc4\x39\x3a\x87\x18\x82\x72\xe4\xe3\x72\x63\x14\x5b\x85\x37\x04\xae\xe0\x02\x0e\x84\xd5\x8a\x3a\x10\x56\x5c\x19\x7a\x48\xcd\x46\xd1\x26\x8e\xac\x39\x14\x16\x94\x93\x3e\x99\x26\x83\x0c\x17\xba\x72\xba\xa3\xb5\x64\xfc\xaf\xf2\x87\x80\x03\xd5\xef\x19\xcb\x7f\x22\xb5\x14\x32\x5e\xfd\x4e\xd5\x6f\xa9\x5d\xf7\xda\x6e\xec\x55\x3f\x4a\xdd\xf8\xe6\x4b\xbb\xae\x4b\x59\xbc\x13\xac\xf0\xc2\xda\x2f\x5b\x2b\x5c\xf4\x90\x19\x75\x3a\xd5\xac\xfa\xd1\x6b\x8b\xea\x6b\xad\x3c\x17\x10\x34\xc8\x42\x38\x18\x60\x1c\x89\x44\x12\xb9\x75\xf9\x2b\xa2\x6d\x87\xa3\x5f\x50\xb4\xa1\xd0\xf9\x1e\xfc\xed\x07\x15\x11\xfc\x56\x23\xd2\x92\x74\x85\xa3\x80\xbf\x42\xfc\xa0\x7c\xab\x38\x0e\x91\xec\x39\x94\x8c\xad\xc8\x0a\xf6\x54\xd6\xd0\xf8\xfb\x1b\xbd\xb9\x69\xc0\x92\xc5\x49\x27\x70\xb3\x27\x0d\xe8\xac\xc9\x6b\xac\xc5\xf7\xcc\x5d\x32\x79\x69\xce\x87\xfc\xd5\xeb\x07\x65\x16\xa1\xdb\x0b\x17\xf8\xb3\x4b\xbb\xa0\xa0\xac\x34\x2c\x20\xc1\x84\x1d\xd7\x3a\x48\x09\x3b\x4e\x14\x99\x46\x8b\xd3\x75\x8a\x06\xc1\x9d\x86\xd3\xf3\x52\x75\xec\x4c\xe8\x32\x5e\x2f\xbf\x6a\xbc\x41\x6e\x00\xf6\xc9\x3a\x29\x19\xd6\xa9\xd4\xee\xe7\x58\xad\x17\xdf\x8c\xe2\x63\x67\x56\x64\x4d\xd6\xd3\x8c\x72\xc9\xa9\x7d\x57\xbe\x6f\xa5\xc3\x72\x3a\xe5\x8b\xaa\xe1\xd0\xbe\x95\x7e\xbc\xd9\x0d\x33\xee\x16\x6a\x7f\xe6\xac\x27\x15\x68\x13\xae\x89\xea\x36\x9b\xb4\x84\xea\xb7\xc4\x77\xc4\x3c\x51\x88\x69\x96\x35\xca\x1f\xc9\x50\xdd\x56\x92\xbe\x8c\x59\xbc\x2a\xfe\x7d\xfe\x7f\x00\x00\x00\xff\xff\xd5\x5c\xcd\xdb\x15\x8c\x00\x00")

func swaggerSpecApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSpecApiJson,
		"swagger-spec/api.json",
	)
}

func swaggerSpecApiJson() (*asset, error) {
	bytes, err := swaggerSpecApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger-spec/api.json", size: 35861, mode: os.FileMode(420), modTime: time.Unix(1455271583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger-spec/api.json": swaggerSpecApiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger-spec": &bintree{nil, map[string]*bintree{
		"api.json": &bintree{swaggerSpecApiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

