package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ServiceManagerWorkspaceResponse service manager workspace response

swagger:model ServiceManagerWorkspaceResponse
*/
type ServiceManagerWorkspaceResponse struct {

	/* key value map with connection details (Service manager won't interpret the details of the map it will send this back to the requester as is)
	 */
	Details map[string]interface{} `json:"details,omitempty"`

	/* Processing type

	Required: true
	*/
	ProcessingType *string `json:"processing_type"`

	/* status

	Required: true
	*/
	Status *string `json:"status"`
}

// Validate validates this service manager workspace response
func (m *ServiceManagerWorkspaceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessingType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceManagerWorkspaceResponse) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	return nil
}

var serviceManagerWorkspaceResponseTypeProcessingTypePropEnum []interface{}

// prop value enum
func (m *ServiceManagerWorkspaceResponse) validateProcessingTypeEnum(path, location string, value string) error {
	if serviceManagerWorkspaceResponseTypeProcessingTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["None","Default","Extension"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			serviceManagerWorkspaceResponseTypeProcessingTypePropEnum = append(serviceManagerWorkspaceResponseTypeProcessingTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, serviceManagerWorkspaceResponseTypeProcessingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceManagerWorkspaceResponse) validateProcessingType(formats strfmt.Registry) error {

	if err := validate.Required("processing_type", "body", m.ProcessingType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProcessingTypeEnum("processing_type", "body", *m.ProcessingType); err != nil {
		return err
	}

	return nil
}

var serviceManagerWorkspaceResponseTypeStatusPropEnum []interface{}

// prop value enum
func (m *ServiceManagerWorkspaceResponse) validateStatusEnum(path, location string, value string) error {
	if serviceManagerWorkspaceResponseTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["none","unknown","successful","failed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			serviceManagerWorkspaceResponseTypeStatusPropEnum = append(serviceManagerWorkspaceResponseTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, serviceManagerWorkspaceResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceManagerWorkspaceResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}
