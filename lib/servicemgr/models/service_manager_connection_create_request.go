package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ServiceManagerConnectionCreateRequest service manager connection create request

swagger:model ServiceManagerConnectionCreateRequest
*/
type ServiceManagerConnectionCreateRequest struct {

	/* Connection id

	Required: true
	*/
	ConnectionID *string `json:"connection_id"`

	/* key value map with connection details (Service manager won't interpret the details of the map it will send this back to the requester as is)
	 */
	Details map[string]interface{} `json:"details,omitempty"`
}

// Validate validates this service manager connection create request
func (m *ServiceManagerConnectionCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceManagerConnectionCreateRequest) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connection_id", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceManagerConnectionCreateRequest) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	return nil
}
