package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
<<<<<<< HEAD
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new connection API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
=======
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new connection API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
	return &Client{transport: transport, formats: formats}
}

/*
Client for connection API
*/
type Client struct {
<<<<<<< HEAD
	transport runtime.ClientTransport
=======
	transport client.Transport
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
	formats   strfmt.Registry
}

/*
CreateConnection Create new connection
*/
func (a *Client) CreateConnection(params *CreateConnectionParams) (*CreateConnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}

<<<<<<< HEAD
	result, err := a.transport.Submit(&runtime.ClientOperation{
=======
	result, err := a.transport.Submit(&client.Operation{
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
		ID:                 "createConnection",
		Method:             "POST",
		PathPattern:        "/workspaces/{workspace_id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConnectionCreated), nil
}

/*
DeleteConnection Delete specified connection
*/
func (a *Client) DeleteConnection(params *DeleteConnectionParams) (*DeleteConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConnectionParams()
	}

<<<<<<< HEAD
	result, err := a.transport.Submit(&runtime.ClientOperation{
=======
	result, err := a.transport.Submit(&client.Operation{
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
		ID:                 "deleteConnection",
		Method:             "DELETE",
		PathPattern:        "/workspaces/{workspace_id}/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConnectionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConnectionOK), nil
}

/*
GetConnection Get the details for the specified
*/
func (a *Client) GetConnection(params *GetConnectionParams) (*GetConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionParams()
	}

<<<<<<< HEAD
	result, err := a.transport.Submit(&runtime.ClientOperation{
=======
	result, err := a.transport.Submit(&client.Operation{
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
		ID:                 "getConnection",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace_id}/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConnectionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionOK), nil
}

// SetTransport changes the transport on the client
<<<<<<< HEAD
func (a *Client) SetTransport(transport runtime.ClientTransport) {
=======
func (a *Client) SetTransport(transport client.Transport) {
>>>>>>> f998b3c... [HCFRO-193] Use rest for calling drivers
	a.transport = transport
}
