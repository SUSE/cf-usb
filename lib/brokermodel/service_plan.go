package brokermodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*ServicePlan New Plan to be added to a service.

swagger:model ServicePlan
*/
type ServicePlan struct {

	/* A value of true indicates that both the Cloud Controller and the requesting client support asynchronous provisioning. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below
	 */
	AcceptsIncomplete bool `json:"accepts_incomplete,omitempty"`

	/* parameters
	 */
	Parameters *Parameter `json:"parameters,omitempty"`

	/* plan id
	 */
	PlanID string `json:"plan_id,omitempty"`

	/* previous values
	 */
	PreviousValues *PreviousValues `json:"previous_values,omitempty"`

	/* service id
	 */
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this service plan
func (m *ServicePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreviousValues(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePlan) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {

		if err := m.Parameters.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ServicePlan) validatePreviousValues(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousValues) { // not required
		return nil
	}

	if m.PreviousValues != nil {

		if err := m.PreviousValues.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
