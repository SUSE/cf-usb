package brokermodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Services Schema of a service object

swagger:model Services
*/
type Services struct {

	/* bindable
	 */
	Bindable bool `json:"bindable,omitempty"`

	/* dashboard client
	 */
	DashboardClient *DashboardClient `json:"dashboard_client,omitempty"`

	/* description
	 */
	Description string `json:"description,omitempty"`

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* metadata
	 */
	Metadata *MetaData `json:"metadata,omitempty"`

	/* name
	 */
	Name string `json:"name,omitempty"`

	/* plan updateable
	 */
	PlanUpdateable bool `json:"plan_updateable,omitempty"`

	/* A list of plans for this service
	 */
	Plans []*Plan `json:"plans,omitempty"`

	/* requires
	 */
	Requires []string `json:"requires,omitempty"`

	/* tags
	 */
	Tags []string `json:"tags,omitempty"`
}

// Validate validates this services
func (m *Services) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboardClient(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlans(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequires(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Services) validateDashboardClient(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardClient) { // not required
		return nil
	}

	if m.DashboardClient != nil {

		if err := m.DashboardClient.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Services) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Services) validatePlans(formats strfmt.Registry) error {

	if swag.IsZero(m.Plans) { // not required
		return nil
	}

	for i := 0; i < len(m.Plans); i++ {

		if swag.IsZero(m.Plans[i]) { // not required
			continue
		}

		if m.Plans[i] != nil {

			if err := m.Plans[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Services) validateRequires(formats strfmt.Registry) error {

	if swag.IsZero(m.Requires) { // not required
		return nil
	}

	return nil
}

func (m *Services) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}
