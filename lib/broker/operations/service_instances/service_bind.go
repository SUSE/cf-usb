package service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ServiceBindHandlerFunc turns a function with the right signature into a service bind handler
type ServiceBindHandlerFunc func(ServiceBindParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceBindHandlerFunc) Handle(params ServiceBindParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ServiceBindHandler interface for that can handle valid service bind params
type ServiceBindHandler interface {
	Handle(ServiceBindParams, interface{}) middleware.Responder
}

// NewServiceBind creates a new http.Handler for the service bind operation
func NewServiceBind(ctx *middleware.Context, handler ServiceBindHandler) *ServiceBind {
	return &ServiceBind{Context: ctx, Handler: handler}
}

/*ServiceBind swagger:route PUT /service_instances/{instance_id}/service_bindings/{binding_id} service_instances serviceBind

Binds to a service

When the broker receives a bind request from the Cloud Controller, it should return information which helps an application to utilize the provisioned resource. This information is generically referred to as credentials. Applications should be issued unique credentials whenever possible, so one application access can be revoked without affecting other bound applications. For more information on credentials, [see Binding Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).

*/
type ServiceBind struct {
	Context *middleware.Context
	Handler ServiceBindHandler
}

func (o *ServiceBind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewServiceBindParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
