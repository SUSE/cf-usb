package service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateServiceInstanceHandlerFunc turns a function with the right signature into a update service instance handler
type UpdateServiceInstanceHandlerFunc func(UpdateServiceInstanceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServiceInstanceHandlerFunc) Handle(params UpdateServiceInstanceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateServiceInstanceHandler interface for that can handle valid update service instance params
type UpdateServiceInstanceHandler interface {
	Handle(UpdateServiceInstanceParams, interface{}) middleware.Responder
}

// NewUpdateServiceInstance creates a new http.Handler for the update service instance operation
func NewUpdateServiceInstance(ctx *middleware.Context, handler UpdateServiceInstanceHandler) *UpdateServiceInstance {
	return &UpdateServiceInstance{Context: ctx, Handler: handler}
}

/*UpdateServiceInstance swagger:route PATCH /service_instances/{instance_id} service_instances updateServiceInstance

Updating a Service Instance

Brokers that implement this endpoint can enable users to modify attributes of an existing service instance. The first attribute Cloud Foundry supports users modifying is the service plan. This effectively enables users to upgrade or downgrade their service instance to other plans. To see how users make these requests, [see Managing Services](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service).

*/
type UpdateServiceInstance struct {
	Context *middleware.Context
	Handler UpdateServiceInstanceHandler
}

func (o *UpdateServiceInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateServiceInstanceParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
