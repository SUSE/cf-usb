package service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ServiceUnbindHandlerFunc turns a function with the right signature into a service unbind handler
type ServiceUnbindHandlerFunc func(ServiceUnbindParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceUnbindHandlerFunc) Handle(params ServiceUnbindParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ServiceUnbindHandler interface for that can handle valid service unbind params
type ServiceUnbindHandler interface {
	Handle(ServiceUnbindParams, interface{}) middleware.Responder
}

// NewServiceUnbind creates a new http.Handler for the service unbind operation
func NewServiceUnbind(ctx *middleware.Context, handler ServiceUnbindHandler) *ServiceUnbind {
	return &ServiceUnbind{Context: ctx, Handler: handler}
}

/*ServiceUnbind swagger:route DELETE /service_instances/{instance_id}/service_bindings/{binding_id} service_instances serviceUnbind

Unbinds a service

When a broker receives an unbind request from Cloud Controller, it should delete any resources it created in bind. Usually this means that an application immediately cannot access the resource.

*/
type ServiceUnbind struct {
	Context *middleware.Context
	Handler ServiceUnbindHandler
}

func (o *ServiceUnbind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewServiceUnbindParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
