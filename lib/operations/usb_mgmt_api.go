package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/spec"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewUsbMgmtAPI creates a new UsbMgmt instance
func NewUsbMgmtAPI(spec *spec.Document) *UsbMgmtAPI {
	o := &UsbMgmtAPI{
		spec:            spec,
		handlers:        make(map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
	}

	return o
}

/* UsbMgmtAPI Universal service broker management API */
type UsbMgmtAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer httpkit.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer httpkit.Producer

	// GetDialHandler sets the operation handler for the get dial operation
	GetDialHandler GetDialHandler

	// GetDriverSchemaHandler sets the operation handler for the get driver schema operation
	GetDriverSchemaHandler GetDriverSchemaHandler

	// GetDriverHandler sets the operation handler for the get driver operation
	GetDriverHandler GetDriverHandler

	// GetInfoHandler sets the operation handler for the get info operation
	GetInfoHandler GetInfoHandler

	// GetServicesHandler sets the operation handler for the get services operation
	GetServicesHandler GetServicesHandler

	// UploadDriverHandler sets the operation handler for the upload driver operation
	UploadDriverHandler UploadDriverHandler

	// GetBrokerInfoHandler sets the operation handler for the get broker info operation
	GetBrokerInfoHandler GetBrokerInfoHandler

	// UpdateBrokerInfoHandler sets the operation handler for the update broker info operation
	UpdateBrokerInfoHandler UpdateBrokerInfoHandler

	// DeleteDialHandler sets the operation handler for the delete dial operation
	DeleteDialHandler DeleteDialHandler

	// DeleteDriverHandler sets the operation handler for the delete driver operation
	DeleteDriverHandler DeleteDriverHandler

	// CreateServicePlanHandler sets the operation handler for the create service plan operation
	CreateServicePlanHandler CreateServicePlanHandler

	// CreateDialHandler sets the operation handler for the create dial operation
	CreateDialHandler CreateDialHandler

	// GetDialSchemaHandler sets the operation handler for the get dial schema operation
	GetDialSchemaHandler GetDialSchemaHandler

	// GetServiceHandler sets the operation handler for the get service operation
	GetServiceHandler GetServiceHandler

	// GetAllDialsHandler sets the operation handler for the get all dials operation
	GetAllDialsHandler GetAllDialsHandler

	// UpdateDialHandler sets the operation handler for the update dial operation
	UpdateDialHandler UpdateDialHandler

	// DeleteDriverInstanceHandler sets the operation handler for the delete driver instance operation
	DeleteDriverInstanceHandler DeleteDriverInstanceHandler

	// GetDriversHandler sets the operation handler for the get drivers operation
	GetDriversHandler GetDriversHandler

	// GetServicePlanHandler sets the operation handler for the get service plan operation
	GetServicePlanHandler GetServicePlanHandler

	// GetServicePlansHandler sets the operation handler for the get service plans operation
	GetServicePlansHandler GetServicePlansHandler

	// PingDriverInstanceHandler sets the operation handler for the ping driver instance operation
	PingDriverInstanceHandler PingDriverInstanceHandler

	// CreateDriverHandler sets the operation handler for the create driver operation
	CreateDriverHandler CreateDriverHandler

	// CreateDriverInstanceHandler sets the operation handler for the create driver instance operation
	CreateDriverInstanceHandler CreateDriverInstanceHandler

	// UpdateCatalogHandler sets the operation handler for the update catalog operation
	UpdateCatalogHandler UpdateCatalogHandler

	// GetDriverInstanceHandler sets the operation handler for the get driver instance operation
	GetDriverInstanceHandler GetDriverInstanceHandler

	// UpdateDriverInstanceHandler sets the operation handler for the update driver instance operation
	UpdateDriverInstanceHandler UpdateDriverInstanceHandler

	// UpdateServicePlanHandler sets the operation handler for the update service plan operation
	UpdateServicePlanHandler UpdateServicePlanHandler

	// DeleteServiceHandler sets the operation handler for the delete service operation
	DeleteServiceHandler DeleteServiceHandler

	// DeleteServicePlanHandler sets the operation handler for the delete service plan operation
	DeleteServicePlanHandler DeleteServicePlanHandler

	// GetDriverInstancesHandler sets the operation handler for the get driver instances operation
	GetDriverInstancesHandler GetDriverInstancesHandler

	// UpdateServiceHandler sets the operation handler for the update service operation
	UpdateServiceHandler UpdateServiceHandler

	// UpdateDriverHandler sets the operation handler for the update driver operation
	UpdateDriverHandler UpdateDriverHandler

	// CreateServiceHandler sets the operation handler for the create service operation
	CreateServiceHandler CreateServiceHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)
}

// SetDefaultProduces sets the default produces media type
func (o *UsbMgmtAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *UsbMgmtAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (o *UsbMgmtAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *UsbMgmtAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *UsbMgmtAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *UsbMgmtAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the UsbMgmtAPI
func (o *UsbMgmtAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GetDialHandler == nil {
		unregistered = append(unregistered, "GetDialHandler")
	}

	if o.GetDriverSchemaHandler == nil {
		unregistered = append(unregistered, "GetDriverSchemaHandler")
	}

	if o.GetDriverHandler == nil {
		unregistered = append(unregistered, "GetDriverHandler")
	}

	if o.GetInfoHandler == nil {
		unregistered = append(unregistered, "GetInfoHandler")
	}

	if o.GetServicesHandler == nil {
		unregistered = append(unregistered, "GetServicesHandler")
	}

	if o.UploadDriverHandler == nil {
		unregistered = append(unregistered, "UploadDriverHandler")
	}

	if o.GetBrokerInfoHandler == nil {
		unregistered = append(unregistered, "GetBrokerInfoHandler")
	}

	if o.UpdateBrokerInfoHandler == nil {
		unregistered = append(unregistered, "UpdateBrokerInfoHandler")
	}

	if o.DeleteDialHandler == nil {
		unregistered = append(unregistered, "DeleteDialHandler")
	}

	if o.DeleteDriverHandler == nil {
		unregistered = append(unregistered, "DeleteDriverHandler")
	}

	if o.CreateServicePlanHandler == nil {
		unregistered = append(unregistered, "CreateServicePlanHandler")
	}

	if o.CreateDialHandler == nil {
		unregistered = append(unregistered, "CreateDialHandler")
	}

	if o.GetDialSchemaHandler == nil {
		unregistered = append(unregistered, "GetDialSchemaHandler")
	}

	if o.GetServiceHandler == nil {
		unregistered = append(unregistered, "GetServiceHandler")
	}

	if o.GetAllDialsHandler == nil {
		unregistered = append(unregistered, "GetAllDialsHandler")
	}

	if o.UpdateDialHandler == nil {
		unregistered = append(unregistered, "UpdateDialHandler")
	}

	if o.DeleteDriverInstanceHandler == nil {
		unregistered = append(unregistered, "DeleteDriverInstanceHandler")
	}

	if o.GetDriversHandler == nil {
		unregistered = append(unregistered, "GetDriversHandler")
	}

	if o.GetServicePlanHandler == nil {
		unregistered = append(unregistered, "GetServicePlanHandler")
	}

	if o.GetServicePlansHandler == nil {
		unregistered = append(unregistered, "GetServicePlansHandler")
	}

	if o.PingDriverInstanceHandler == nil {
		unregistered = append(unregistered, "PingDriverInstanceHandler")
	}

	if o.CreateDriverHandler == nil {
		unregistered = append(unregistered, "CreateDriverHandler")
	}

	if o.CreateDriverInstanceHandler == nil {
		unregistered = append(unregistered, "CreateDriverInstanceHandler")
	}

	if o.UpdateCatalogHandler == nil {
		unregistered = append(unregistered, "UpdateCatalogHandler")
	}

	if o.GetDriverInstanceHandler == nil {
		unregistered = append(unregistered, "GetDriverInstanceHandler")
	}

	if o.UpdateDriverInstanceHandler == nil {
		unregistered = append(unregistered, "UpdateDriverInstanceHandler")
	}

	if o.UpdateServicePlanHandler == nil {
		unregistered = append(unregistered, "UpdateServicePlanHandler")
	}

	if o.DeleteServiceHandler == nil {
		unregistered = append(unregistered, "DeleteServiceHandler")
	}

	if o.DeleteServicePlanHandler == nil {
		unregistered = append(unregistered, "DeleteServicePlanHandler")
	}

	if o.GetDriverInstancesHandler == nil {
		unregistered = append(unregistered, "GetDriverInstancesHandler")
	}

	if o.UpdateServiceHandler == nil {
		unregistered = append(unregistered, "UpdateServiceHandler")
	}

	if o.UpdateDriverHandler == nil {
		unregistered = append(unregistered, "UpdateDriverHandler")
	}

	if o.CreateServiceHandler == nil {
		unregistered = append(unregistered, "CreateServiceHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *UsbMgmtAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *UsbMgmtAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *UsbMgmtAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	result := make(map[string]httpkit.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *UsbMgmtAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	result := make(map[string]httpkit.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation id
func (o *UsbMgmtAPI) HandlerFor(operationID string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	h, ok := o.handlers[operationID]
	return h, ok
}

func (o *UsbMgmtAPI) initHandlerCache() {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	o.handlers = make(map[string]http.Handler)

	o.handlers["getDial"] = NewGetDial(o.context, o.GetDialHandler)

	o.handlers["getDriverSchema"] = NewGetDriverSchema(o.context, o.GetDriverSchemaHandler)

	o.handlers["getDriver"] = NewGetDriver(o.context, o.GetDriverHandler)

	o.handlers["getInfo"] = NewGetInfo(o.context, o.GetInfoHandler)

	o.handlers["getServices"] = NewGetServices(o.context, o.GetServicesHandler)

	o.handlers["uploadDriver"] = NewUploadDriver(o.context, o.UploadDriverHandler)

	o.handlers["getBrokerInfo"] = NewGetBrokerInfo(o.context, o.GetBrokerInfoHandler)

	o.handlers["updateBrokerInfo"] = NewUpdateBrokerInfo(o.context, o.UpdateBrokerInfoHandler)

	o.handlers["deleteDial"] = NewDeleteDial(o.context, o.DeleteDialHandler)

	o.handlers["deleteDriver"] = NewDeleteDriver(o.context, o.DeleteDriverHandler)

	o.handlers["createServicePlan"] = NewCreateServicePlan(o.context, o.CreateServicePlanHandler)

	o.handlers["createDial"] = NewCreateDial(o.context, o.CreateDialHandler)

	o.handlers["getDialSchema"] = NewGetDialSchema(o.context, o.GetDialSchemaHandler)

	o.handlers["getService"] = NewGetService(o.context, o.GetServiceHandler)

	o.handlers["getAllDials"] = NewGetAllDials(o.context, o.GetAllDialsHandler)

	o.handlers["updateDial"] = NewUpdateDial(o.context, o.UpdateDialHandler)

	o.handlers["deleteDriverInstance"] = NewDeleteDriverInstance(o.context, o.DeleteDriverInstanceHandler)

	o.handlers["getDrivers"] = NewGetDrivers(o.context, o.GetDriversHandler)

	o.handlers["getServicePlan"] = NewGetServicePlan(o.context, o.GetServicePlanHandler)

	o.handlers["getServicePlans"] = NewGetServicePlans(o.context, o.GetServicePlansHandler)

	o.handlers["pingDriverInstance"] = NewPingDriverInstance(o.context, o.PingDriverInstanceHandler)

	o.handlers["createDriver"] = NewCreateDriver(o.context, o.CreateDriverHandler)

	o.handlers["createDriverInstance"] = NewCreateDriverInstance(o.context, o.CreateDriverInstanceHandler)

	o.handlers["updateCatalog"] = NewUpdateCatalog(o.context, o.UpdateCatalogHandler)

	o.handlers["getDriverInstance"] = NewGetDriverInstance(o.context, o.GetDriverInstanceHandler)

	o.handlers["updateDriverInstance"] = NewUpdateDriverInstance(o.context, o.UpdateDriverInstanceHandler)

	o.handlers["updateServicePlan"] = NewUpdateServicePlan(o.context, o.UpdateServicePlanHandler)

	o.handlers["deleteService"] = NewDeleteService(o.context, o.DeleteServiceHandler)

	o.handlers["deleteServicePlan"] = NewDeleteServicePlan(o.context, o.DeleteServicePlanHandler)

	o.handlers["getDriverInstances"] = NewGetDriverInstances(o.context, o.GetDriverInstancesHandler)

	o.handlers["updateService"] = NewUpdateService(o.context, o.UpdateServiceHandler)

	o.handlers["updateDriver"] = NewUpdateDriver(o.context, o.UpdateDriverHandler)

	o.handlers["createService"] = NewCreateService(o.context, o.CreateServiceHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve())
func (o *UsbMgmtAPI) Serve() http.Handler {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}

	return o.context.APIHandler()
}
