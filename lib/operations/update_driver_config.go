package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// UpdateDriverConfigHandlerFunc turns a function with the right signature into a update driver config handler
type UpdateDriverConfigHandlerFunc func(UpdateDriverConfigParams) error

func (fn UpdateDriverConfigHandlerFunc) Handle(params UpdateDriverConfigParams) error {
	return fn(params)
}

// UpdateDriverConfigHandler interface for that can handle valid update driver config params
type UpdateDriverConfigHandler interface {
	Handle(UpdateDriverConfigParams) error
}

// NewUpdateDriverConfig creates a new http.Handler for the update driver config operation
func NewUpdateDriverConfig(ctx *middleware.Context, handler UpdateDriverConfigHandler) *UpdateDriverConfig {
	return &UpdateDriverConfig{Context: ctx, Handler: handler}
}

/*
Updates the driver config with the id **driver_config_id**
*/
type UpdateDriverConfig struct {
	Context *middleware.Context
	Params  UpdateDriverConfigParams
	Handler UpdateDriverConfigHandler
}

func (o *UpdateDriverConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	err := o.Handler.Handle(o.Params) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, nil)

}
