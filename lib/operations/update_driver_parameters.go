package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

// NewUpdateDriverParams creates a new UpdateDriverParams object
// with the default values initialized.
func NewUpdateDriverParams() UpdateDriverParams {
	var ()
	return UpdateDriverParams{}
}

// UpdateDriverParams contains all the bound params for the update driver operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateDriver
type UpdateDriverParams struct {
	/*Driver to be updated
	  Required: true
	  In: body
	*/
	Driver *genmodel.Driver
	/*Driver ID
	  Required: true
	  In: path
	*/
	DriverID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UpdateDriverParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	var body genmodel.Driver
	if err := route.Consumer.Consume(r.Body, &body); err != nil {
		res = append(res, errors.NewParseError("driver", "body", "", err))
	} else {
		if err := body.Validate(route.Formats); err != nil {
			res = append(res, err)
		}

		if len(res) == 0 {
			o.Driver = &body
		}
	}

	rDriverID, rhkDriverID, _ := route.Params.GetOK("driver_id")
	if err := o.bindDriverID(rDriverID, rhkDriverID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDriverParams) bindDriverID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.DriverID = raw

	return nil
}
