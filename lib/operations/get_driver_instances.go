package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetDriverInstancesHandlerFunc turns a function with the right signature into a get driver instances handler
type GetDriverInstancesHandlerFunc func(GetDriverInstancesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDriverInstancesHandlerFunc) Handle(params GetDriverInstancesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDriverInstancesHandler interface for that can handle valid get driver instances params
type GetDriverInstancesHandler interface {
	Handle(GetDriverInstancesParams, interface{}) middleware.Responder
}

// NewGetDriverInstances creates a new http.Handler for the get driver instances operation
func NewGetDriverInstances(ctx *middleware.Context, handler GetDriverInstancesHandler) *GetDriverInstances {
	return &GetDriverInstances{Context: ctx, Handler: handler}
}

/*GetDriverInstances swagger:route GET /driver_instances getDriverInstances

Gets driver instances for a driver


*/
type GetDriverInstances struct {
	Context *middleware.Context
	Handler GetDriverInstancesHandler
}

func (o *GetDriverInstances) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDriverInstancesParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
