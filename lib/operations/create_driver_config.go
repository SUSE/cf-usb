package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// CreateDriverConfigHandlerFunc turns a function with the right signature into a create driver config handler
type CreateDriverConfigHandlerFunc func(CreateDriverConfigParams) error

func (fn CreateDriverConfigHandlerFunc) Handle(params CreateDriverConfigParams) error {
	return fn(params)
}

// CreateDriverConfigHandler interface for that can handle valid create driver config params
type CreateDriverConfigHandler interface {
	Handle(CreateDriverConfigParams) error
}

// NewCreateDriverConfig creates a new http.Handler for the create driver config operation
func NewCreateDriverConfig(ctx *middleware.Context, handler CreateDriverConfigHandler) *CreateDriverConfig {
	return &CreateDriverConfig{Context: ctx, Handler: handler}
}

/*
Create a new driver

*/
type CreateDriverConfig struct {
	Context *middleware.Context
	Params  CreateDriverConfigParams
	Handler CreateDriverConfigHandler
}

func (o *CreateDriverConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	err := o.Handler.Handle(o.Params) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, nil)

}
