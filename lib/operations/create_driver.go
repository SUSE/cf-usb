package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/hpcloud/cf-usb/lib/genmodel"
)

// CreateDriverHandlerFunc turns a function with the right signature into a create driver handler
type CreateDriverHandlerFunc func(CreateDriverParams) (*genmodel.Driver, error)

func (fn CreateDriverHandlerFunc) Handle(params CreateDriverParams) (*genmodel.Driver, error) {
	return fn(params)
}

// CreateDriverHandler interface for that can handle valid create driver params
type CreateDriverHandler interface {
	Handle(CreateDriverParams) (*genmodel.Driver, error)
}

// NewCreateDriver creates a new http.Handler for the create driver operation
func NewCreateDriver(ctx *middleware.Context, handler CreateDriverHandler) *CreateDriver {
	return &CreateDriver{Context: ctx, Handler: handler}
}

/*
Create a new driver

*/
type CreateDriver struct {
	Context *middleware.Context
	Params  CreateDriverParams
	Handler CreateDriverHandler
}

func (o *CreateDriver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res, err := o.Handler.Handle(o.Params) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, res)

}
