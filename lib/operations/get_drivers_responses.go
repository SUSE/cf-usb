package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

/*GetDriversOK Successful response

swagger:response getDriversOK
*/
type GetDriversOK struct {

	// In: body
	Payload []*genmodel.Driver `json:"body,omitempty"`
}

// NewGetDriversOK creates GetDriversOK with default headers values
func NewGetDriversOK() *GetDriversOK {
	return &GetDriversOK{}
}

// WithPayload adds the payload to the get drivers o k response
func (o *GetDriversOK) WithPayload(payload []*genmodel.Driver) *GetDriversOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get drivers o k response
func (o *GetDriversOK) SetPayload(payload []*genmodel.Driver) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriversOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetDriversInternalServerError Unexpected error

swagger:response getDriversInternalServerError
*/
type GetDriversInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewGetDriversInternalServerError creates GetDriversInternalServerError with default headers values
func NewGetDriversInternalServerError() *GetDriversInternalServerError {
	return &GetDriversInternalServerError{}
}

// WithPayload adds the payload to the get drivers internal server error response
func (o *GetDriversInternalServerError) WithPayload(payload string) *GetDriversInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get drivers internal server error response
func (o *GetDriversInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriversInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
