package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDialHandlerFunc turns a function with the right signature into a get dial handler
type GetDialHandlerFunc func(GetDialParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDialHandlerFunc) Handle(params GetDialParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDialHandler interface for that can handle valid get dial params
type GetDialHandler interface {
	Handle(GetDialParams, interface{}) middleware.Responder
}

// NewGetDial creates a new http.Handler for the get dial operation
func NewGetDial(ctx *middleware.Context, handler GetDialHandler) *GetDial {
	return &GetDial{Context: ctx, Handler: handler}
}

/*GetDial swagger:route GET /dials/{dial_id} getDial

Gets the `dial` with the **dial_id**

*/
type GetDial struct {
	Context *middleware.Context
	Handler GetDialHandler
}

func (o *GetDial) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDialParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
