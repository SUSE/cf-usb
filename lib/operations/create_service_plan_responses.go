package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

/*CreateServicePlanCreated Sucessfull response

swagger:response createServicePlanCreated
*/
type CreateServicePlanCreated struct {

	// In: body
	Payload *genmodel.Plan `json:"body,omitempty"`
}

// NewCreateServicePlanCreated creates CreateServicePlanCreated with default headers values
func NewCreateServicePlanCreated() *CreateServicePlanCreated {
	return &CreateServicePlanCreated{}
}

// WithPayload adds the payload to the create service plan created response
func (o *CreateServicePlanCreated) WithPayload(payload *genmodel.Plan) *CreateServicePlanCreated {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *CreateServicePlanCreated) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateServicePlanInternalServerError Unexpected error

swagger:response createServicePlanInternalServerError
*/
type CreateServicePlanInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewCreateServicePlanInternalServerError creates CreateServicePlanInternalServerError with default headers values
func NewCreateServicePlanInternalServerError() *CreateServicePlanInternalServerError {
	return &CreateServicePlanInternalServerError{}
}

// WithPayload adds the payload to the create service plan internal server error response
func (o *CreateServicePlanInternalServerError) WithPayload(payload string) *CreateServicePlanInternalServerError {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *CreateServicePlanInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
