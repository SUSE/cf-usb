package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"
)

/*DeleteServicePlanNoContent Sucessfull response

swagger:response deleteServicePlanNoContent
*/
type DeleteServicePlanNoContent struct {
}

// NewDeleteServicePlanNoContent creates DeleteServicePlanNoContent with default headers values
func NewDeleteServicePlanNoContent() *DeleteServicePlanNoContent {
	return &DeleteServicePlanNoContent{}
}

// WriteResponse to the client
func (o *DeleteServicePlanNoContent) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(204)
}

/*DeleteServicePlanNotFound Not Found

swagger:response deleteServicePlanNotFound
*/
type DeleteServicePlanNotFound struct {
}

// NewDeleteServicePlanNotFound creates DeleteServicePlanNotFound with default headers values
func NewDeleteServicePlanNotFound() *DeleteServicePlanNotFound {
	return &DeleteServicePlanNotFound{}
}

// WriteResponse to the client
func (o *DeleteServicePlanNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
}

/*DeleteServicePlanInternalServerError Unexpected error

swagger:response deleteServicePlanInternalServerError
*/
type DeleteServicePlanInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewDeleteServicePlanInternalServerError creates DeleteServicePlanInternalServerError with default headers values
func NewDeleteServicePlanInternalServerError() *DeleteServicePlanInternalServerError {
	return &DeleteServicePlanInternalServerError{}
}

// WithPayload adds the payload to the delete service plan internal server error response
func (o *DeleteServicePlanInternalServerError) WithPayload(payload string) *DeleteServicePlanInternalServerError {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *DeleteServicePlanInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
