package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/hpcloud/cf-usb/lib/genmodel"
)

// GetServicePlanByIDHandlerFunc turns a function with the right signature into a get service plan by ID handler
type GetServicePlanByIDHandlerFunc func() (*genmodel.Plan, error)

func (fn GetServicePlanByIDHandlerFunc) Handle() (*genmodel.Plan, error) {
	return fn()
}

// GetServicePlanByIDHandler interface for that can handle valid get service plan by ID params
type GetServicePlanByIDHandler interface {
	Handle() (*genmodel.Plan, error)
}

// NewGetServicePlanByID creates a new http.Handler for the get service plan by ID operation
func NewGetServicePlanByID(ctx *middleware.Context, handler GetServicePlanByIDHandler) *GetServicePlanByID {
	return &GetServicePlanByID{Context: ctx, Handler: handler}
}

/*
Gets the `plan` with the **planID** for the *serviceID*
*/
type GetServicePlanByID struct {
	Context *middleware.Context
	Handler GetServicePlanByIDHandler
}

func (o *GetServicePlanByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res, err := o.Handler.Handle() // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, res)

}
