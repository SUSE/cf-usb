package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

/*UploadDriverOK Driver uploaded

swagger:response uploadDriverOK
*/
type UploadDriverOK struct {
}

// NewUploadDriverOK creates UploadDriverOK with default headers values
func NewUploadDriverOK() *UploadDriverOK {
	return &UploadDriverOK{}
}

// WriteResponse to the client
func (o *UploadDriverOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*UploadDriverNotFound Not Found

swagger:response uploadDriverNotFound
*/
type UploadDriverNotFound struct {
}

// NewUploadDriverNotFound creates UploadDriverNotFound with default headers values
func NewUploadDriverNotFound() *UploadDriverNotFound {
	return &UploadDriverNotFound{}
}

// WriteResponse to the client
func (o *UploadDriverNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

/*UploadDriverInternalServerError Unexpected error

swagger:response uploadDriverInternalServerError
*/
type UploadDriverInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewUploadDriverInternalServerError creates UploadDriverInternalServerError with default headers values
func NewUploadDriverInternalServerError() *UploadDriverInternalServerError {
	return &UploadDriverInternalServerError{}
}

// WithPayload adds the payload to the upload driver internal server error response
func (o *UploadDriverInternalServerError) WithPayload(payload string) *UploadDriverInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload driver internal server error response
func (o *UploadDriverInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadDriverInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
