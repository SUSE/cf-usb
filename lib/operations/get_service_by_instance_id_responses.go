package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

/*GetServiceByInstanceIDOK Sucessfull response

swagger:response getServiceByInstanceIdOK
*/
type GetServiceByInstanceIDOK struct {

	// In: body
	Payload *genmodel.Service `json:"body,omitempty"`
}

// NewGetServiceByInstanceIDOK creates GetServiceByInstanceIDOK with default headers values
func NewGetServiceByInstanceIDOK() *GetServiceByInstanceIDOK {
	return &GetServiceByInstanceIDOK{}
}

// WithPayload adds the payload to the get service by instance id o k response
func (o *GetServiceByInstanceIDOK) WithPayload(payload *genmodel.Service) *GetServiceByInstanceIDOK {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *GetServiceByInstanceIDOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceByInstanceIDInternalServerError Unexpected error

swagger:response getServiceByInstanceIdInternalServerError
*/
type GetServiceByInstanceIDInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewGetServiceByInstanceIDInternalServerError creates GetServiceByInstanceIDInternalServerError with default headers values
func NewGetServiceByInstanceIDInternalServerError() *GetServiceByInstanceIDInternalServerError {
	return &GetServiceByInstanceIDInternalServerError{}
}

// WithPayload adds the payload to the get service by instance id internal server error response
func (o *GetServiceByInstanceIDInternalServerError) WithPayload(payload string) *GetServiceByInstanceIDInternalServerError {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *GetServiceByInstanceIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
