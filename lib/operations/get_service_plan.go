package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetServicePlanHandlerFunc turns a function with the right signature into a get service plan handler
type GetServicePlanHandlerFunc func(GetServicePlanParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServicePlanHandlerFunc) Handle(params GetServicePlanParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetServicePlanHandler interface for that can handle valid get service plan params
type GetServicePlanHandler interface {
	Handle(GetServicePlanParams, interface{}) middleware.Responder
}

// NewGetServicePlan creates a new http.Handler for the get service plan operation
func NewGetServicePlan(ctx *middleware.Context, handler GetServicePlanHandler) *GetServicePlan {
	return &GetServicePlan{Context: ctx, Handler: handler}
}

/*GetServicePlan swagger:route GET /plans/{plan_id} getServicePlan

Gets the `plan` with the **planID**

*/
type GetServicePlan struct {
	Context *middleware.Context
	Handler GetServicePlanHandler
}

func (o *GetServicePlan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetServicePlanParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
