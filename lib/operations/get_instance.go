package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetInstanceHandlerFunc turns a function with the right signature into a get instance handler
type GetInstanceHandlerFunc func(GetInstanceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInstanceHandlerFunc) Handle(params GetInstanceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetInstanceHandler interface for that can handle valid get instance params
type GetInstanceHandler interface {
	Handle(GetInstanceParams, interface{}) middleware.Responder
}

// NewGetInstance creates a new http.Handler for the get instance operation
func NewGetInstance(ctx *middleware.Context, handler GetInstanceHandler) *GetInstance {
	return &GetInstance{Context: ctx, Handler: handler}
}

/*GetInstance swagger:route GET /instances/{instance_id} getInstance

Gets instance configurations


*/
type GetInstance struct {
	Context *middleware.Context
	Handler GetInstanceHandler
}

func (o *GetInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetInstanceParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
