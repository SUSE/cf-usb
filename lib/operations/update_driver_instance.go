package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/hpcloud/cf-usb/lib/genmodel"
)

// UpdateDriverInstanceHandlerFunc turns a function with the right signature into a update driver instance handler
type UpdateDriverInstanceHandlerFunc func(UpdateDriverInstanceParams) (*genmodel.DriverInstance, error)

func (fn UpdateDriverInstanceHandlerFunc) Handle(params UpdateDriverInstanceParams) (*genmodel.DriverInstance, error) {
	return fn(params)
}

// UpdateDriverInstanceHandler interface for that can handle valid update driver instance params
type UpdateDriverInstanceHandler interface {
	Handle(UpdateDriverInstanceParams) (*genmodel.DriverInstance, error)
}

// NewUpdateDriverInstance creates a new http.Handler for the update driver instance operation
func NewUpdateDriverInstance(ctx *middleware.Context, handler UpdateDriverInstanceHandler) UpdateDriverInstance {
	return UpdateDriverInstance{Context: ctx, Handler: handler}
}

/*
Update a driver instance

*/
type UpdateDriverInstance struct {
	Context *middleware.Context
	Params  UpdateDriverInstanceParams
	Handler UpdateDriverInstanceHandler
}

func (o UpdateDriverInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res, err := o.Handler.Handle(o.Params) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, res)

}
