package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/hpcloud/cf-usb/lib/genmodel"
)

/*GetDriverInstancesOK OK

swagger:response getDriverInstancesOK
*/
type GetDriverInstancesOK struct {

	// In: body
	Payload []*genmodel.DriverInstance `json:"body,omitempty"`
}

// NewGetDriverInstancesOK creates GetDriverInstancesOK with default headers values
func NewGetDriverInstancesOK() *GetDriverInstancesOK {
	return &GetDriverInstancesOK{}
}

// WithPayload adds the payload to the get driver instances o k response
func (o *GetDriverInstancesOK) WithPayload(payload []*genmodel.DriverInstance) *GetDriverInstancesOK {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *GetDriverInstancesOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetDriverInstancesInternalServerError Unexpected error

swagger:response getDriverInstancesInternalServerError
*/
type GetDriverInstancesInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewGetDriverInstancesInternalServerError creates GetDriverInstancesInternalServerError with default headers values
func NewGetDriverInstancesInternalServerError() *GetDriverInstancesInternalServerError {
	return &GetDriverInstancesInternalServerError{}
}

// WithPayload adds the payload to the get driver instances internal server error response
func (o *GetDriverInstancesInternalServerError) WithPayload(payload string) *GetDriverInstancesInternalServerError {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *GetDriverInstancesInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
