package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteDriverConfigHandlerFunc turns a function with the right signature into a delete driver config handler
type DeleteDriverConfigHandlerFunc func() error

func (fn DeleteDriverConfigHandlerFunc) Handle() error {
	return fn()
}

// DeleteDriverConfigHandler interface for that can handle valid delete driver config params
type DeleteDriverConfigHandler interface {
	Handle() error
}

// NewDeleteDriverConfig creates a new http.Handler for the delete driver config operation
func NewDeleteDriverConfig(ctx *middleware.Context, handler DeleteDriverConfigHandler) *DeleteDriverConfig {
	return &DeleteDriverConfig{Context: ctx, Handler: handler}
}

/*
Deletes a `driver` configuration

*/
type DeleteDriverConfig struct {
	Context *middleware.Context
	Handler DeleteDriverConfigHandler
}

func (o *DeleteDriverConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	err := o.Handler.Handle() // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, nil)

}
