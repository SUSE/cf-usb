package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

/*PingInstanceOK OK

swagger:response pingInstanceOK
*/
type PingInstanceOK struct {
}

// NewPingInstanceOK creates PingInstanceOK with default headers values
func NewPingInstanceOK() *PingInstanceOK {
	return &PingInstanceOK{}
}

// WriteResponse to the client
func (o *PingInstanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*PingInstanceNotFound Not Found

swagger:response pingInstanceNotFound
*/
type PingInstanceNotFound struct {
}

// NewPingInstanceNotFound creates PingInstanceNotFound with default headers values
func NewPingInstanceNotFound() *PingInstanceNotFound {
	return &PingInstanceNotFound{}
}

// WriteResponse to the client
func (o *PingInstanceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

/*PingInstanceInternalServerError Unexpected error

swagger:response pingInstanceInternalServerError
*/
type PingInstanceInternalServerError struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewPingInstanceInternalServerError creates PingInstanceInternalServerError with default headers values
func NewPingInstanceInternalServerError() *PingInstanceInternalServerError {
	return &PingInstanceInternalServerError{}
}

// WithPayload adds the payload to the ping instance internal server error response
func (o *PingInstanceInternalServerError) WithPayload(payload string) *PingInstanceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping instance internal server error response
func (o *PingInstanceInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingInstanceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
