package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetDriverInstanceHandlerFunc turns a function with the right signature into a get driver instance handler
type GetDriverInstanceHandlerFunc func(GetDriverInstanceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDriverInstanceHandlerFunc) Handle(params GetDriverInstanceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDriverInstanceHandler interface for that can handle valid get driver instance params
type GetDriverInstanceHandler interface {
	Handle(GetDriverInstanceParams, interface{}) middleware.Responder
}

// NewGetDriverInstance creates a new http.Handler for the get driver instance operation
func NewGetDriverInstance(ctx *middleware.Context, handler GetDriverInstanceHandler) *GetDriverInstance {
	return &GetDriverInstance{Context: ctx, Handler: handler}
}

/*GetDriverInstance swagger:route GET /driver_instances/{driver_instance_id} getDriverInstance

Gets driver configurations


*/
type GetDriverInstance struct {
	Context *middleware.Context
	Handler GetDriverInstanceHandler
}

func (o *GetDriverInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDriverInstanceParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
