package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewUploadDriverParams creates a new UploadDriverParams object
// with the default values initialized.
func NewUploadDriverParams() UploadDriverParams {
	var ()
	return UploadDriverParams{}
}

// UploadDriverParams contains all the bound params for the upload driver operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadDriver
type UploadDriverParams struct {
	/*Driver ID
	  Required: true
	  In: path
	*/
	DriverID string
	/*Driver executable
	  Required: true
	  In: formData
	*/
	File httpkit.File
	/*file sha1 base64 encoded
	  Required: true
	  In: formData
	*/
	Sha string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UploadDriverParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		return err
	}
	fds := httpkit.Values(r.Form)

	rDriverID, rhkDriverID, _ := route.Params.GetOK("driver_id")
	if err := o.bindDriverID(rDriverID, rhkDriverID, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else {
		o.File = httpkit.File{Data: file, Header: fileHeader}
	}

	fdSha, fdhkSha, _ := fds.GetOK("sha")
	if err := o.bindSha(fdSha, fdhkSha, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadDriverParams) bindDriverID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.DriverID = raw

	return nil
}

func (o *UploadDriverParams) bindSha(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sha", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("sha", "formData", raw); err != nil {
		return err
	}

	o.Sha = raw

	return nil
}
