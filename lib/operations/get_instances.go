package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetInstancesHandlerFunc turns a function with the right signature into a get instances handler
type GetInstancesHandlerFunc func(interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInstancesHandlerFunc) Handle(principal interface{}) middleware.Responder {
	return fn(principal)
}

// GetInstancesHandler interface for that can handle valid get instances params
type GetInstancesHandler interface {
	Handle(interface{}) middleware.Responder
}

// NewGetInstances creates a new http.Handler for the get instances operation
func NewGetInstances(ctx *middleware.Context, handler GetInstancesHandler) *GetInstances {
	return &GetInstances{Context: ctx, Handler: handler}
}

/*GetInstances swagger:route GET /instances getInstances

Gets available instances

*/
type GetInstances struct {
	Context *middleware.Context
	Handler GetInstancesHandler
}

func (o *GetInstances) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
