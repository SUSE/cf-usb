// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/hpcloud/cf-usb/lib/csm"
)

type FakeCSMInterface struct {
	LoginStub        func(string, string) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 string
		arg2 string
	}
	loginReturns struct {
		result1 error
	}
	CreateWorkspaceStub        func(string) error
	createWorkspaceMutex       sync.RWMutex
	createWorkspaceArgsForCall []struct {
		arg1 string
	}
	createWorkspaceReturns struct {
		result1 error
	}
	WorkspaceExistsStub        func(string) (bool, error)
	workspaceExistsMutex       sync.RWMutex
	workspaceExistsArgsForCall []struct {
		arg1 string
	}
	workspaceExistsReturns struct {
		result1 bool
		result2 error
	}
	DeleteWorkspaceStub        func(string) error
	deleteWorkspaceMutex       sync.RWMutex
	deleteWorkspaceArgsForCall []struct {
		arg1 string
	}
	deleteWorkspaceReturns struct {
		result1 error
	}
	CreateConnectionStub        func(string, string) (interface{}, error)
	createConnectionMutex       sync.RWMutex
	createConnectionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createConnectionReturns struct {
		result1 interface{}
		result2 error
	}
	ConnectionExistsStub        func(string, string) (bool, error)
	connectionExistsMutex       sync.RWMutex
	connectionExistsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	connectionExistsReturns struct {
		result1 bool
		result2 error
	}
	DeleteConnectionStub        func(string, string) error
	deleteConnectionMutex       sync.RWMutex
	deleteConnectionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteConnectionReturns struct {
		result1 error
	}
}

func (fake *FakeCSMInterface) Login(arg1 string, arg2 string) error {
	fake.loginMutex.Lock()
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(arg1, arg2)
	} else {
		return fake.loginReturns.result1
	}
}

func (fake *FakeCSMInterface) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeCSMInterface) LoginArgsForCall(i int) (string, string) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].arg1, fake.loginArgsForCall[i].arg2
}

func (fake *FakeCSMInterface) LoginReturns(result1 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCSMInterface) CreateWorkspace(arg1 string) error {
	fake.createWorkspaceMutex.Lock()
	fake.createWorkspaceArgsForCall = append(fake.createWorkspaceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.createWorkspaceMutex.Unlock()
	if fake.CreateWorkspaceStub != nil {
		return fake.CreateWorkspaceStub(arg1)
	} else {
		return fake.createWorkspaceReturns.result1
	}
}

func (fake *FakeCSMInterface) CreateWorkspaceCallCount() int {
	fake.createWorkspaceMutex.RLock()
	defer fake.createWorkspaceMutex.RUnlock()
	return len(fake.createWorkspaceArgsForCall)
}

func (fake *FakeCSMInterface) CreateWorkspaceArgsForCall(i int) string {
	fake.createWorkspaceMutex.RLock()
	defer fake.createWorkspaceMutex.RUnlock()
	return fake.createWorkspaceArgsForCall[i].arg1
}

func (fake *FakeCSMInterface) CreateWorkspaceReturns(result1 error) {
	fake.CreateWorkspaceStub = nil
	fake.createWorkspaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCSMInterface) WorkspaceExists(arg1 string) (bool, error) {
	fake.workspaceExistsMutex.Lock()
	fake.workspaceExistsArgsForCall = append(fake.workspaceExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.workspaceExistsMutex.Unlock()
	if fake.WorkspaceExistsStub != nil {
		return fake.WorkspaceExistsStub(arg1)
	} else {
		return fake.workspaceExistsReturns.result1, fake.workspaceExistsReturns.result2
	}
}

func (fake *FakeCSMInterface) WorkspaceExistsCallCount() int {
	fake.workspaceExistsMutex.RLock()
	defer fake.workspaceExistsMutex.RUnlock()
	return len(fake.workspaceExistsArgsForCall)
}

func (fake *FakeCSMInterface) WorkspaceExistsArgsForCall(i int) string {
	fake.workspaceExistsMutex.RLock()
	defer fake.workspaceExistsMutex.RUnlock()
	return fake.workspaceExistsArgsForCall[i].arg1
}

func (fake *FakeCSMInterface) WorkspaceExistsReturns(result1 bool, result2 error) {
	fake.WorkspaceExistsStub = nil
	fake.workspaceExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCSMInterface) DeleteWorkspace(arg1 string) error {
	fake.deleteWorkspaceMutex.Lock()
	fake.deleteWorkspaceArgsForCall = append(fake.deleteWorkspaceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.deleteWorkspaceMutex.Unlock()
	if fake.DeleteWorkspaceStub != nil {
		return fake.DeleteWorkspaceStub(arg1)
	} else {
		return fake.deleteWorkspaceReturns.result1
	}
}

func (fake *FakeCSMInterface) DeleteWorkspaceCallCount() int {
	fake.deleteWorkspaceMutex.RLock()
	defer fake.deleteWorkspaceMutex.RUnlock()
	return len(fake.deleteWorkspaceArgsForCall)
}

func (fake *FakeCSMInterface) DeleteWorkspaceArgsForCall(i int) string {
	fake.deleteWorkspaceMutex.RLock()
	defer fake.deleteWorkspaceMutex.RUnlock()
	return fake.deleteWorkspaceArgsForCall[i].arg1
}

func (fake *FakeCSMInterface) DeleteWorkspaceReturns(result1 error) {
	fake.DeleteWorkspaceStub = nil
	fake.deleteWorkspaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCSMInterface) CreateConnection(arg1 string, arg2 string) (interface{}, error) {
	fake.createConnectionMutex.Lock()
	fake.createConnectionArgsForCall = append(fake.createConnectionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.createConnectionMutex.Unlock()
	if fake.CreateConnectionStub != nil {
		return fake.CreateConnectionStub(arg1, arg2)
	} else {
		return fake.createConnectionReturns.result1, fake.createConnectionReturns.result2
	}
}

func (fake *FakeCSMInterface) CreateConnectionCallCount() int {
	fake.createConnectionMutex.RLock()
	defer fake.createConnectionMutex.RUnlock()
	return len(fake.createConnectionArgsForCall)
}

func (fake *FakeCSMInterface) CreateConnectionArgsForCall(i int) (string, string) {
	fake.createConnectionMutex.RLock()
	defer fake.createConnectionMutex.RUnlock()
	return fake.createConnectionArgsForCall[i].arg1, fake.createConnectionArgsForCall[i].arg2
}

func (fake *FakeCSMInterface) CreateConnectionReturns(result1 interface{}, result2 error) {
	fake.CreateConnectionStub = nil
	fake.createConnectionReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCSMInterface) ConnectionExists(arg1 string, arg2 string) (bool, error) {
	fake.connectionExistsMutex.Lock()
	fake.connectionExistsArgsForCall = append(fake.connectionExistsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.connectionExistsMutex.Unlock()
	if fake.ConnectionExistsStub != nil {
		return fake.ConnectionExistsStub(arg1, arg2)
	} else {
		return fake.connectionExistsReturns.result1, fake.connectionExistsReturns.result2
	}
}

func (fake *FakeCSMInterface) ConnectionExistsCallCount() int {
	fake.connectionExistsMutex.RLock()
	defer fake.connectionExistsMutex.RUnlock()
	return len(fake.connectionExistsArgsForCall)
}

func (fake *FakeCSMInterface) ConnectionExistsArgsForCall(i int) (string, string) {
	fake.connectionExistsMutex.RLock()
	defer fake.connectionExistsMutex.RUnlock()
	return fake.connectionExistsArgsForCall[i].arg1, fake.connectionExistsArgsForCall[i].arg2
}

func (fake *FakeCSMInterface) ConnectionExistsReturns(result1 bool, result2 error) {
	fake.ConnectionExistsStub = nil
	fake.connectionExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCSMInterface) DeleteConnection(arg1 string, arg2 string) error {
	fake.deleteConnectionMutex.Lock()
	fake.deleteConnectionArgsForCall = append(fake.deleteConnectionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.deleteConnectionMutex.Unlock()
	if fake.DeleteConnectionStub != nil {
		return fake.DeleteConnectionStub(arg1, arg2)
	} else {
		return fake.deleteConnectionReturns.result1
	}
}

func (fake *FakeCSMInterface) DeleteConnectionCallCount() int {
	fake.deleteConnectionMutex.RLock()
	defer fake.deleteConnectionMutex.RUnlock()
	return len(fake.deleteConnectionArgsForCall)
}

func (fake *FakeCSMInterface) DeleteConnectionArgsForCall(i int) (string, string) {
	fake.deleteConnectionMutex.RLock()
	defer fake.deleteConnectionMutex.RUnlock()
	return fake.deleteConnectionArgsForCall[i].arg1, fake.deleteConnectionArgsForCall[i].arg2
}

func (fake *FakeCSMInterface) DeleteConnectionReturns(result1 error) {
	fake.DeleteConnectionStub = nil
	fake.deleteConnectionReturns = struct {
		result1 error
	}{result1}
}

var _ csm.CSMInterface = new(FakeCSMInterface)
