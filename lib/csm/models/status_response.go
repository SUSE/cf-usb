package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StatusResponse status response

swagger:model StatusResponse
*/
type StatusResponse struct {

	/* Optional array of diagnostics performed by the CSM during ping
	 */
	Diagnostics []*StatusDiagnostic `json:"diagnostics,omitempty"`

	/* Contains any detail that informs the success or failure of the diagnostic that was performed

	Required: true
	*/
	Message *string `json:"message"`

	/* Processing type
	 */
	ProcessingType string `json:"processing_type,omitempty"`

	/* Status of the ping request. If the CSM implementation is confident that it can perform all functions correctly, it should return "successful". Otherwise, "failed"

	Required: true
	*/
	Status *string `json:"status"`
}

// Validate validates this status response
func (m *StatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiagnostics(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessingType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusResponse) validateDiagnostics(formats strfmt.Registry) error {

	if swag.IsZero(m.Diagnostics) { // not required
		return nil
	}

	return nil
}

func (m *StatusResponse) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

var statusResponseTypeProcessingTypePropEnum []interface{}

// prop value enum
func (m *StatusResponse) validateProcessingTypeEnum(path, location string, value string) error {
	if statusResponseTypeProcessingTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["none","default","extension"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			statusResponseTypeProcessingTypePropEnum = append(statusResponseTypeProcessingTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, statusResponseTypeProcessingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusResponse) validateProcessingType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessingTypeEnum("processing_type", "body", m.ProcessingType); err != nil {
		return err
	}

	return nil
}

var statusResponseTypeStatusPropEnum []interface{}

// prop value enum
func (m *StatusResponse) validateStatusEnum(path, location string, value string) error {
	if statusResponseTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["none","unknown","successful","failed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			statusResponseTypeStatusPropEnum = append(statusResponseTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, statusResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}
