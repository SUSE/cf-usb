package genmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Service service

swagger:model service
*/
type Service struct {

	/* bindable
	 */
	Bindable bool `json:"bindable,omitempty"`

	/* description
	 */
	Description string `json:"description,omitempty"`

	/* driver instance id

	Required: true
	Max Length: 36
	Min Length: 36
	*/
	DriverInstanceID *string `json:"driver_instance_id"`

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* metadata
	 */
	Metadata interface{} `json:"metadata,omitempty"`

	/* name

	Required: true
	Max Length: 50
	Min Length: 3
	*/
	Name *string `json:"name"`

	/* tags
	 */
	Tags []string `json:"tags,omitempty"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriverInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateDriverInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("driver_instance_id", "body", m.DriverInstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("driver_instance_id", "body", string(*m.DriverInstanceID), 36); err != nil {
		return err
	}

	if err := validate.MaxLength("driver_instance_id", "body", string(*m.DriverInstanceID), 36); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}
