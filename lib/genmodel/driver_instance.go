package genmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*
DriverInstance driver instance

swagger:model driver_instance
*/
type DriverInstance struct {

	/* Configuration configuration
	 */
	Configuration map[string]interface{} `json:"configuration,omitempty"`

	/* Dials dials
	 */
	Dials []string `json:"dials,omitempty"`

	/* DriverID driver id

	Required: true
	*/
	DriverID string `json:"driver_id"`

	/* ID id
	 */
	ID string `json:"id,omitempty"`

	/* Name name

	Required: true
	*/
	Name string `json:"name"`

	/* Service service
	 */
	Service string `json:"service,omitempty"`
}

// Validate validates this driver instance
func (m *DriverInstance) Validate(formats strfmt.Registry) error {

	var res []error

	if err := m.validateDriverID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}

	return nil
}

func (m *DriverInstance) validateDriverID(formats strfmt.Registry) error {

	if err := validate.Required("driver_id", "body", string(m.DriverID)); err != nil {
		return err
	}

	return nil
}

func (m *DriverInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}
