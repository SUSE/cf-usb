package genmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Driver driver

swagger:model driver
*/
type Driver struct {

	/* driver instances
	 */
	DriverInstances []string `json:"driver_instances,omitempty"`

	/* driver type

	Required: true
	Max Length: 50
	Min Length: 3
	*/
	DriverType *string `json:"driver_type"`

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* name

	Required: true
	Max Length: 50
	Min Length: 3
	*/
	Name *string `json:"name"`
}

// Validate validates this driver
func (m *Driver) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriverInstances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDriverType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Driver) validateDriverInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.DriverInstances) { // not required
		return nil
	}

	return nil
}

func (m *Driver) validateDriverType(formats strfmt.Registry) error {

	if err := validate.Required("driver_type", "body", m.DriverType); err != nil {
		return err
	}

	if err := validate.MinLength("driver_type", "body", string(*m.DriverType), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("driver_type", "body", string(*m.DriverType), 50); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}
