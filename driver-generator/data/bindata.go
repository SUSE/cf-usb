// Code generated by go-bindata.
// sources:
// templates/Makefile.template
// templates/config.go.template
// templates/driver.go.template
// templates/main.go.template
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMakefileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x5f\x4b\xf3\x30\x18\xc5\xaf\x9b\x4f\x71\xde\x52\xb6\xf6\x22\x2b\xef\xed\xa4\xe2\x5f\x14\x95\x55\xd4\xcb\x82\xa4\xcd\x63\x1b\x6c\x92\xb2\x46\x99\x8c\x7d\x77\xd3\xb5\x63\x28\x78\x15\x72\xce\x93\x93\xf3\x7b\x98\x68\xdb\x25\x6a\x32\xa5\x32\x52\x38\x81\xf2\x43\xb5\x92\xb1\xfd\xb1\x64\xc1\x19\x55\x8d\x45\x18\xc5\xf9\xfd\xeb\x65\xfe\x90\x3f\x25\x59\x76\x8a\x8b\xc1\x55\xa6\x8e\xe2\x55\x3e\xc9\x21\x0b\x68\xd3\xd9\xb5\xc3\x4d\xfe\x78\xfe\x72\x9b\x45\x71\xdf\x50\xdb\xa2\xb6\x92\x3a\x74\xc2\x35\xc9\xf2\xa0\xed\x43\xa3\x68\x9c\x4c\x30\x9b\x15\x2c\xa8\xed\xf8\x37\xb8\xc5\x76\xbb\xb8\x5a\xab\x4f\x5a\xaf\x84\xa6\xdd\x0e\x95\x96\xa9\xdc\x0b\xe9\x2f\x2b\xd5\x42\x99\x45\x6d\x19\x3b\x32\xfc\x59\xfb\x5a\x97\x24\x87\xde\xb8\x7b\xce\x57\xe8\xab\x86\xb4\xe8\xa1\x8c\xb3\x18\xe3\xfb\x9f\x44\x6f\x3e\x70\x72\x52\x70\x2d\x36\x1e\xc5\x35\xf8\x0f\xee\xbe\x3a\x82\x44\x11\xe3\x1f\xb8\xf1\x55\xa6\x31\x14\x09\x38\x6d\xa8\x82\x47\x2a\x45\xdf\x80\x57\x08\xe3\x4a\x62\xbe\xdd\xcd\x3d\xa9\xdf\x07\x3f\xec\x9a\x77\xef\x75\x16\x8e\x0f\x07\x21\x1c\xd8\x8f\xd7\x74\x2a\xe8\xf1\x0e\x5d\x53\x24\x21\x8a\x93\x80\xb1\xe0\x3b\x00\x00\xff\xff\xac\x5a\xeb\x77\xba\x01\x00\x00")

func templatesMakefileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefileTemplate,
		"templates/Makefile.template",
	)
}

func templatesMakefileTemplate() (*asset, error) {
	bytes, err := templatesMakefileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile.template", size: 442, mode: os.FileMode(420), modTime: time.Unix(1457098173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigGoTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcc\xb1\x0a\x02\x31\x0c\xc6\xf1\xf9\xf2\x14\xe1\x1e\xc3\x55\x07\x47\x17\xf7\x2b\xb5\xd6\x28\x34\x25\xc9\x29\x22\xbe\xbb\x21\xe0\xa0\x43\x33\x7e\xf9\xf1\xef\x29\xdf\x52\x2d\x98\xb9\x9d\xa9\x02\xd8\xb3\x17\xdc\x09\xdd\x8b\x6c\x63\x42\x35\x59\xb3\xe1\x0b\xa6\xa3\x16\xc1\xdf\xf3\x27\xb5\x8a\xcb\x55\xb9\x6d\xe6\xd5\x01\x9d\xe6\x05\xa6\x43\x52\x1d\xd2\xee\xe0\xc1\x12\x78\xcf\x6a\x43\x7c\x71\x10\x55\x96\x7f\x48\x2d\x96\x6f\xd5\x81\xc3\x37\x7c\x02\x00\x00\xff\xff\x7c\x89\xf9\xb7\xd7\x00\x00\x00")

func templatesConfigGoTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigGoTemplate,
		"templates/config.go.template",
	)
}

func templatesConfigGoTemplate() (*asset, error) {
	bytes, err := templatesConfigGoTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.go.template", size: 215, mode: os.FileMode(420), modTime: time.Unix(1458661592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDriverGoTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x95\xdd\x6e\xab\x38\x10\xc7\xaf\xe1\x29\xbc\x5c\x41\x14\xe0\xbe\x52\x2f\x76\x9b\x55\x15\x69\xb7\xaa\xda\x27\x70\xed\x49\xea\x2d\xb1\x59\xdb\xa4\xbb\x42\xbc\xfb\xf1\x07\x01\x9a\x0f\x42\x92\x1e\xe9\x5c\x35\x35\x7f\xff\x3d\xf3\x9b\xf1\xb8\xc4\xe4\x03\xaf\x01\xd5\x75\xb6\x90\x6c\x0b\xf2\x09\x6f\xa0\x69\xc2\x90\x6d\x4a\x21\x35\x8a\xc3\x20\x02\x4e\x04\x65\x7c\x9d\xff\xa3\x04\x8f\x42\xb3\xb2\x66\xfa\xbd\x7a\xcb\x88\xd8\xe4\xef\x25\x29\x44\x45\x73\xb2\x4a\x2b\xf5\x96\x53\x67\x12\x19\x8d\x71\xfc\x03\x2b\x58\x3a\x9f\xa6\x69\xbf\xe4\x7b\x07\xb5\xcb\x14\x6b\x1c\x4d\x30\xce\x95\xc6\xba\x52\x7b\xd2\x92\x6d\x85\xc6\x45\xba\x16\x05\x36\x61\x16\x26\x21\x13\x42\x12\x86\xfa\xff\xf2\x20\x35\xff\x1b\x29\x2d\x2b\xa2\x51\x1d\x06\x85\x58\x1b\x3d\x72\xbb\xb2\xbf\xdc\x3f\xa1\x01\xb0\xaa\x38\x41\x4f\xf0\x79\x74\x7b\x7c\x64\x53\x82\x7c\x8c\xad\xdc\x5a\x4b\xd0\x95\xe4\xc7\x23\xa8\xbd\xc5\x1d\xf2\x7f\xb3\x57\x50\x8a\x09\x1e\x47\x7b\xea\xb4\x45\x9a\x34\x5d\x54\x31\x3d\x6e\x99\xa0\x67\x53\xa6\x58\xc2\xbf\x15\x28\x8d\x66\xb6\x5e\xd9\x0b\xfe\xfc\xdb\x58\x9b\x40\xe7\x48\x82\x2a\x05\x57\x80\x66\x6f\x42\x14\x09\x02\x29\x85\x0b\x94\x66\x6d\x14\x4b\xbe\x12\x71\x54\x1a\x9b\xb4\xb5\x89\xe6\x6d\x96\x0b\x53\xa3\x3a\xda\xad\xde\x59\x82\xf6\xb4\x59\xbb\x92\x34\x06\x78\x50\x62\xce\x48\x1c\x3d\x09\x8d\x4c\x07\x15\xb0\x01\xae\x81\x46\x49\x10\x06\xb3\xee\xf4\x7b\x64\xe0\x43\xd8\xf1\xe1\xac\x98\x90\xdb\x23\xe8\x05\x66\x85\x7a\x25\xef\xb0\xc1\x5d\x96\x3e\x8c\x61\x6e\x7e\xe5\x74\x76\x6b\xd0\x29\xb5\x4e\xa9\x72\x56\x67\x33\x6d\x7f\xb9\x04\x69\x1f\xc2\xdc\x9e\x80\xee\xee\x51\xdf\xc3\xd9\xef\x4a\x81\x8e\x23\x6f\xac\x72\xca\x70\xa1\x32\x77\x6f\x92\x30\x60\x2b\xb7\xe3\xb7\x7b\x9b\xb1\x0d\x6c\x07\xc0\xac\x86\x81\x21\xf0\x85\x51\xcb\x77\x70\x60\x72\x05\xb2\x07\xc1\x57\x6c\xfd\x2d\xcc\x88\xb3\xba\x06\x1a\x19\x04\x31\x81\x9a\x97\xdf\x86\x6d\x78\xe4\x35\xdc\x9e\xb1\x34\x4b\x1a\xe4\xf7\xf4\x5b\xd9\xd9\x5d\xce\x2f\xa8\x6b\x83\x20\x7b\x04\x0e\x12\x6b\xe8\x23\x6b\x1a\xe4\xae\xdc\xd7\x48\x27\x00\xee\xb7\xec\x20\x5f\x49\x79\xff\x6c\x6b\x54\xd7\x50\x28\xb0\xb1\x05\x41\x9e\x2f\x04\x28\xc4\xcd\x38\x50\x55\xe9\x5e\x14\x52\x29\x2d\x36\xa8\xdf\xe9\x76\x70\xda\x34\xc1\xa5\x65\x7a\x96\x62\xcb\xec\xd0\x5c\x72\xf3\x2e\x70\x02\x5d\x91\xda\x49\x7c\x20\x78\xf1\xdf\x87\xd5\x6b\xa5\x3b\xc5\xc8\x50\xdc\x99\xa5\xac\xd5\x9e\xa8\x61\xf7\x99\xd1\xbe\x8e\xdd\x01\xcb\xc5\x1c\x45\xbe\x3b\x0f\x87\x68\xe6\xaf\x6b\x62\x24\x6e\x74\x1c\x51\x2c\xec\xfa\xf8\xb0\xb5\x18\x7d\x7a\xd9\xab\x7b\x2f\x5d\xc1\xec\x8f\xec\x41\x82\x69\x21\x7a\xc5\x85\x38\xc5\x78\xf0\xe9\x16\xba\xf6\x92\xfc\x7c\xae\x8d\x1f\x05\x27\xe0\xd8\x5e\x35\x30\xff\xfc\x8f\x29\x3d\x46\xf7\x62\x78\xfe\xe2\x1a\xf6\xd4\x78\xd8\xfa\x1d\x42\x3c\x90\x1c\x81\xc9\x4c\x00\x72\x85\x09\xd4\xcd\x18\x48\x6f\x95\x92\xde\xeb\x06\xa0\x03\x93\x2f\xaa\x41\xa4\xd3\xc9\x9f\x44\x7a\xc5\xbb\x36\x06\x53\x8f\x73\x6c\x75\x03\xd1\x69\x9c\x43\x00\x60\x1b\xe3\x97\x81\x39\xad\x8d\xbf\x0f\xfa\x0b\x6c\xc5\xc7\x58\x13\x1f\x08\x6e\x44\x2f\x9d\xdf\x84\x3e\x9e\xcc\xf5\x5c\x8d\xce\x70\x85\x02\xfc\xec\x1c\x1b\xbc\x17\x10\x5d\x40\x79\xee\x05\x3b\x22\xb9\x65\xca\xd2\xde\xee\x92\x36\x9e\xc6\x05\x4d\x1f\x99\x3f\x02\x00\x00\xff\xff\x13\x29\x37\xb1\x77\x0e\x00\x00")

func templatesDriverGoTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDriverGoTemplate,
		"templates/driver.go.template",
	)
}

func templatesDriverGoTemplate() (*asset, error) {
	bytes, err := templatesDriverGoTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/driver.go.template", size: 3703, mode: os.FileMode(420), modTime: time.Unix(1458654972, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGoTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x51\xcd\x6e\xe2\x30\x10\x3e\xc7\x4f\xe1\xf5\xc9\x91\x20\xb9\xef\x8a\x0b\x4b\x5b\x55\xaa\x50\x55\x54\xf5\xec\x86\xc1\x4c\x49\x6c\x6b\x62\xd2\x03\xca\xbb\x77\xec\x00\x87\xf4\x64\xeb\x9b\xef\x6f\xec\x60\x9a\x93\xb1\x20\x3b\x83\x4e\x08\xec\x82\xa7\x28\xb5\x28\x94\x83\x58\x53\x68\xea\xaf\xde\x3b\x3e\x15\x43\xbe\x57\x82\x8f\xcb\xa5\x5a\x9b\x1e\x9e\x33\x77\x1c\xeb\x3d\xe1\x00\x54\x33\xbc\xc9\xb7\xad\xe9\x60\x1c\x93\xc0\x62\x3c\x9e\x3f\xab\xc6\x77\xb5\x33\x11\x0e\xe8\x9a\x63\x1d\x10\x66\xb3\x80\x83\x8f\xa6\x5d\x5a\xdf\x1a\x67\xeb\x96\xfb\x90\x12\xa5\x10\x87\xb3\x6b\x72\x33\x5d\xca\x8b\x28\x06\x43\xb2\xf5\x96\xa7\x72\x25\x33\xab\xda\xc2\xf7\x4b\x46\xb4\x9a\xe5\x2f\xa7\x5a\x8a\x6d\x8a\x49\x54\xbd\x81\xc5\x3e\x02\xed\xd0\x9d\xf4\x5d\xff\x41\x78\xc3\x7c\x5f\xed\xe2\x1e\x88\x16\x57\xfb\xcd\xc3\xfa\xfd\xa9\x4c\x16\x41\xfe\x5d\x49\xae\x9e\x14\xaf\xe4\x07\x64\x9a\x4e\x83\x29\x26\x4d\x67\x05\x12\x73\x06\x4d\x77\x3d\xd5\x29\x45\x81\x07\xc9\x61\xd9\xf9\x5e\x2e\x31\x7f\x2d\xa3\x16\x72\xca\x29\xff\x65\xc5\x9f\x95\x74\xd8\xa6\x37\xb9\xed\xf6\x68\xf8\x05\xb5\xa2\xab\xcb\x32\xb4\x67\x8b\x8e\x75\x4c\xe7\xa4\x31\xad\x50\xed\x80\x06\xf8\xef\xf7\xd0\xe8\xeb\xb7\xa6\x92\x19\xa5\x0c\xf3\x42\xa3\xf8\x09\x00\x00\xff\xff\xea\x88\xda\x1f\x13\x02\x00\x00")

func templatesMainGoTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTemplate,
		"templates/main.go.template",
	)
}

func templatesMainGoTemplate() (*asset, error) {
	bytes, err := templatesMainGoTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.template", size: 531, mode: os.FileMode(420), modTime: time.Unix(1457098173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Makefile.template": templatesMakefileTemplate,
	"templates/config.go.template": templatesConfigGoTemplate,
	"templates/driver.go.template": templatesDriverGoTemplate,
	"templates/main.go.template": templatesMainGoTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Makefile.template": &bintree{templatesMakefileTemplate, map[string]*bintree{}},
		"config.go.template": &bintree{templatesConfigGoTemplate, map[string]*bintree{}},
		"driver.go.template": &bintree{templatesDriverGoTemplate, map[string]*bintree{}},
		"main.go.template": &bintree{templatesMainGoTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

