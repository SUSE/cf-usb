// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/routing-api/authentication"
)

type FakeToken struct {
	DecodeTokenStub        func(userToken string, desiredPermissions ...string) error
	decodeTokenMutex       sync.RWMutex
	decodeTokenArgsForCall []struct {
		userToken          string
		desiredPermissions []string
	}
	decodeTokenReturns struct {
		result1 error
	}
	CheckPublicTokenStub        func() error
	checkPublicTokenMutex       sync.RWMutex
	checkPublicTokenArgsForCall []struct{}
	checkPublicTokenReturns     struct {
		result1 error
	}
}

func (fake *FakeToken) DecodeToken(userToken string, desiredPermissions ...string) error {
	fake.decodeTokenMutex.Lock()
	fake.decodeTokenArgsForCall = append(fake.decodeTokenArgsForCall, struct {
		userToken          string
		desiredPermissions []string
	}{userToken, desiredPermissions})
	fake.decodeTokenMutex.Unlock()
	if fake.DecodeTokenStub != nil {
		return fake.DecodeTokenStub(userToken, desiredPermissions...)
	} else {
		return fake.decodeTokenReturns.result1
	}
}

func (fake *FakeToken) DecodeTokenCallCount() int {
	fake.decodeTokenMutex.RLock()
	defer fake.decodeTokenMutex.RUnlock()
	return len(fake.decodeTokenArgsForCall)
}

func (fake *FakeToken) DecodeTokenArgsForCall(i int) (string, []string) {
	fake.decodeTokenMutex.RLock()
	defer fake.decodeTokenMutex.RUnlock()
	return fake.decodeTokenArgsForCall[i].userToken, fake.decodeTokenArgsForCall[i].desiredPermissions
}

func (fake *FakeToken) DecodeTokenReturns(result1 error) {
	fake.DecodeTokenStub = nil
	fake.decodeTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeToken) CheckPublicToken() error {
	fake.checkPublicTokenMutex.Lock()
	fake.checkPublicTokenArgsForCall = append(fake.checkPublicTokenArgsForCall, struct{}{})
	fake.checkPublicTokenMutex.Unlock()
	if fake.CheckPublicTokenStub != nil {
		return fake.CheckPublicTokenStub()
	} else {
		return fake.checkPublicTokenReturns.result1
	}
}

func (fake *FakeToken) CheckPublicTokenCallCount() int {
	fake.checkPublicTokenMutex.RLock()
	defer fake.checkPublicTokenMutex.RUnlock()
	return len(fake.checkPublicTokenArgsForCall)
}

func (fake *FakeToken) CheckPublicTokenReturns(result1 error) {
	fake.CheckPublicTokenStub = nil
	fake.checkPublicTokenReturns = struct {
		result1 error
	}{result1}
}

var _ authentication.Token = new(FakeToken)
