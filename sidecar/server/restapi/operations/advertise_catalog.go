package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AdvertiseCatalogHandlerFunc turns a function with the right signature into a advertise catalog handler
type AdvertiseCatalogHandlerFunc func() middleware.Responder

// Handle executing the request and returning a response
func (fn AdvertiseCatalogHandlerFunc) Handle() middleware.Responder {
	return fn()
}

// AdvertiseCatalogHandler interface for that can handle valid advertise catalog params
type AdvertiseCatalogHandler interface {
	Handle() middleware.Responder
}

// NewAdvertiseCatalog creates a new http.Handler for the advertise catalog operation
func NewAdvertiseCatalog(ctx *middleware.Context, handler AdvertiseCatalogHandler) *AdvertiseCatalog {
	return &AdvertiseCatalog{Context: ctx, Handler: handler}
}

/*AdvertiseCatalog swagger:route POST /advertise advertiseCatalog

Advertise service offering

*/
type AdvertiseCatalog struct {
	Context *middleware.Context
	Handler AdvertiseCatalogHandler
}

func (o *AdvertiseCatalog) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle() // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
