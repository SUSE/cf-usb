package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	httpkit "github.com/go-swagger/go-swagger/httpkit"
	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
	spec "github.com/go-swagger/go-swagger/spec"
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/hpcloud/cf-usb/sidecar/server/restapi/operations/connection"
	"github.com/hpcloud/cf-usb/sidecar/server/restapi/operations/workspace"
)

// NewBrokerAPI creates a new Broker instance
func NewBrokerAPI(spec *spec.Document) *BrokerAPI {
	o := &BrokerAPI{
		spec:            spec,
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
	}

	return o
}

/*BrokerAPI The first version of the Catalog Service Manager API.
This API will be available on the Catalog Service Manager container which
runs along side your service and serves some of the service management
capabilities.
*/
type BrokerAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer httpkit.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer httpkit.Producer

	// ConnectionCreateConnectionHandler sets the operation handler for the create connection operation
	ConnectionCreateConnectionHandler connection.CreateConnectionHandler
	// WorkspaceCreateWorkspaceHandler sets the operation handler for the create workspace operation
	WorkspaceCreateWorkspaceHandler workspace.CreateWorkspaceHandler
	// ConnectionDeleteConnectionHandler sets the operation handler for the delete connection operation
	ConnectionDeleteConnectionHandler connection.DeleteConnectionHandler
	// WorkspaceDeleteWorkspaceHandler sets the operation handler for the delete workspace operation
	WorkspaceDeleteWorkspaceHandler workspace.DeleteWorkspaceHandler
	// ConnectionGetConnectionHandler sets the operation handler for the get connection operation
	ConnectionGetConnectionHandler connection.GetConnectionHandler
	// WorkspaceGetWorkspaceHandler sets the operation handler for the get workspace operation
	WorkspaceGetWorkspaceHandler workspace.GetWorkspaceHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup
}

// SetDefaultProduces sets the default produces media type
func (o *BrokerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *BrokerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (o *BrokerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *BrokerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *BrokerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *BrokerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the BrokerAPI
func (o *BrokerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ConnectionCreateConnectionHandler == nil {
		unregistered = append(unregistered, "connection.CreateConnectionHandler")
	}

	if o.WorkspaceCreateWorkspaceHandler == nil {
		unregistered = append(unregistered, "workspace.CreateWorkspaceHandler")
	}

	if o.ConnectionDeleteConnectionHandler == nil {
		unregistered = append(unregistered, "connection.DeleteConnectionHandler")
	}

	if o.WorkspaceDeleteWorkspaceHandler == nil {
		unregistered = append(unregistered, "workspace.DeleteWorkspaceHandler")
	}

	if o.ConnectionGetConnectionHandler == nil {
		unregistered = append(unregistered, "connection.GetConnectionHandler")
	}

	if o.WorkspaceGetWorkspaceHandler == nil {
		unregistered = append(unregistered, "workspace.GetWorkspaceHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *BrokerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *BrokerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *BrokerAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	result := make(map[string]httpkit.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *BrokerAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	result := make(map[string]httpkit.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *BrokerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

func (o *BrokerAPI) initHandlerCache() {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workspaces/{workspace_id}/connections"] = connection.NewCreateConnection(o.context, o.ConnectionCreateConnectionHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workspaces"] = workspace.NewCreateWorkspace(o.context, o.WorkspaceCreateWorkspaceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workspaces/{workspace_id}/connections/{connection_id}"] = connection.NewDeleteConnection(o.context, o.ConnectionDeleteConnectionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workspaces/{workspace_id}"] = workspace.NewDeleteWorkspace(o.context, o.WorkspaceDeleteWorkspaceHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workspaces/{workspace_id}/connections/{connection_id}"] = connection.NewGetConnection(o.context, o.ConnectionGetConnectionHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workspaces/{workspace_id}"] = workspace.NewGetWorkspace(o.context, o.WorkspaceGetWorkspaceHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *BrokerAPI) Serve(builder middleware.Builder) http.Handler {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}

	return o.context.APIHandler(builder)
}
