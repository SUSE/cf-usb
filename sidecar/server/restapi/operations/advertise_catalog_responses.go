package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/hpcloud/cf-usb/sidecar/server/models"
)

/*AdvertiseCatalogOK Advertise catalog ok

swagger:response advertiseCatalogOK
*/
type AdvertiseCatalogOK struct {
}

// NewAdvertiseCatalogOK creates AdvertiseCatalogOK with default headers values
func NewAdvertiseCatalogOK() *AdvertiseCatalogOK {
	return &AdvertiseCatalogOK{}
}

// WriteResponse to the client
func (o *AdvertiseCatalogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*AdvertiseCatalogDefault generic error response

swagger:response advertiseCatalogDefault
*/
type AdvertiseCatalogDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdvertiseCatalogDefault creates AdvertiseCatalogDefault with default headers values
func NewAdvertiseCatalogDefault(code int) *AdvertiseCatalogDefault {
	if code <= 0 {
		code = 500
	}

	return &AdvertiseCatalogDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the advertise catalog default response
func (o *AdvertiseCatalogDefault) WithStatusCode(code int) *AdvertiseCatalogDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the advertise catalog default response
func (o *AdvertiseCatalogDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the advertise catalog default response
func (o *AdvertiseCatalogDefault) WithPayload(payload *models.Error) *AdvertiseCatalogDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the advertise catalog default response
func (o *AdvertiseCatalogDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdvertiseCatalogDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
