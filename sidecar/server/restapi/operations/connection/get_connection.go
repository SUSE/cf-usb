package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetConnectionHandlerFunc turns a function with the right signature into a get connection handler
type GetConnectionHandlerFunc func(GetConnectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConnectionHandlerFunc) Handle(params GetConnectionParams) middleware.Responder {
	return fn(params)
}

// GetConnectionHandler interface for that can handle valid get connection params
type GetConnectionHandler interface {
	Handle(GetConnectionParams) middleware.Responder
}

// NewGetConnection creates a new http.Handler for the get connection operation
func NewGetConnection(ctx *middleware.Context, handler GetConnectionHandler) *GetConnection {
	return &GetConnection{Context: ctx, Handler: handler}
}

/*GetConnection swagger:route GET /workspaces/{workspace_id}/connections/{connection_id} connection getConnection

Get the details for the specified

*/
type GetConnection struct {
	Context *middleware.Context
	Handler GetConnectionHandler
}

func (o *GetConnection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetConnectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
