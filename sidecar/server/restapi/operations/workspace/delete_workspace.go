package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteWorkspaceHandlerFunc turns a function with the right signature into a delete workspace handler
type DeleteWorkspaceHandlerFunc func(DeleteWorkspaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteWorkspaceHandlerFunc) Handle(params DeleteWorkspaceParams) middleware.Responder {
	return fn(params)
}

// DeleteWorkspaceHandler interface for that can handle valid delete workspace params
type DeleteWorkspaceHandler interface {
	Handle(DeleteWorkspaceParams) middleware.Responder
}

// NewDeleteWorkspace creates a new http.Handler for the delete workspace operation
func NewDeleteWorkspace(ctx *middleware.Context, handler DeleteWorkspaceHandler) *DeleteWorkspace {
	return &DeleteWorkspace{Context: ctx, Handler: handler}
}

/*DeleteWorkspace swagger:route DELETE /workspaces/{workspace_id} workspace deleteWorkspace

Delete specified workspace

*/
type DeleteWorkspace struct {
	Context *middleware.Context
	Handler DeleteWorkspaceHandler
}

func (o *DeleteWorkspace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteWorkspaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
