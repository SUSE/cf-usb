swagger: '2.0'
info:
  version: '2.8'
  title: Service Broker API
  description: 
    The Cloud Foundry services API defines the contract between the Cloud
    Controller and the service broker. The broker is expected to implement
    several HTTP (or HTTPS) endpoints underneath a URI prefix. One or more
    services can be provided by a single broker, and load balancing enables
    horizontal scalability of redundant brokers. Multiple Cloud Foundry
    instances can be supported by a single broker using different URL prefixes
    and credentials. [Learn more about the Service Broker
    API.](http://docs.cloudfoundry.org/services/api.html)
host: '127.0.0.1:8888'
basePath: /v2
securityDefinitions:
  Basic:
    type: basic
security: 
  - Basic: []
schemes:
  - http
paths:
  /catalog:
    get:
      operationId: catalog
      summary: Gets services registered within the broker
      tags:
        - catalog
      description: >
        The first endpoint that a broker must implement is the service catalog.
        Cloud Controller will initially fetch this endpoint from all brokers and
        make adjustments to the user-facing service catalog stored in the Cloud
        Controller database. 
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CatalogServices'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
  '/service_instances/{instance_id}/last_operation':
    parameters:
      - $ref: '#/parameters/instance_id'
    get:
      summary: Polling Last Operation (async only)
      description: >-
        When a broker returns status code 202 ACCEPTED for provision, update, or
        deprovision, Cloud Foundry will begin to poll the
        /v2/service_instances/:guid/last_operation endpoint to obtain the state
        of the last requested operation. The broker response must contain the
        field state and an optional field description.
      responses:
        '200':
          description: 'Valid state values are ''in progress'', ''succeeded'', and ''failed'''
          schema:
            $ref: '#/definitions/LastOperation'
        '410':
          description: >-
            Appropriate only for asynchronous delete requests. Cloud Foundry
            will consider this response a success and remove the resource from
            its database. 
          schema:
            $ref: '#/definitions/Empty'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
  '/service_instances/{instance_id}':
    parameters:
      - $ref: '#/parameters/instance_id'
    put:
      operationId: createServiceInstance
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - service_instances
      description: >-
        When the broker receives a provision request from Cloud Controller, it
        should synchronously take whatever action is necessary to create a new
        service resource for the developer. The result of provisioning varies by
        service type, although there are a few common actions that work for many
        services.
      summary: Provisions a service instance
      parameters:
        - name: service
          required: true
          description: Service information.
          in: body
          schema:
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: >-
            May be returned if the service instance already exists and the
            requested parameters are identical to the existing service instance.
            The expected response body is below.
          schema:
            $ref: '#/definitions/Dashboard_url'
        '201':
          description: Service instance has been created.
          schema:
            $ref: '#/definitions/Dashboard_url'
        '202':
          description: Service instance creation has been accepted
          schema:
            $ref: '#/definitions/Dashboard_url'
        '409':
          description: >-
            Should be returned if the requested service instance already exists.
            The expected response body is {}
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: >-
            Shoud be returned if the broker only supports asynchronous
            provisioning for the requested plan and the request did not include
            ?accepts_incomplete=true
          schema:
            $ref: '#/definitions/AsyncError'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
    patch:
      operationId: updateServiceInstance
      summary: Updating a Service Instance
      description: >-
        Brokers that implement this endpoint can enable users to modify
        attributes of an existing service instance. The first attribute Cloud
        Foundry supports users modifying is the service plan. This effectively
        enables users to upgrade or downgrade their service instance to other
        plans. To see how users make these requests, [see Managing
        Services](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service).
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - service_instances
      parameters:
        - name: plan
          description: New Plan information.
          required: true
          in: body
          schema:
            $ref: '#/definitions/ServicePlan'
      responses:
        '200':
          description: 'New plan is effective. The expected response body is {}.'
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: >-
            Service instance update is in progress. This triggers Cloud
            Controller to poll the Service Instance Last Operation Endpoint for
            operation status.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: >-
            May be returned if the particular plan change requested is not
            supported or if the request can not currently be fulfilled due to
            the state of the instance (eg. instance utilization is over the
            quota of the requested plan). Broker should include a user-facing
            message in the body; for details [see Broker
            Errors](https://docs.cloudfoundry.org/services/api.html#broker-errors).
          schema:
            $ref: '#/definitions/AsyncError'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
    delete:
      operationId: deprovisionServiceInstance
      summary: Deprovisions a service instance.
      description: >-
        When a broker receives a deprovision request from Cloud Controller, it
        should delete any resources it created during the provision. Usually
        this means that all resources are immediately reclaimed for future
        provisions.
      produces:
        - application/json
      tags:
        - service_instances
      parameters:
        - name: deprovisionParameters
          required: true
          in: body
          description: Parameters to identify the service to be deprovisioned
          schema:
            $ref: '#/definitions/DeleteService'
      responses:
        '200':
          description: 'Service instance was deleted. The expected response body is {}.'
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: >-
            Service instance update is in progress. This triggers Cloud
            Controller to poll the Service Instance Last Operation Endpoint for
            operation status.
          schema:
            $ref: '#/definitions/Empty'
        '410':
          description: >-
            Should be returned if the binding does not exist. The expected
            response body is {}.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: >-
            Should be returned if the broker only supports asynchronous
            deprovisioning for the requested plan and the request did not
            include ?accepts_incomplete=true
          schema:
            $ref: '#/definitions/AsyncError'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
  '/service_instances/{instance_id}/service_bindings/{binding_id}':
    parameters:
      - $ref: '#/parameters/instance_id'
      - $ref: '#/parameters/binding_id'
    put:
      operationId: serviceBind
      x-version: '2.6'
      summary: Binds to a service
      description: >-
        When the broker receives a bind request from the Cloud Controller, it
        should return information which helps an application to utilize the
        provisioned resource. This information is generically referred to as
        credentials. Applications should be issued unique credentials whenever
        possible, so one application access can be revoked without affecting
        other bound applications. For more information on credentials, [see
        Binding
        Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - service_instances
      parameters:
        - name: binding
          required: true
          in: body
          schema:
            $ref: '#/definitions/Binding'
      responses:
        '200':
          description: >-
            May be returned if the binding already exists and the requested
            parameters are identical to the existing binding.
          schema:
            $ref: '#/definitions/BindingResponse'
        '201':
          description: Binding has been created.
          schema:
            $ref: '#/definitions/BindingResponse'
        '409':
          description: >-
            Should be returned if the requested binding already exists. The
            expected response body is {}, though the description field can be
            used to return a user-facing error message, as described in Broker
            Errors.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: >-
            Should be returned if the broker requires that app_guid be included
            in the request body.
          schema:
            $ref: '#/definitions/Empty'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
    delete:
      operationId: serviceUnbind
      summary: Unbinds a service
      description: >-
        When a broker receives an unbind request from Cloud Controller, it
        should delete any resources it created in bind. Usually this means that
        an application immediately cannot access the resource.
      produces:
        - application/json
      tags:
        - service_instances
      parameters:
        - name: UnbindParameters
          in: body
          required: true
          schema:
            $ref: '#/definitions/UnbindParameters'
      responses:
        '200':
          description: 'Binding was deleted. The expected response body is {}.'
          schema:
            $ref: '#/definitions/Empty'
        '410':
          description: >-
            Should be returned if the binding does not exist. The expected
            response body is {}.
          schema:
            $ref: '#/definitions/Empty'
        default:
          description: "generic error response"
          schema:
            $ref: '#/definitions/BrokerError'
parameters:
  instance_id:
    name: instance_id
    description: >-
      The instance_id of a service instance is provided by the Cloud Controller.
      This ID will be used for future requests (bind and deprovision), so the
      broker must use it to correlate the resource it creates.
    type: string
    in: path
    required: true
  binding_id:
    name: binding_id
    description: The binding_id of a service binding is provided by the Cloud Controller.
    type: string
    in: path
    required: true
definitions:
  CatalogServices:
    description: list of services
    properties:
      services:
        type: array
        items:
          $ref: '#/definitions/CatalogService'
  CatalogService:
    description: Schema of a service object see http://docs.cloudfoundry.org/services/api.html
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      bindable:
        type: boolean
      tags:
        items:
          type: string
      metadata:
        $ref: '#/definitions/Meta_data'
      requires:
        type: array
        items:
          type: string
      plan_updateable:
        type: boolean
      plans:
        type: array
        description: A list of plans for this service
        items:
          $ref: '#/definitions/Plan'
      dashboard_client:
        $ref: '#/definitions/Dashboard_client'
  Plan:
    description: A plan for the service
    properties:
      id:
        type: string
        description: >-
          An identifier used to correlate this plan in future requests to the
          catalog. This must be unique within Cloud Foundry, using a GUID is
          recommended.
      name:
        type: string
        description: >-
          The CLI-friendly name of the plan that will appear in the catalog. All
          lowercase, no spaces.
      description:
        type: string
        description: A short description of the service that will appear in the catalog.
      metadata:
        description: >-
          A list of metadata for a service plan. For more information, [see
          Service
          Metadata](https://docs.cloudfoundry.org/services/catalog-metadata.html).
        properties:
          name:
            type: string
            description: >-
              A short name for the service plan to be displayed in a catalog.
          description:
            type: string
            description: >-
              A description of the service plan to be displayed in a catalog.
          metadata:
            type: object
            description: >-
              Additional non mandatory fields for Plan metadata (e.g. metadata.displayName, metadata.bullets)
      free:
        type: boolean
        description: >-
          This field allows the plan to be limited by the
          non_basic_services_allowed field in a Cloud Foundry Quota, [see Quota
          Plans](http://docs.cloudfoundry.org/running/managing-cf/quota-plans.html).
  Dashboard_client:
    description: >-
      Contains the data necessary to activate the [Dashboard SSO
      feature](https://docs.cloudfoundry.org/services/dashboard-sso.html) for
      this service
    properties:
      id:
        type: string
        description: >-
          The id of the Oauth2 client that the service intends to use. The name
          may be taken, in which case the API will return an error to the
          operator
      secret:
        type: string
        description: A secret for the dashboard client
      redirect_uri:
        type: string
        description: >-
          A domain for the service dashboard that will be whitelisted by the UAA
          to enable SSO
  Service:
    description: Service object
    properties:
      service_id:
        type: string
        description: >-
          The ID of the service within the catalog above. While not strictly
          necessary, some brokers might make use of this ID.
      plan_id:
        type: string
        description: >-
          The ID of the plan within the above service (from the catalog
          endpoint) that the user would like provisioned. Because plans have
          identifiers unique to a broker, this is enough information to
          determine what to provision.
      organization_guid:
        type: string
        description: >-
          The Cloud Controller GUID of the organization under which the service
          is to be provisioned. Although most brokers will not use this field,
          it could be helpful in determining data placement or applying custom
          business rules.
      space_guid:
        type: string
        description: 'Similar to organization_guid, but for the space.'
      parameteres:
        $ref: '#/definitions/Parameter'
      accepts_incomplete:
        description: >-
          A value of true indicates that both the Cloud Controller and the
          requesting client support asynchronous provisioning. If this parameter
          is not included in the request, and the broker can only provision an
          instance of the requested plan asynchronously, the broker should
          reject the request with a 422 as described below
        type: boolean
  Dashboard_url:
    description: >-
      The URL of a web-based management user interface for the service instance;
      we refer to this as a service dashboard. The URL should contain enough
      information for the dashboard to identify the resource being accessed ( in
      the example below). For information on how users can authenticate with
      service dashboards via SSO, [see Dashboard Single
      Sign-On](https://docs.cloudfoundry.org/services/dashboard-sso.html).
    properties:
      dashboard_url:
        type: string
        description: >-
          The URL of a web-based management user interface for the service
          instance; we refer to this as a service dashboard. The URL should
          contain enough information for the dashboard to identify the resource
          being accessed (in the example below). For information on how users
          can authenticate with service dashboards via SSO, [see Dashboard
          Single
          Sign-On](https://docs.cloudfoundry.org/services/dashboard-sso.html).
  Empty:
    type: object
    description: 'Expected empty response could be {}'
    properties: 
      fake:
        type: string
  LastOperation:
    description: Last operation response.
    properties:
      state:
        type: string
      description:
        type: string
  AsyncError:
    description: Async operation not supported error
    properties:
      error:
        type: string
      description:
        type: string
  ServicePlan:
    description: New Plan to be added to a service.
    properties:
      service_id:
        type: string
      plan_id:
        type: string
      parameters:
        $ref: '#/definitions/Parameter'
      previous_values:
        $ref: '#/definitions/PreviousValues'
      accepts_incomplete:
        description: >-
          A value of true indicates that both the Cloud Controller and the
          requesting client support asynchronous provisioning. If this parameter
          is not included in the request, and the broker can only provision an
          instance of the requested plan asynchronously, the broker should
          reject the request with a 422 as described below
        type: boolean
  PreviousValues:
    description: Information about the instance prior to the update.
    properties:
      plan_id:
        type: string
        description: ID of the plan prior to the update.
      service_id:
        type: string
        description: ID of the service for the instance.
      organization_id:
        type: string
        description: ID of the organization containing the instance.
      space_id:
        type: string
        description: ID of the space containing the instance.
  Parameter:
    description: A key value parameters
    properties:
      name:
        type: string
        description: Name of the parameter
      value:
        type: object
        description: value of the parameter
  Binding:
    description: Information to bind the service to an application.
    properties:
      app_guid:
        type: string
        description: >-
          GUID of the application that you want to bind your service to. Will be
          included when users bind applications to service instances.
      plan_id:
        type: string
        description: >-
          ID of the plan from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
      service_id:
        type: string
        description: >-
          ID of the service from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
      bind_resource:
        $ref: '#/definitions/Bind_resource'
      parameters:
        $ref: '#/definitions/Parameter'
  Bind_resource:
    properties:
      app_guid:
        type: string
      route:
        type: string
  BindingResponse:
    description: Success binding response.
    properties:
      credentials:
        type: object
        description: >-
          A free-form hash of credentials that the bound application can use to
          access the service. For more information, [see Binding
          Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).
      syslog_drain_url:
        type: string
        description: >-
          A URL to which Cloud Foundry should drain logs for the bound
          application. requires syslog_drain must be declared in the catalog
          endpoint or Cloud Foundry will consider the response invalid. For
          details, [see Application Log
          Streaming](https://docs.cloudfoundry.org/services/app-log-streaming.html).
      route_service_url:
        type: string
        description: >-
          A URL to which Cloud Foundry should proxy requests for the bound
          route.
  Meta_data:
    description: metadata related to the service
    properties:
      displayName:
        type: string
        description: displayName of the service.
      imageUrl:
        description: image URL.
        type: string
      longDescription:
        description: Long Description
        type: string
      providerDisplayName:
        description: Provider Display Name
        type: string
      documentationURL:
        description: Documentation URL
        type: string
      supportURL:
        description: Support URL
        type: string
  DeleteService:
    description: Parameters needed to unbind a service instance
    properties:
      service_id:
        type: string
        description: >-
          ID of the service from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
      plan_id:
        type: string
        description: >-
          ID of the plan from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
      accepts_incomplete:
        description: >-
          A value of true indicates that both the Cloud Controller and the
          requesting client support asynchronous provisioning. If this parameter
          is not included in the request, and the broker can only provision an
          instance of the requested plan asynchronously, the broker should
          reject the request with a 422 as described below
        type: boolean
  UnbindParameters:
    description: Parameters needed to unbind a service instance
    properties:
      service_id:
        type: string
        description: >-
          ID of the service from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
      plan_id:
        type: string
        description: >-
          ID of the plan from the catalog. While not strictly necessary, some
          brokers might make use of this ID.
  BrokerError:
    description: General error
    required:
    - message
    properties:
      message: 
        type: string
        description: "An error message explaining why the request failed. This message will be displayed to the user who initiated the request."